{
    "docstring": "\"\"\"\n    A subclass of dictionary customized to handle multiple values for the\n    same key.\n\n    >>> d = MultiValueDict({'name': ['Adrian', 'Simon'], 'position': ['Developer']})\n    >>> d['name']\n    'Simon'\n    >>> d.getlist('name')\n    ['Adrian', 'Simon']\n    >>> d.getlist('doesnotexist')\n    []\n    >>> d.getlist('doesnotexist', ['Adrian', 'Simon'])\n    ['Adrian', 'Simon']\n    >>> d.get('lastname', 'nonexistent')\n    'nonexistent'\n    >>> d.setlist('lastname', ['Holovaty', 'Willison'])\n\n    This class exists to solve the irritating problem raised by cgi.parse_qs,\n    which returns a list for every key, even though most web forms submit\n    single name-value pairs.\n    \"\"\"",
    "name": "MultiValueDict",
    "namespace": "django.utils.datastructures.MultiValueDict",
    "module_name": "django.utils.datastructures",
    "package_name": "",
    "methods": [
        {
            "docstring": "",
            "name": "__init__",
            "namespace": "django.utils.datastructures.MultiValueDict.__init__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__repr__",
            "namespace": "django.utils.datastructures.MultiValueDict.__repr__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return the last data value for this key, or [] if it's an empty list;\n        raise KeyError if not found.\n        \"\"\"",
            "name": "__getitem__",
            "namespace": "django.utils.datastructures.MultiValueDict.__getitem__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__setitem__",
            "namespace": "django.utils.datastructures.MultiValueDict.__setitem__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__copy__",
            "namespace": "django.utils.datastructures.MultiValueDict.__copy__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__deepcopy__",
            "namespace": "django.utils.datastructures.MultiValueDict.__deepcopy__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__getstate__",
            "namespace": "django.utils.datastructures.MultiValueDict.__getstate__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__setstate__",
            "namespace": "django.utils.datastructures.MultiValueDict.__setstate__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return the last data value for the passed key. If key doesn't exist\n        or value is an empty list, return `default`.\n        \"\"\"",
            "name": "get",
            "namespace": "django.utils.datastructures.MultiValueDict.get",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return a list of values for the key.\n\n        Used internally to manipulate values list. If force_list is True,\n        return a new copy of values.\n        \"\"\"",
            "name": "_getlist",
            "namespace": "django.utils.datastructures.MultiValueDict._getlist",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return the list of values for the key. If key doesn't exist, return a\n        default value.\n        \"\"\"",
            "name": "getlist",
            "namespace": "django.utils.datastructures.MultiValueDict.getlist",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "setlist",
            "namespace": "django.utils.datastructures.MultiValueDict.setlist",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "setdefault",
            "namespace": "django.utils.datastructures.MultiValueDict.setdefault",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "setlistdefault",
            "namespace": "django.utils.datastructures.MultiValueDict.setlistdefault",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Append an item to the internal list associated with key.\"\"\"",
            "name": "appendlist",
            "namespace": "django.utils.datastructures.MultiValueDict.appendlist",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Yield (key, value) pairs, where value is the last item in the list\n        associated with the key.\n        \"\"\"",
            "name": "items",
            "namespace": "django.utils.datastructures.MultiValueDict.items",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Yield (key, list) pairs.\"\"\"",
            "name": "lists",
            "namespace": "django.utils.datastructures.MultiValueDict.lists",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Yield the last value on every key list.\"\"\"",
            "name": "values",
            "namespace": "django.utils.datastructures.MultiValueDict.values",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return a shallow copy of this object.\"\"\"",
            "name": "copy",
            "namespace": "django.utils.datastructures.MultiValueDict.copy",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Extend rather than replace existing key lists.\"\"\"",
            "name": "update",
            "namespace": "django.utils.datastructures.MultiValueDict.update",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return current object as a dict with singular values.\"\"\"",
            "name": "dict",
            "namespace": "django.utils.datastructures.MultiValueDict.dict",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        }
    ]
}