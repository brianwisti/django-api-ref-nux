{
    "docstring": "\"\"\"Functionality common to both ModelAdmin and InlineAdmin.\"\"\"",
    "name": "BaseModelAdmin",
    "namespace": "django.contrib.admin.options.BaseModelAdmin",
    "module_name": "django.contrib.admin.options",
    "package_name": "",
    "methods": [
        {
            "docstring": "",
            "name": "check",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.check",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__init__",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.__init__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Hook for specifying the form Field instance for a given database Field\n        instance.\n\n        If kwargs are given, they're passed to the form Field's constructor.\n        \"\"\"",
            "name": "formfield_for_dbfield",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.formfield_for_dbfield",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Get a form Field for a database Field that has declared choices.\n        \"\"\"",
            "name": "formfield_for_choice_field",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.formfield_for_choice_field",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        If the ModelAdmin specifies ordering, the queryset should respect that\n        ordering.  Otherwise don't specify the queryset, let the field decide\n        (return None in that case).\n        \"\"\"",
            "name": "get_field_queryset",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.get_field_queryset",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Get a form Field for a ForeignKey.\n        \"\"\"",
            "name": "formfield_for_foreignkey",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.formfield_for_foreignkey",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Get a form Field for a ManyToManyField.\n        \"\"\"",
            "name": "formfield_for_manytomany",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.formfield_for_manytomany",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return a list of ForeignKey and/or ManyToMany fields which should use\n        an autocomplete widget.\n        \"\"\"",
            "name": "get_autocomplete_fields",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.get_autocomplete_fields",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "get_view_on_site_url",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.get_view_on_site_url",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return the empty_value_display set on ModelAdmin or AdminSite.\n        \"\"\"",
            "name": "get_empty_value_display",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.get_empty_value_display",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Hook for specifying exclude.\n        \"\"\"",
            "name": "get_exclude",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.get_exclude",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Hook for specifying fields.\n        \"\"\"",
            "name": "get_fields",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.get_fields",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Hook for specifying fieldsets.\n        \"\"\"",
            "name": "get_fieldsets",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.get_fieldsets",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Hook for specifying custom inlines.\"\"\"",
            "name": "get_inlines",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.get_inlines",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Hook for specifying field ordering.\n        \"\"\"",
            "name": "get_ordering",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.get_ordering",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Hook for specifying custom readonly fields.\n        \"\"\"",
            "name": "get_readonly_fields",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.get_readonly_fields",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Hook for specifying custom prepopulated fields.\n        \"\"\"",
            "name": "get_prepopulated_fields",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.get_prepopulated_fields",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return a QuerySet of all model instances that can be edited by the\n        admin site. This is used by changelist_view.\n        \"\"\"",
            "name": "get_queryset",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.get_queryset",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Hook for specifying which fields can be sorted in the changelist.\"\"\"",
            "name": "get_sortable_by",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.get_sortable_by",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "lookup_allowed",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.lookup_allowed",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return True if the model associated with this admin should be\n        allowed to be referenced by the specified field.\n        \"\"\"",
            "name": "to_field_allowed",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.to_field_allowed",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return True if the given request has permission to add an object.\n        Can be overridden by the user in subclasses.\n        \"\"\"",
            "name": "has_add_permission",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.has_add_permission",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return True if the given request has permission to change the given\n        Django model instance, the default implementation doesn't examine the\n        `obj` parameter.\n\n        Can be overridden by the user in subclasses. In such case it should\n        return True if the given request has permission to change the `obj`\n        model instance. If `obj` is None, this should return True if the given\n        request has permission to change *any* object of the given type.\n        \"\"\"",
            "name": "has_change_permission",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.has_change_permission",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return True if the given request has permission to change the given\n        Django model instance, the default implementation doesn't examine the\n        `obj` parameter.\n\n        Can be overridden by the user in subclasses. In such case it should\n        return True if the given request has permission to delete the `obj`\n        model instance. If `obj` is None, this should return True if the given\n        request has permission to delete *any* object of the given type.\n        \"\"\"",
            "name": "has_delete_permission",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.has_delete_permission",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return True if the given request has permission to view the given\n        Django model instance. The default implementation doesn't examine the\n        `obj` parameter.\n\n        If overridden by the user in subclasses, it should return True if the\n        given request has permission to view the `obj` model instance. If `obj`\n        is None, it should return True if the request has permission to view\n        any object of the given type.\n        \"\"\"",
            "name": "has_view_permission",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.has_view_permission",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "has_view_or_change_permission",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.has_view_or_change_permission",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return True if the given request has any permission in the given\n        app label.\n\n        Can be overridden by the user in subclasses. In such case it should\n        return True if the given request has permission to view the module on\n        the admin index page and access the module's index page. Overriding it\n        does not restrict access to the add, change or delete views. Use\n        `ModelAdmin.has_(add|change|delete)_permission` for that.\n        \"\"\"",
            "name": "has_module_permission",
            "namespace": "django.contrib.admin.options.BaseModelAdmin.has_module_permission",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        }
    ]
}