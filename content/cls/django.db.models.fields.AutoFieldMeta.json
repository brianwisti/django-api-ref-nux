{
    "docstring": "\"\"\"\n    Metaclass to maintain backward inheritance compatibility for AutoField.\n\n    It is intended that AutoFieldMixin become public API when it is possible to\n    create a non-integer automatically-generated field using column defaults\n    stored in the database.\n\n    In many areas Django also relies on using isinstance() to check for an\n    automatically-generated field as a subclass of AutoField. A new flag needs\n    to be implemented on Field to be used instead.\n\n    When these issues have been addressed, this metaclass could be used to\n    deprecate inheritance from AutoField and use of isinstance() with AutoField\n    for detecting automatically-generated fields.\n    \"\"\"",
    "name": "AutoFieldMeta",
    "namespace": "django.db.models.fields.AutoFieldMeta",
    "module_name": "django.db.models.fields",
    "package_name": "django.db.models.fields",
    "methods": [
        {
            "docstring": "",
            "name": "_subclasses",
            "namespace": "django.db.models.fields.AutoFieldMeta._subclasses",
            "class_name": "django.db.models.fields.AutoFieldMeta",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__instancecheck__",
            "namespace": "django.db.models.fields.AutoFieldMeta.__instancecheck__",
            "class_name": "django.db.models.fields.AutoFieldMeta",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__subclasscheck__",
            "namespace": "django.db.models.fields.AutoFieldMeta.__subclasscheck__",
            "class_name": "django.db.models.fields.AutoFieldMeta",
            "module_name": "",
            "package_name": ""
        }
    ]
}