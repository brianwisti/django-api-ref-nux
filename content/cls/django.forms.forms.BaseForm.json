{
    "docstring": "\"\"\"\n    The main implementation of all the Form logic. Note that this class is\n    different than Form. See the comments by the Form class for more info. Any\n    improvements to the form API should be made to this class, not to the Form\n    class.\n    \"\"\"",
    "name": "BaseForm",
    "namespace": "django.forms.forms.BaseForm",
    "module_name": "django.forms.forms",
    "package_name": "",
    "methods": [
        {
            "docstring": "",
            "name": "__init__",
            "namespace": "django.forms.forms.BaseForm.__init__",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Rearrange the fields according to field_order.\n\n        field_order is a list of field names specifying the order. Append fields\n        not included in the list in the default order for backward compatibility\n        with subclasses not overriding field_order. If field_order is None,\n        keep all fields in the order defined in the class. Ignore unknown\n        fields in field_order to allow disabling fields in form subclasses\n        without redefining ordering.\n        \"\"\"",
            "name": "order_fields",
            "namespace": "django.forms.forms.BaseForm.order_fields",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__repr__",
            "namespace": "django.forms.forms.BaseForm.__repr__",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Yield (name, bf) pairs, where bf is a BoundField object.\"\"\"",
            "name": "_bound_items",
            "namespace": "django.forms.forms.BaseForm._bound_items",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Yield the form's fields as BoundField objects.\"\"\"",
            "name": "__iter__",
            "namespace": "django.forms.forms.BaseForm.__iter__",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return a BoundField with the given name.\"\"\"",
            "name": "__getitem__",
            "namespace": "django.forms.forms.BaseForm.__getitem__",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return an ErrorDict for the data provided for the form.\"\"\"",
            "name": "errors",
            "namespace": "django.forms.forms.BaseForm.errors",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return True if the form has no errors, or False otherwise.\"\"\"",
            "name": "is_valid",
            "namespace": "django.forms.forms.BaseForm.is_valid",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return the field name with a prefix appended, if this Form has a\n        prefix set.\n\n        Subclasses may wish to override.\n        \"\"\"",
            "name": "add_prefix",
            "namespace": "django.forms.forms.BaseForm.add_prefix",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Add an 'initial' prefix for checking dynamic initial values.\"\"\"",
            "name": "add_initial_prefix",
            "namespace": "django.forms.forms.BaseForm.add_initial_prefix",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "_widget_data_value",
            "namespace": "django.forms.forms.BaseForm._widget_data_value",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"Output HTML. Used by as_table(), as_ul(), as_p().\"",
            "name": "_html_output",
            "namespace": "django.forms.forms.BaseForm._html_output",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "get_context",
            "namespace": "django.forms.forms.BaseForm.get_context",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return an ErrorList of errors that aren't associated with a particular\n        field -- i.e., from Form.clean(). Return an empty ErrorList if there\n        are none.\n        \"\"\"",
            "name": "non_field_errors",
            "namespace": "django.forms.forms.BaseForm.non_field_errors",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Update the content of `self._errors`.\n\n        The `field` argument is the name of the field to which the errors\n        should be added. If it's None, treat the errors as NON_FIELD_ERRORS.\n\n        The `error` argument can be a single error, a list of errors, or a\n        dictionary that maps field names to lists of errors. An \"error\" can be\n        either a simple string or an instance of ValidationError with its\n        message attribute set and a \"list or dictionary\" can be an actual\n        `list` or `dict` or an instance of ValidationError with its\n        `error_list` or `error_dict` attribute set.\n\n        If `error` is a dictionary, the `field` argument *must* be None and\n        errors will be added to the fields that correspond to the keys of the\n        dictionary.\n        \"\"\"",
            "name": "add_error",
            "namespace": "django.forms.forms.BaseForm.add_error",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "has_error",
            "namespace": "django.forms.forms.BaseForm.has_error",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Clean all of self.data and populate self._errors and self.cleaned_data.\n        \"\"\"",
            "name": "full_clean",
            "namespace": "django.forms.forms.BaseForm.full_clean",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "_clean_fields",
            "namespace": "django.forms.forms.BaseForm._clean_fields",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "_clean_form",
            "namespace": "django.forms.forms.BaseForm._clean_form",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        An internal hook for performing additional cleaning after form cleaning\n        is complete. Used for model validation in model forms.\n        \"\"\"",
            "name": "_post_clean",
            "namespace": "django.forms.forms.BaseForm._post_clean",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Hook for doing any extra form-wide cleaning after Field.clean() has been\n        called on every field. Any ValidationError raised by this method will\n        not be associated with a particular field; it will have a special-case\n        association with the field named '__all__'.\n        \"\"\"",
            "name": "clean",
            "namespace": "django.forms.forms.BaseForm.clean",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return True if data differs from initial.\"\"\"",
            "name": "has_changed",
            "namespace": "django.forms.forms.BaseForm.has_changed",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "changed_data",
            "namespace": "django.forms.forms.BaseForm.changed_data",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return all media required to render the widgets on this form.\"\"\"",
            "name": "media",
            "namespace": "django.forms.forms.BaseForm.media",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return True if the form needs to be multipart-encoded, i.e. it has\n        FileInput, or False otherwise.\n        \"\"\"",
            "name": "is_multipart",
            "namespace": "django.forms.forms.BaseForm.is_multipart",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return a list of all the BoundField objects that are hidden fields.\n        Useful for manual form layout in templates.\n        \"\"\"",
            "name": "hidden_fields",
            "namespace": "django.forms.forms.BaseForm.hidden_fields",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return a list of BoundField objects that aren't hidden fields.\n        The opposite of the hidden_fields() method.\n        \"\"\"",
            "name": "visible_fields",
            "namespace": "django.forms.forms.BaseForm.visible_fields",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return initial data for field on form. Use initial data from the form\n        or the field, in that order. Evaluate callable values.\n        \"\"\"",
            "name": "get_initial_for_field",
            "namespace": "django.forms.forms.BaseForm.get_initial_for_field",
            "class_name": "django.forms.forms.BaseForm",
            "module_name": "",
            "package_name": ""
        }
    ]
}