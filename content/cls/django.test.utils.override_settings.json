{
    "docstring": "\"\"\"\n    Act as either a decorator or a context manager. If it's a decorator, take a\n    function and return a wrapped function. If it's a contextmanager, use it\n    with the ``with`` statement. In either event, entering/exiting are called\n    before and after, respectively, the function/block is executed.\n    \"\"\"",
    "name": "override_settings",
    "namespace": "django.test.utils.override_settings",
    "module_name": "django.test.utils",
    "package_name": "",
    "methods": [
        {
            "docstring": "",
            "name": "__init__",
            "namespace": "django.test.utils.override_settings.__init__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "enable",
            "namespace": "django.test.utils.override_settings.enable",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "disable",
            "namespace": "django.test.utils.override_settings.disable",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "save_options",
            "namespace": "django.test.utils.override_settings.save_options",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "decorate_class",
            "namespace": "django.test.utils.override_settings.decorate_class",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        }
    ]
}