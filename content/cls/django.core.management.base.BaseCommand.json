{
    "docstring": "\"\"\"\n    The base class from which all management commands ultimately\n    derive.\n\n    Use this class if you want access to all of the mechanisms which\n    parse the command-line arguments and work out what code to call in\n    response; if you don't need to change any of that behavior,\n    consider using one of the subclasses defined in this file.\n\n    If you are interested in overriding/customizing various aspects of\n    the command-parsing and -execution behavior, the normal flow works\n    as follows:\n\n    1. ``django-admin`` or ``manage.py`` loads the command class\n       and calls its ``run_from_argv()`` method.\n\n    2. The ``run_from_argv()`` method calls ``create_parser()`` to get\n       an ``ArgumentParser`` for the arguments, parses them, performs\n       any environment changes requested by options like\n       ``pythonpath``, and then calls the ``execute()`` method,\n       passing the parsed arguments.\n\n    3. The ``execute()`` method attempts to carry out the command by\n       calling the ``handle()`` method with the parsed arguments; any\n       output produced by ``handle()`` will be printed to standard\n       output and, if the command is intended to produce a block of\n       SQL statements, will be wrapped in ``BEGIN`` and ``COMMIT``.\n\n    4. If ``handle()`` or ``execute()`` raised any exception (e.g.\n       ``CommandError``), ``run_from_argv()`` will  instead print an error\n       message to ``stderr``.\n\n    Thus, the ``handle()`` method is typically the starting point for\n    subclasses; many built-in commands and command types either place\n    all of their logic in ``handle()``, or perform some additional\n    parsing work in ``handle()`` and then delegate from it to more\n    specialized methods as needed.\n\n    Several attributes affect behavior at various steps along the way:\n\n    ``help``\n        A short description of the command, which will be printed in\n        help messages.\n\n    ``output_transaction``\n        A boolean indicating whether the command outputs SQL\n        statements; if ``True``, the output will automatically be\n        wrapped with ``BEGIN;`` and ``COMMIT;``. Default value is\n        ``False``.\n\n    ``requires_migrations_checks``\n        A boolean; if ``True``, the command prints a warning if the set of\n        migrations on disk don't match the migrations in the database.\n\n    ``requires_system_checks``\n        A list or tuple of tags, e.g. [Tags.staticfiles, Tags.models]. System\n        checks registered in the chosen tags will be checked for errors prior\n        to executing the command. The value '__all__' can be used to specify\n        that all system checks should be performed. Default value is '__all__'.\n\n        To validate an individual application's models\n        rather than all applications' models, call\n        ``self.check(app_configs)`` from ``handle()``, where ``app_configs``\n        is the list of application's configuration provided by the\n        app registry.\n\n    ``stealth_options``\n        A tuple of any options the command uses which aren't defined by the\n        argument parser.\n    \"\"\"",
    "name": "BaseCommand",
    "namespace": "django.core.management.base.BaseCommand",
    "module_name": "django.core.management.base",
    "package_name": "",
    "methods": [
        {
            "docstring": "",
            "name": "__init__",
            "namespace": "django.core.management.base.BaseCommand.__init__",
            "class_name": "django.core.management.base.BaseCommand",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return the Django version, which should be correct for all built-in\n        Django commands. User-supplied commands can override this method to\n        return their own version.\n        \"\"\"",
            "name": "get_version",
            "namespace": "django.core.management.base.BaseCommand.get_version",
            "class_name": "django.core.management.base.BaseCommand",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Create and return the ``ArgumentParser`` which will be used to\n        parse the arguments to this command.\n        \"\"\"",
            "name": "create_parser",
            "namespace": "django.core.management.base.BaseCommand.create_parser",
            "class_name": "django.core.management.base.BaseCommand",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Entry point for subclassed commands to add custom arguments.\n        \"\"\"",
            "name": "add_arguments",
            "namespace": "django.core.management.base.BaseCommand.add_arguments",
            "class_name": "django.core.management.base.BaseCommand",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Call the parser's add_argument() method, suppressing the help text\n        according to BaseCommand.suppressed_base_arguments.\n        \"\"\"",
            "name": "add_base_argument",
            "namespace": "django.core.management.base.BaseCommand.add_base_argument",
            "class_name": "django.core.management.base.BaseCommand",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Print the help message for this command, derived from\n        ``self.usage()``.\n        \"\"\"",
            "name": "print_help",
            "namespace": "django.core.management.base.BaseCommand.print_help",
            "class_name": "django.core.management.base.BaseCommand",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Set up any environment changes requested (e.g., Python path\n        and Django settings), then run this command. If the\n        command raises a ``CommandError``, intercept it and print it sensibly\n        to stderr. If the ``--traceback`` option is present or the raised\n        ``Exception`` is not ``CommandError``, raise it.\n        \"\"\"",
            "name": "run_from_argv",
            "namespace": "django.core.management.base.BaseCommand.run_from_argv",
            "class_name": "django.core.management.base.BaseCommand",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Try to execute this command, performing system checks if needed (as\n        controlled by the ``requires_system_checks`` attribute, except if\n        force-skipped).\n        \"\"\"",
            "name": "execute",
            "namespace": "django.core.management.base.BaseCommand.execute",
            "class_name": "django.core.management.base.BaseCommand",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Use the system check framework to validate entire Django project.\n        Raise CommandError for any serious message (error or critical errors).\n        If there are only light messages (like warnings), print them to stderr\n        and don't raise an exception.\n        \"\"\"",
            "name": "check",
            "namespace": "django.core.management.base.BaseCommand.check",
            "class_name": "django.core.management.base.BaseCommand",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Print a warning if the set of migrations on disk don't match the\n        migrations in the database.\n        \"\"\"",
            "name": "check_migrations",
            "namespace": "django.core.management.base.BaseCommand.check_migrations",
            "class_name": "django.core.management.base.BaseCommand",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        The actual logic of the command. Subclasses must implement\n        this method.\n        \"\"\"",
            "name": "handle",
            "namespace": "django.core.management.base.BaseCommand.handle",
            "class_name": "django.core.management.base.BaseCommand",
            "module_name": "",
            "package_name": ""
        }
    ]
}