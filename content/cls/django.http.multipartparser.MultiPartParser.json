{
    "docstring": "\"\"\"\n    A rfc2388 multipart/form-data parser.\n\n    ``MultiValueDict.parse()`` reads the input stream in ``chunk_size`` chunks\n    and returns a tuple of ``(MultiValueDict(POST), MultiValueDict(FILES))``.\n    \"\"\"",
    "name": "MultiPartParser",
    "namespace": "django.http.multipartparser.MultiPartParser",
    "module_name": "django.http.multipartparser",
    "package_name": "",
    "methods": [
        {
            "docstring": "\"\"\"\n        Initialize the MultiPartParser object.\n\n        :META:\n            The standard ``META`` dictionary in Django request objects.\n        :input_data:\n            The raw post data, as a file-like object.\n        :upload_handlers:\n            A list of UploadHandler instances that perform operations on the\n            uploaded data.\n        :encoding:\n            The encoding with which to treat the incoming data.\n        \"\"\"",
            "name": "__init__",
            "namespace": "django.http.multipartparser.MultiPartParser.__init__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Parse the POST data and break it into a FILES MultiValueDict and a POST\n        MultiValueDict.\n\n        Return a tuple containing the POST and FILES dictionary, respectively.\n        \"\"\"",
            "name": "parse",
            "namespace": "django.http.multipartparser.MultiPartParser.parse",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Handle all the signaling that takes place when a file is complete.\n        \"\"\"",
            "name": "handle_file_complete",
            "namespace": "django.http.multipartparser.MultiPartParser.handle_file_complete",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Sanitize the filename of an upload.\n\n        Remove all possible path separators, even though that might remove more\n        than actually required by the target system. Filenames that could\n        potentially cause problems (current/parent dir) are also discarded.\n\n        It should be noted that this function could still return a \"filepath\"\n        like \"C:some_file.txt\" which is handled later on by the storage layer.\n        So while this function does sanitize filenames to some extent, the\n        resulting filename should still be considered as untrusted user input.\n        \"\"\"",
            "name": "sanitize_file_name",
            "namespace": "django.http.multipartparser.MultiPartParser.sanitize_file_name",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "_close_files",
            "namespace": "django.http.multipartparser.MultiPartParser._close_files",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        }
    ]
}