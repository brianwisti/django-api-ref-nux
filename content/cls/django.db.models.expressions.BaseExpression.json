{
    "docstring": "\"\"\"Base class for all query expressions.\"\"\"",
    "name": "BaseExpression",
    "namespace": "django.db.models.expressions.BaseExpression",
    "module_name": "django.db.models.expressions",
    "package_name": "",
    "methods": [
        {
            "docstring": "",
            "name": "__init__",
            "namespace": "django.db.models.expressions.BaseExpression.__init__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__getstate__",
            "namespace": "django.db.models.expressions.BaseExpression.__getstate__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "get_db_converters",
            "namespace": "django.db.models.expressions.BaseExpression.get_db_converters",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "get_source_expressions",
            "namespace": "django.db.models.expressions.BaseExpression.get_source_expressions",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "set_source_expressions",
            "namespace": "django.db.models.expressions.BaseExpression.set_source_expressions",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "_parse_expressions",
            "namespace": "django.db.models.expressions.BaseExpression._parse_expressions",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Responsible for returning a (sql, [params]) tuple to be included\n        in the current query.\n\n        Different backends can provide their own implementation, by\n        providing an `as_{vendor}` method and patching the Expression:\n\n        ```\n        def override_as_sql(self, compiler, connection):\n            # custom logic\n            return super().as_sql(compiler, connection)\n        setattr(Expression, 'as_' + connection.vendor, override_as_sql)\n        ```\n\n        Arguments:\n         * compiler: the query compiler responsible for generating the query.\n           Must have a compile method, returning a (sql, [params]) tuple.\n           Calling compiler(value) will return a quoted `value`.\n\n         * connection: the database connection used for the current query.\n\n        Return: (sql, params)\n          Where `sql` is a string containing ordered sql parameters to be\n          replaced with the elements of the list `params`.\n        \"\"\"",
            "name": "as_sql",
            "namespace": "django.db.models.expressions.BaseExpression.as_sql",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "contains_aggregate",
            "namespace": "django.db.models.expressions.BaseExpression.contains_aggregate",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "contains_over_clause",
            "namespace": "django.db.models.expressions.BaseExpression.contains_over_clause",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "contains_column_references",
            "namespace": "django.db.models.expressions.BaseExpression.contains_column_references",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Provide the chance to do any preprocessing or validation before being\n        added to the query.\n\n        Arguments:\n         * query: the backend query implementation\n         * allow_joins: boolean allowing or denying use of joins\n           in this query\n         * reuse: a set of reusable joins for multijoins\n         * summarize: a terminal aggregate clause\n         * for_save: whether this expression about to be used in a save or update\n\n        Return: an Expression to be added to the query.\n        \"\"\"",
            "name": "resolve_expression",
            "namespace": "django.db.models.expressions.BaseExpression.resolve_expression",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "conditional",
            "namespace": "django.db.models.expressions.BaseExpression.conditional",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "field",
            "namespace": "django.db.models.expressions.BaseExpression.field",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return the output type of this expressions.\"\"\"",
            "name": "output_field",
            "namespace": "django.db.models.expressions.BaseExpression.output_field",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return the output field of this expression, or None if\n        _resolve_output_field() didn't return an output type.\n        \"\"\"",
            "name": "_output_field_or_none",
            "namespace": "django.db.models.expressions.BaseExpression._output_field_or_none",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Attempt to infer the output type of the expression. If the output\n        fields of all source fields match then, simply infer the same type\n        here. This isn't always correct, but it makes sense most of the time.\n\n        Consider the difference between `2 + 2` and `2 / 3`. Inferring\n        the type here is a convenience for the common case. The user should\n        supply their own output_field with more complex computations.\n\n        If a source's output field resolves to None, exclude it from this check.\n        If all sources are None, then an error is raised higher up the stack in\n        the output_field property.\n        \"\"\"",
            "name": "_resolve_output_field",
            "namespace": "django.db.models.expressions.BaseExpression._resolve_output_field",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "_convert_value_noop",
            "namespace": "django.db.models.expressions.BaseExpression._convert_value_noop",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Expressions provide their own converters because users have the option\n        of manually specifying the output_field which may be a different type\n        from the one the database returns.\n        \"\"\"",
            "name": "convert_value",
            "namespace": "django.db.models.expressions.BaseExpression.convert_value",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "get_lookup",
            "namespace": "django.db.models.expressions.BaseExpression.get_lookup",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "get_transform",
            "namespace": "django.db.models.expressions.BaseExpression.get_transform",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "relabeled_clone",
            "namespace": "django.db.models.expressions.BaseExpression.relabeled_clone",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "copy",
            "namespace": "django.db.models.expressions.BaseExpression.copy",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "get_group_by_cols",
            "namespace": "django.db.models.expressions.BaseExpression.get_group_by_cols",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return the underlying field types used by this aggregate.\"\"\"",
            "name": "get_source_fields",
            "namespace": "django.db.models.expressions.BaseExpression.get_source_fields",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "asc",
            "namespace": "django.db.models.expressions.BaseExpression.asc",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "desc",
            "namespace": "django.db.models.expressions.BaseExpression.desc",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "reverse_ordering",
            "namespace": "django.db.models.expressions.BaseExpression.reverse_ordering",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Recursively yield this expression and all subexpressions, in\n        depth-first order.\n        \"\"\"",
            "name": "flatten",
            "namespace": "django.db.models.expressions.BaseExpression.flatten",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Custom format for select clauses. For example, EXISTS expressions need\n        to be wrapped in CASE WHEN on Oracle.\n        \"\"\"",
            "name": "select_format",
            "namespace": "django.db.models.expressions.BaseExpression.select_format",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        }
    ]
}