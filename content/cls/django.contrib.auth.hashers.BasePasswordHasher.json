{
    "docstring": "\"\"\"\n    Abstract base class for password hashers\n\n    When creating your own hasher, you need to override algorithm,\n    verify(), encode() and safe_summary().\n\n    PasswordHasher objects are immutable.\n    \"\"\"",
    "name": "BasePasswordHasher",
    "namespace": "django.contrib.auth.hashers.BasePasswordHasher",
    "module_name": "django.contrib.auth.hashers",
    "package_name": "",
    "methods": [
        {
            "docstring": "",
            "name": "_load_library",
            "namespace": "django.contrib.auth.hashers.BasePasswordHasher._load_library",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Generate a cryptographically secure nonce salt in ASCII with an entropy\n        of at least `salt_entropy` bits.\n        \"\"\"",
            "name": "salt",
            "namespace": "django.contrib.auth.hashers.BasePasswordHasher.salt",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Check if the given password is correct.\"\"\"",
            "name": "verify",
            "namespace": "django.contrib.auth.hashers.BasePasswordHasher.verify",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "_check_encode_args",
            "namespace": "django.contrib.auth.hashers.BasePasswordHasher._check_encode_args",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Create an encoded database value.\n\n        The result is normally formatted as \"algorithm$salt$hash\" and\n        must be fewer than 128 characters.\n        \"\"\"",
            "name": "encode",
            "namespace": "django.contrib.auth.hashers.BasePasswordHasher.encode",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return a decoded database value.\n\n        The result is a dictionary and should contain `algorithm`, `hash`, and\n        `salt`. Extra keys can be algorithm specific like `iterations` or\n        `work_factor`.\n        \"\"\"",
            "name": "decode",
            "namespace": "django.contrib.auth.hashers.BasePasswordHasher.decode",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return a summary of safe values.\n\n        The result is a dictionary and will be used where the password field\n        must be displayed to construct a safe representation of the password.\n        \"\"\"",
            "name": "safe_summary",
            "namespace": "django.contrib.auth.hashers.BasePasswordHasher.safe_summary",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "must_update",
            "namespace": "django.contrib.auth.hashers.BasePasswordHasher.must_update",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Bridge the runtime gap between the work factor supplied in `encoded`\n        and the work factor suggested by this hasher.\n\n        Taking PBKDF2 as an example, if `encoded` contains 20000 iterations and\n        `self.iterations` is 30000, this method should run password through\n        another 10000 iterations of PBKDF2. Similar approaches should exist\n        for any hasher that has a work factor. If not, this method should be\n        defined as a no-op to silence the warning.\n        \"\"\"",
            "name": "harden_runtime",
            "namespace": "django.contrib.auth.hashers.BasePasswordHasher.harden_runtime",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        }
    ]
}