{
    "docstring": "\"\"\"\n    An AdminSite object encapsulates an instance of the Django admin application, ready\n    to be hooked in to your URLconf. Models are registered with the AdminSite using the\n    register() method, and the get_urls() method can then be used to access Django view\n    functions that present a full admin interface for the collection of registered\n    models.\n    \"\"\"",
    "name": "AdminSite",
    "namespace": "django.contrib.admin.sites.AdminSite",
    "module_name": "django.contrib.admin.sites",
    "package_name": "",
    "methods": [
        {
            "docstring": "",
            "name": "__init__",
            "namespace": "django.contrib.admin.sites.AdminSite.__init__",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__repr__",
            "namespace": "django.contrib.admin.sites.AdminSite.__repr__",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Run the system checks on all ModelAdmins, except if they aren't\n        customized at all.\n        \"\"\"",
            "name": "check",
            "namespace": "django.contrib.admin.sites.AdminSite.check",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Register the given model(s) with the given admin class.\n\n        The model(s) should be Model classes, not instances.\n\n        If an admin class isn't given, use ModelAdmin (the default admin\n        options). If keyword arguments are given -- e.g., list_display --\n        apply them as options to the admin class.\n\n        If a model is already registered, raise AlreadyRegistered.\n\n        If a model is abstract, raise ImproperlyConfigured.\n        \"\"\"",
            "name": "register",
            "namespace": "django.contrib.admin.sites.AdminSite.register",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Unregister the given model(s).\n\n        If a model isn't already registered, raise NotRegistered.\n        \"\"\"",
            "name": "unregister",
            "namespace": "django.contrib.admin.sites.AdminSite.unregister",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Check if a model class is registered with this `AdminSite`.\n        \"\"\"",
            "name": "is_registered",
            "namespace": "django.contrib.admin.sites.AdminSite.is_registered",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Register an action to be available globally.\n        \"\"\"",
            "name": "add_action",
            "namespace": "django.contrib.admin.sites.AdminSite.add_action",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Disable a globally-registered action. Raise KeyError for invalid names.\n        \"\"\"",
            "name": "disable_action",
            "namespace": "django.contrib.admin.sites.AdminSite.disable_action",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Explicitly get a registered global action whether it's enabled or\n        not. Raise KeyError for invalid names.\n        \"\"\"",
            "name": "get_action",
            "namespace": "django.contrib.admin.sites.AdminSite.get_action",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Get all the enabled actions as an iterable of (name, func).\n        \"\"\"",
            "name": "actions",
            "namespace": "django.contrib.admin.sites.AdminSite.actions",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return True if the given HttpRequest has permission to view\n        *at least one* page in the admin site.\n        \"\"\"",
            "name": "has_permission",
            "namespace": "django.contrib.admin.sites.AdminSite.has_permission",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Decorator to create an admin view attached to this ``AdminSite``. This\n        wraps the view and provides permission checking by calling\n        ``self.has_permission``.\n\n        You'll want to use this from within ``AdminSite.get_urls()``:\n\n            class MyAdminSite(AdminSite):\n\n                def get_urls(self):\n                    from django.urls import path\n\n                    urls = super().get_urls()\n                    urls += [\n                        path('my_view/', self.admin_view(some_view))\n                    ]\n                    return urls\n\n        By default, admin_views are marked non-cacheable using the\n        ``never_cache`` decorator. If the view can be safely cached, set\n        cacheable=True.\n        \"\"\"",
            "name": "admin_view",
            "namespace": "django.contrib.admin.sites.AdminSite.admin_view",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "get_urls",
            "namespace": "django.contrib.admin.sites.AdminSite.get_urls",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "urls",
            "namespace": "django.contrib.admin.sites.AdminSite.urls",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return a dictionary of variables to put in the template context for\n        *every* page in the admin site.\n\n        For sites running on a subpath, use the SCRIPT_NAME value if site_url\n        hasn't been customized.\n        \"\"\"",
            "name": "each_context",
            "namespace": "django.contrib.admin.sites.AdminSite.each_context",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Handle the \"change password\" task -- both form display and validation.\n        \"\"\"",
            "name": "password_change",
            "namespace": "django.contrib.admin.sites.AdminSite.password_change",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Display the \"success\" page after a password change.\n        \"\"\"",
            "name": "password_change_done",
            "namespace": "django.contrib.admin.sites.AdminSite.password_change_done",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Display the i18n JavaScript that the Django admin requires.\n\n        `extra_context` is unused but present for consistency with the other\n        admin views.\n        \"\"\"",
            "name": "i18n_javascript",
            "namespace": "django.contrib.admin.sites.AdminSite.i18n_javascript",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Log out the user for the given HttpRequest.\n\n        This should *not* assume the user is already logged in.\n        \"\"\"",
            "name": "logout",
            "namespace": "django.contrib.admin.sites.AdminSite.logout",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Display the login form for the given HttpRequest.\n        \"\"\"",
            "name": "login",
            "namespace": "django.contrib.admin.sites.AdminSite.login",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "autocomplete_view",
            "namespace": "django.contrib.admin.sites.AdminSite.autocomplete_view",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "catch_all_view",
            "namespace": "django.contrib.admin.sites.AdminSite.catch_all_view",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Build the app dictionary. The optional `label` parameter filters models\n        of a specific app.\n        \"\"\"",
            "name": "_build_app_dict",
            "namespace": "django.contrib.admin.sites.AdminSite._build_app_dict",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return a sorted list of all the installed apps that have been\n        registered in this site.\n        \"\"\"",
            "name": "get_app_list",
            "namespace": "django.contrib.admin.sites.AdminSite.get_app_list",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Display the main admin index page, which lists all of the installed\n        apps that have been registered in this site.\n        \"\"\"",
            "name": "index",
            "namespace": "django.contrib.admin.sites.AdminSite.index",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "app_index",
            "namespace": "django.contrib.admin.sites.AdminSite.app_index",
            "class_name": "django.contrib.admin.sites.AdminSite",
            "module_name": "",
            "package_name": ""
        }
    ]
}