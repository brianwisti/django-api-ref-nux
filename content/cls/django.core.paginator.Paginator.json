{
    "docstring": "",
    "name": "Paginator",
    "namespace": "django.core.paginator.Paginator",
    "module_name": "django.core.paginator",
    "package_name": "",
    "methods": [
        {
            "docstring": "",
            "name": "__init__",
            "namespace": "django.core.paginator.Paginator.__init__",
            "class_name": "django.core.paginator.Paginator",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__iter__",
            "namespace": "django.core.paginator.Paginator.__iter__",
            "class_name": "django.core.paginator.Paginator",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Validate the given 1-based page number.\"\"\"",
            "name": "validate_number",
            "namespace": "django.core.paginator.Paginator.validate_number",
            "class_name": "django.core.paginator.Paginator",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return a valid page, even if the page argument isn't a number or isn't\n        in range.\n        \"\"\"",
            "name": "get_page",
            "namespace": "django.core.paginator.Paginator.get_page",
            "class_name": "django.core.paginator.Paginator",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return a Page object for the given 1-based page number.\"\"\"",
            "name": "page",
            "namespace": "django.core.paginator.Paginator.page",
            "class_name": "django.core.paginator.Paginator",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return an instance of a single page.\n\n        This hook can be used by subclasses to use an alternative to the\n        standard :cls:`Page` object.\n        \"\"\"",
            "name": "_get_page",
            "namespace": "django.core.paginator.Paginator._get_page",
            "class_name": "django.core.paginator.Paginator",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return the total number of objects, across all pages.\"\"\"",
            "name": "count",
            "namespace": "django.core.paginator.Paginator.count",
            "class_name": "django.core.paginator.Paginator",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return the total number of pages.\"\"\"",
            "name": "num_pages",
            "namespace": "django.core.paginator.Paginator.num_pages",
            "class_name": "django.core.paginator.Paginator",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return a 1-based range of pages for iterating through within\n        a template for loop.\n        \"\"\"",
            "name": "page_range",
            "namespace": "django.core.paginator.Paginator.page_range",
            "class_name": "django.core.paginator.Paginator",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Warn if self.object_list is unordered (typically a QuerySet).\n        \"\"\"",
            "name": "_check_object_list_is_ordered",
            "namespace": "django.core.paginator.Paginator._check_object_list_is_ordered",
            "class_name": "django.core.paginator.Paginator",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return a 1-based range of pages with some values elided.\n\n        If the page range is larger than a given size, the whole range is not\n        provided and a compact form is returned instead, e.g. for a paginator\n        with 50 pages, if page 43 were the current page, the output, with the\n        default arguments, would be:\n\n            1, 2, \u2026, 40, 41, 42, 43, 44, 45, 46, \u2026, 49, 50.\n        \"\"\"",
            "name": "get_elided_page_range",
            "namespace": "django.core.paginator.Paginator.get_elided_page_range",
            "class_name": "django.core.paginator.Paginator",
            "module_name": "",
            "package_name": ""
        }
    ]
}