{
    "docstring": "\"\"\"A basic HTTP request.\"\"\"",
    "name": "HttpRequest",
    "namespace": "django.http.request.HttpRequest",
    "module_name": "django.http.request",
    "package_name": "",
    "methods": [
        {
            "docstring": "",
            "name": "__init__",
            "namespace": "django.http.request.HttpRequest.__init__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__repr__",
            "namespace": "django.http.request.HttpRequest.__repr__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "headers",
            "namespace": "django.http.request.HttpRequest.headers",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return a list of MediaType instances.\"\"\"",
            "name": "accepted_types",
            "namespace": "django.http.request.HttpRequest.accepted_types",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "accepts",
            "namespace": "django.http.request.HttpRequest.accepts",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Set content_type, content_params, and encoding.\"\"\"",
            "name": "_set_content_type_params",
            "namespace": "django.http.request.HttpRequest._set_content_type_params",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Return the HTTP host using the environment or request headers. Skip\n        allowed hosts protection, so may return an insecure host.\n        \"\"\"",
            "name": "_get_raw_host",
            "namespace": "django.http.request.HttpRequest._get_raw_host",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return the HTTP host using the environment or request headers.\"\"\"",
            "name": "get_host",
            "namespace": "django.http.request.HttpRequest.get_host",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return the port number for the request as a string.\"\"\"",
            "name": "get_port",
            "namespace": "django.http.request.HttpRequest.get_port",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "get_full_path",
            "namespace": "django.http.request.HttpRequest.get_full_path",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "get_full_path_info",
            "namespace": "django.http.request.HttpRequest.get_full_path_info",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "_get_full_path",
            "namespace": "django.http.request.HttpRequest._get_full_path",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Attempt to return a signed cookie. If the signature fails or the\n        cookie has expired, raise an exception, unless the `default` argument\n        is provided,  in which case return that value.\n        \"\"\"",
            "name": "get_signed_cookie",
            "namespace": "django.http.request.HttpRequest.get_signed_cookie",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Build an absolute URI from the location and the variables available in\n        this request. If no ``location`` is specified, build the absolute URI\n        using request.get_full_path(). If the location is absolute, convert it\n        to an RFC 3987 compliant URI and return it. If location is relative or\n        is scheme-relative (i.e., ``//example.com/``), urljoin() it to a base\n        URL constructed from the request variables.\n        \"\"\"",
            "name": "build_absolute_uri",
            "namespace": "django.http.request.HttpRequest.build_absolute_uri",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "_current_scheme_host",
            "namespace": "django.http.request.HttpRequest._current_scheme_host",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Hook for subclasses like WSGIRequest to implement. Return 'http' by\n        default.\n        \"\"\"",
            "name": "_get_scheme",
            "namespace": "django.http.request.HttpRequest._get_scheme",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "scheme",
            "namespace": "django.http.request.HttpRequest.scheme",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "is_secure",
            "namespace": "django.http.request.HttpRequest.is_secure",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "encoding",
            "namespace": "django.http.request.HttpRequest.encoding",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Set the encoding used for GET/POST accesses. If the GET or POST\n        dictionary has already been created, remove and recreate it on the\n        next access (so that it is decoded correctly).\n        \"\"\"",
            "name": "encoding",
            "namespace": "django.http.request.HttpRequest.encoding",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "_initialize_handlers",
            "namespace": "django.http.request.HttpRequest._initialize_handlers",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "upload_handlers",
            "namespace": "django.http.request.HttpRequest.upload_handlers",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "upload_handlers",
            "namespace": "django.http.request.HttpRequest.upload_handlers",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return a tuple of (POST QueryDict, FILES MultiValueDict).\"\"\"",
            "name": "parse_file_upload",
            "namespace": "django.http.request.HttpRequest.parse_file_upload",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "body",
            "namespace": "django.http.request.HttpRequest.body",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "_mark_post_parse_error",
            "namespace": "django.http.request.HttpRequest._mark_post_parse_error",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Populate self._post and self._files if the content-type is a form type\"\"\"",
            "name": "_load_post_and_files",
            "namespace": "django.http.request.HttpRequest._load_post_and_files",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "close",
            "namespace": "django.http.request.HttpRequest.close",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "read",
            "namespace": "django.http.request.HttpRequest.read",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "readline",
            "namespace": "django.http.request.HttpRequest.readline",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__iter__",
            "namespace": "django.http.request.HttpRequest.__iter__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "readlines",
            "namespace": "django.http.request.HttpRequest.readlines",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        }
    ]
}