{
    "docstring": "\"\"\"\n    Decorator that converts a method with a single self argument into a\n    property cached on the instance.\n\n    A cached property can be made out of an existing method:\n    (e.g. ``url = cached_property(get_absolute_url)``).\n    The optional ``name`` argument is obsolete as of Python 3.6 and will be\n    deprecated in Django 4.0 (#30127).\n    \"\"\"",
    "name": "cached_property",
    "namespace": "django.utils.functional.cached_property",
    "module_name": "django.utils.functional",
    "package_name": "",
    "methods": [
        {
            "docstring": "",
            "name": "func",
            "namespace": "django.utils.functional.cached_property.func",
            "class_name": "django.utils.functional.cached_property",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__init__",
            "namespace": "django.utils.functional.cached_property.__init__",
            "class_name": "django.utils.functional.cached_property",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__set_name__",
            "namespace": "django.utils.functional.cached_property.__set_name__",
            "class_name": "django.utils.functional.cached_property",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Call the function and put the return value in instance.__dict__ so that\n        subsequent attribute access on the instance returns the cached value\n        instead of calling cached_property.__get__().\n        \"\"\"",
            "name": "__get__",
            "namespace": "django.utils.functional.cached_property.__get__",
            "class_name": "django.utils.functional.cached_property",
            "module_name": "",
            "package_name": ""
        }
    ]
}