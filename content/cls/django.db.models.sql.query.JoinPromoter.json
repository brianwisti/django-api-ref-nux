{
    "docstring": "\"\"\"\n    A class to abstract away join promotion problems for complex filter\n    conditions.\n    \"\"\"",
    "name": "JoinPromoter",
    "namespace": "django.db.models.sql.query.JoinPromoter",
    "module_name": "django.db.models.sql.query",
    "package_name": "",
    "methods": [
        {
            "docstring": "",
            "name": "__init__",
            "namespace": "django.db.models.sql.query.JoinPromoter.__init__",
            "class_name": "django.db.models.sql.query.JoinPromoter",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Add single vote per item to self.votes. Parameter can be any\n        iterable.\n        \"\"\"",
            "name": "add_votes",
            "namespace": "django.db.models.sql.query.JoinPromoter.add_votes",
            "class_name": "django.db.models.sql.query.JoinPromoter",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Change join types so that the generated query is as efficient as\n        possible, but still correct. So, change as many joins as possible\n        to INNER, but don't make OUTER joins INNER if that could remove\n        results from the query.\n        \"\"\"",
            "name": "update_join_types",
            "namespace": "django.db.models.sql.query.JoinPromoter.update_join_types",
            "class_name": "django.db.models.sql.query.JoinPromoter",
            "module_name": "",
            "package_name": ""
        }
    ]
}