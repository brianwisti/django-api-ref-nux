{
    "docstring": "\"\"\"\n    A thin wrapper around MySQLdb's normal cursor class that catches particular\n    exception instances and reraises them with the correct types.\n\n    Implemented as a wrapper, rather than a subclass, so that it isn't stuck\n    to the particular underlying representation returned by Connection.cursor().\n    \"\"\"",
    "name": "CursorWrapper",
    "namespace": "django.db.backends.mysql.base.CursorWrapper",
    "module_name": "django.db.backends.mysql.base",
    "package_name": "",
    "methods": [
        {
            "docstring": "",
            "name": "__init__",
            "namespace": "django.db.backends.mysql.base.CursorWrapper.__init__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "execute",
            "namespace": "django.db.backends.mysql.base.CursorWrapper.execute",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "executemany",
            "namespace": "django.db.backends.mysql.base.CursorWrapper.executemany",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__getattr__",
            "namespace": "django.db.backends.mysql.base.CursorWrapper.__getattr__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "__iter__",
            "namespace": "django.db.backends.mysql.base.CursorWrapper.__iter__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        }
    ]
}