{
    "docstring": "\"\"\"\n    Encapsulate the logic of the django-admin and manage.py utilities.\n    \"\"\"",
    "name": "ManagementUtility",
    "namespace": "django.core.management.ManagementUtility",
    "module_name": "django.core.management",
    "package_name": "django.core.management",
    "methods": [
        {
            "docstring": "",
            "name": "__init__",
            "namespace": "django.core.management.ManagementUtility.__init__",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return the script's main help text, as a string.\"\"\"",
            "name": "main_help_text",
            "namespace": "django.core.management.ManagementUtility.main_help_text",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Try to fetch the given subcommand, printing a message with the\n        appropriate command called from the command line (usually\n        \"django-admin\" or \"manage.py\") if it can't be found.\n        \"\"\"",
            "name": "fetch_command",
            "namespace": "django.core.management.ManagementUtility.fetch_command",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Output completion suggestions for BASH.\n\n        The output of this function is passed to BASH's `COMREPLY` variable and\n        treated as completion suggestions. `COMREPLY` expects a space\n        separated string as the result.\n\n        The `COMP_WORDS` and `COMP_CWORD` BASH environment variables are used\n        to get information about the cli input. Please refer to the BASH\n        man-page for more information about this variables.\n\n        Subcommand options are saved as pairs. A pair consists of\n        the long option string (e.g. '--exclude') and a boolean\n        value indicating if the option requires arguments. When printing to\n        stdout, an equal sign is appended to options which require arguments.\n\n        Note: If debugging this function, it is recommended to write the debug\n        output in a separate file. Otherwise the debug output will be treated\n        and formatted as potential completion suggestions.\n        \"\"\"",
            "name": "autocomplete",
            "namespace": "django.core.management.ManagementUtility.autocomplete",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n        Given the command-line arguments, figure out which subcommand is being\n        run, create a parser appropriate to that command, and run it.\n        \"\"\"",
            "name": "execute",
            "namespace": "django.core.management.ManagementUtility.execute",
            "class_name": "",
            "module_name": "",
            "package_name": ""
        }
    ]
}