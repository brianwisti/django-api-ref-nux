{
    "name": "django.core.files",
    "docstring": "",
    "package_name": "django.core",
    "classes": [],
    "modules": [
        {
            "namespace": "django.core.files.locks",
            "docstring": "\"\"\"\nPortable file locking utilities.\n\nBased partially on an example by Jonathan Feignberg in the Python\nCookbook [1] (licensed under the Python Software License) and a ctypes port by\nAnatoly Techtonik for Roundup [2] (license [3]).\n\n[1] http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/65203\n[2] https://sourceforge.net/p/roundup/code/ci/default/tree/roundup/backends/portalocker.py\n[3] https://sourceforge.net/p/roundup/code/ci/default/tree/COPYING.txt\n\nExample Usage::\n\n    >>> from django.core.files import locks\n    >>> with open('./file', 'wb') as f:\n    ...     locks.lock(f, locks.LOCK_EX)\n    ...     f.write('Django')\n\"\"\"",
            "package_name": "django.core.files"
        },
        {
            "namespace": "django.core.files.uploadhandler",
            "docstring": "\"\"\"\nBase file upload handler classes, and the built-in concrete subclasses\n\"\"\"",
            "package_name": "django.core.files"
        },
        {
            "namespace": "django.core.files.utils",
            "docstring": "",
            "package_name": "django.core.files"
        },
        {
            "namespace": "django.core.files.uploadedfile",
            "docstring": "\"\"\"\nClasses representing uploaded files.\n\"\"\"",
            "package_name": "django.core.files"
        },
        {
            "namespace": "django.core.files.temp",
            "docstring": "\"\"\"\nThe temp module provides a NamedTemporaryFile that can be reopened in the same\nprocess on any platform. Most platforms use the standard Python\ntempfile.NamedTemporaryFile class, but Windows users are given a custom class.\n\nThis is needed because the Python implementation of NamedTemporaryFile uses the\nO_TEMPORARY flag under Windows, which prevents the file from being reopened\nif the same flag is not provided [1][2]. Note that this does not address the\nmore general issue of opening a file for writing and reading in multiple\nprocesses in a manner that works across platforms.\n\nThe custom version of NamedTemporaryFile doesn't support the same keyword\narguments available in tempfile.NamedTemporaryFile.\n\n1: https://mail.python.org/pipermail/python-list/2005-December/336957.html\n2: https://bugs.python.org/issue14243\n\"\"\"",
            "package_name": "django.core.files"
        },
        {
            "namespace": "django.core.files.storage",
            "docstring": "",
            "package_name": "django.core.files"
        },
        {
            "namespace": "django.core.files.images",
            "docstring": "\"\"\"\nUtility functions for handling images.\n\nRequires Pillow as you might imagine.\n\"\"\"",
            "package_name": "django.core.files"
        },
        {
            "namespace": "django.core.files.move",
            "docstring": "\"\"\"\nMove a file in the safest way possible::\n\n    >>> from django.core.files.move import file_move_safe\n    >>> file_move_safe(\"/tmp/old_file\", \"/tmp/new_file\")\n\"\"\"",
            "package_name": "django.core.files"
        },
        {
            "namespace": "django.core.files.base",
            "docstring": "",
            "package_name": "django.core.files"
        }
    ],
    "subpackages": []
}