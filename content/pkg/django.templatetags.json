{
    "name": "django.templatetags",
    "docstring": "",
    "package_name": "django",
    "functions": [],
    "classes": [],
    "modules": [
        {
            "namespace": "django.templatetags.l10n",
            "docstring": "",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Force a value to be rendered as a localized value,\n    regardless of the value of ``settings.USE_L10N``.\n    \"\"\"",
                    "name": "localize",
                    "namespace": "django.templatetags.l10n.localize",
                    "class_name": "",
                    "module_name": "django.templatetags.l10n",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Force a value to be rendered as a non-localized value,\n    regardless of the value of ``settings.USE_L10N``.\n    \"\"\"",
                    "name": "unlocalize",
                    "namespace": "django.templatetags.l10n.unlocalize",
                    "class_name": "",
                    "module_name": "django.templatetags.l10n",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Force or prevents localization of values, regardless of the value of\n    `settings.USE_L10N`.\n\n    Sample usage::\n\n        {% localize off %}\n            var pi = {{ 3.1415 }};\n        {% endlocalize %}\n    \"\"\"",
                    "name": "localize_tag",
                    "namespace": "django.templatetags.l10n.localize_tag",
                    "class_name": "",
                    "module_name": "django.templatetags.l10n",
                    "package_name": ""
                }
            ],
            "package_name": "django.templatetags"
        },
        {
            "namespace": "django.templatetags.tz",
            "docstring": "",
            "functions": [
                {
                    "docstring": "",
                    "name": "timezone_constructor",
                    "namespace": "django.templatetags.tz.timezone_constructor",
                    "class_name": "",
                    "module_name": "django.templatetags.tz",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Convert a datetime to local time in the active time zone.\n\n    This only makes sense within a {% localtime off %} block.\n    \"\"\"",
                    "name": "localtime",
                    "namespace": "django.templatetags.tz.localtime",
                    "class_name": "",
                    "module_name": "django.templatetags.tz",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Convert a datetime to UTC.\n    \"\"\"",
                    "name": "utc",
                    "namespace": "django.templatetags.tz.utc",
                    "class_name": "",
                    "module_name": "django.templatetags.tz",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Convert a datetime to local time in a given time zone.\n\n    The argument must be an instance of a tzinfo subclass or a time zone name.\n\n    Naive datetimes are assumed to be in local time in the default time zone.\n    \"\"\"",
                    "name": "do_timezone",
                    "namespace": "django.templatetags.tz.do_timezone",
                    "class_name": "",
                    "module_name": "django.templatetags.tz",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Force or prevent conversion of datetime objects to local time,\n    regardless of the value of ``settings.USE_TZ``.\n\n    Sample usage::\n\n        {% localtime off %}{{ value_in_utc }}{% endlocaltime %}\n    \"\"\"",
                    "name": "localtime_tag",
                    "namespace": "django.templatetags.tz.localtime_tag",
                    "class_name": "",
                    "module_name": "django.templatetags.tz",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Enable a given time zone just for this block.\n\n    The ``timezone`` argument must be an instance of a ``tzinfo`` subclass, a\n    time zone name, or ``None``. If it is ``None``, the default time zone is\n    used within the block.\n\n    Sample usage::\n\n        {% timezone \"Europe/Paris\" %}\n            It is {{ now }} in Paris.\n        {% endtimezone %}\n    \"\"\"",
                    "name": "timezone_tag",
                    "namespace": "django.templatetags.tz.timezone_tag",
                    "class_name": "",
                    "module_name": "django.templatetags.tz",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Store the name of the current time zone in the context.\n\n    Usage::\n\n        {% get_current_timezone as TIME_ZONE %}\n\n    This will fetch the currently active time zone and put its name\n    into the ``TIME_ZONE`` context variable.\n    \"\"\"",
                    "name": "get_current_timezone_tag",
                    "namespace": "django.templatetags.tz.get_current_timezone_tag",
                    "class_name": "",
                    "module_name": "django.templatetags.tz",
                    "package_name": ""
                }
            ],
            "package_name": "django.templatetags"
        },
        {
            "namespace": "django.templatetags.cache",
            "docstring": "",
            "functions": [
                {
                    "docstring": "\"\"\"\n    This will cache the contents of a template fragment for a given amount\n    of time.\n\n    Usage::\n\n        {% load cache %}\n        {% cache [expire_time] [fragment_name] %}\n            .. some expensive processing ..\n        {% endcache %}\n\n    This tag also supports varying by a list of arguments::\n\n        {% load cache %}\n        {% cache [expire_time] [fragment_name] [var1] [var2] .. %}\n            .. some expensive processing ..\n        {% endcache %}\n\n    Optionally the cache to use may be specified thus::\n\n        {% cache ....  using=\"cachename\" %}\n\n    Each unique set of arguments will result in a unique cache entry.\n    \"\"\"",
                    "name": "do_cache",
                    "namespace": "django.templatetags.cache.do_cache",
                    "class_name": "",
                    "module_name": "django.templatetags.cache",
                    "package_name": ""
                }
            ],
            "package_name": "django.templatetags"
        },
        {
            "namespace": "django.templatetags.static",
            "docstring": "",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Populate a template variable with the static prefix,\n    ``settings.STATIC_URL``.\n\n    Usage::\n\n        {% get_static_prefix [as varname] %}\n\n    Examples::\n\n        {% get_static_prefix %}\n        {% get_static_prefix as static_prefix %}\n    \"\"\"",
                    "name": "get_static_prefix",
                    "namespace": "django.templatetags.static.get_static_prefix",
                    "class_name": "",
                    "module_name": "django.templatetags.static",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Populate a template variable with the media prefix,\n    ``settings.MEDIA_URL``.\n\n    Usage::\n\n        {% get_media_prefix [as varname] %}\n\n    Examples::\n\n        {% get_media_prefix %}\n        {% get_media_prefix as media_prefix %}\n    \"\"\"",
                    "name": "get_media_prefix",
                    "namespace": "django.templatetags.static.get_media_prefix",
                    "class_name": "",
                    "module_name": "django.templatetags.static",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Join the given path with the STATIC_URL setting.\n\n    Usage::\n\n        {% static path [as varname] %}\n\n    Examples::\n\n        {% static \"myapp/css/base.css\" %}\n        {% static variable_with_path %}\n        {% static \"myapp/css/base.css\" as admin_base_css %}\n        {% static variable_with_path as varname %}\n    \"\"\"",
                    "name": "do_static",
                    "namespace": "django.templatetags.static.do_static",
                    "class_name": "",
                    "module_name": "django.templatetags.static",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Given a relative path to a static asset, return the absolute path to the\n    asset.\n    \"\"\"",
                    "name": "static",
                    "namespace": "django.templatetags.static.static",
                    "class_name": "",
                    "module_name": "django.templatetags.static",
                    "package_name": ""
                }
            ],
            "package_name": "django.templatetags"
        },
        {
            "namespace": "django.templatetags.i18n",
            "docstring": "",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Store a list of available languages in the context.\n\n    Usage::\n\n        {% get_available_languages as languages %}\n        {% for language in languages %}\n        ...\n        {% endfor %}\n\n    This puts settings.LANGUAGES into the named variable.\n    \"\"\"",
                    "name": "do_get_available_languages",
                    "namespace": "django.templatetags.i18n.do_get_available_languages",
                    "class_name": "",
                    "module_name": "django.templatetags.i18n",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Store the language information dictionary for the given language code in a\n    context variable.\n\n    Usage::\n\n        {% get_language_info for LANGUAGE_CODE as l %}\n        {{ l.code }}\n        {{ l.name }}\n        {{ l.name_translated }}\n        {{ l.name_local }}\n        {{ l.bidi|yesno:\"bi-directional,uni-directional\" }}\n    \"\"\"",
                    "name": "do_get_language_info",
                    "namespace": "django.templatetags.i18n.do_get_language_info",
                    "class_name": "",
                    "module_name": "django.templatetags.i18n",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Store a list of language information dictionaries for the given language\n    codes in a context variable. The language codes can be specified either as\n    a list of strings or a settings.LANGUAGES style list (or any sequence of\n    sequences whose first items are language codes).\n\n    Usage::\n\n        {% get_language_info_list for LANGUAGES as langs %}\n        {% for l in langs %}\n          {{ l.code }}\n          {{ l.name }}\n          {{ l.name_translated }}\n          {{ l.name_local }}\n          {{ l.bidi|yesno:\"bi-directional,uni-directional\" }}\n        {% endfor %}\n    \"\"\"",
                    "name": "do_get_language_info_list",
                    "namespace": "django.templatetags.i18n.do_get_language_info_list",
                    "class_name": "",
                    "module_name": "django.templatetags.i18n",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "language_name",
                    "namespace": "django.templatetags.i18n.language_name",
                    "class_name": "",
                    "module_name": "django.templatetags.i18n",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "language_name_translated",
                    "namespace": "django.templatetags.i18n.language_name_translated",
                    "class_name": "",
                    "module_name": "django.templatetags.i18n",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "language_name_local",
                    "namespace": "django.templatetags.i18n.language_name_local",
                    "class_name": "",
                    "module_name": "django.templatetags.i18n",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "language_bidi",
                    "namespace": "django.templatetags.i18n.language_bidi",
                    "class_name": "",
                    "module_name": "django.templatetags.i18n",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Store the current language in the context.\n\n    Usage::\n\n        {% get_current_language as language %}\n\n    This fetches the currently active language and puts its value into the\n    ``language`` context variable.\n    \"\"\"",
                    "name": "do_get_current_language",
                    "namespace": "django.templatetags.i18n.do_get_current_language",
                    "class_name": "",
                    "module_name": "django.templatetags.i18n",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Store the current language layout in the context.\n\n    Usage::\n\n        {% get_current_language_bidi as bidi %}\n\n    This fetches the currently active language's layout and puts its value into\n    the ``bidi`` context variable. True indicates right-to-left layout,\n    otherwise left-to-right.\n    \"\"\"",
                    "name": "do_get_current_language_bidi",
                    "namespace": "django.templatetags.i18n.do_get_current_language_bidi",
                    "class_name": "",
                    "module_name": "django.templatetags.i18n",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Mark a string for translation and translate the string for the current\n    language.\n\n    Usage::\n\n        {% translate \"this is a test\" %}\n\n    This marks the string for translation so it will be pulled out by\n    makemessages into the .po files and runs the string through the translation\n    engine.\n\n    There is a second form::\n\n        {% translate \"this is a test\" noop %}\n\n    This marks the string for translation, but returns the string unchanged.\n    Use it when you need to store values into forms that should be translated\n    later on.\n\n    You can use variables instead of constant strings\n    to translate stuff you marked somewhere else::\n\n        {% translate variable %}\n\n    This tries to translate the contents of the variable ``variable``. Make\n    sure that the string in there is something that is in the .po file.\n\n    It is possible to store the translated string into a variable::\n\n        {% translate \"this is a test\" as var %}\n        {{ var }}\n\n    Contextual translations are also supported::\n\n        {% translate \"this is a test\" context \"greeting\" %}\n\n    This is equivalent to calling pgettext instead of (u)gettext.\n    \"\"\"",
                    "name": "do_translate",
                    "namespace": "django.templatetags.i18n.do_translate",
                    "class_name": "",
                    "module_name": "django.templatetags.i18n",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Translate a block of text with parameters.\n\n    Usage::\n\n        {% blocktranslate with bar=foo|filter boo=baz|filter %}\n        This is {{ bar }} and {{ boo }}.\n        {% endblocktranslate %}\n\n    Additionally, this supports pluralization::\n\n        {% blocktranslate count count=var|length %}\n        There is {{ count }} object.\n        {% plural %}\n        There are {{ count }} objects.\n        {% endblocktranslate %}\n\n    This is much like ngettext, only in template syntax.\n\n    The \"var as value\" legacy format is still supported::\n\n        {% blocktranslate with foo|filter as bar and baz|filter as boo %}\n        {% blocktranslate count var|length as count %}\n\n    The translated string can be stored in a variable using `asvar`::\n\n        {% blocktranslate with bar=foo|filter boo=baz|filter asvar var %}\n        This is {{ bar }} and {{ boo }}.\n        {% endblocktranslate %}\n        {{ var }}\n\n    Contextual translations are supported::\n\n        {% blocktranslate with bar=foo|filter context \"greeting\" %}\n            This is {{ bar }}.\n        {% endblocktranslate %}\n\n    This is equivalent to calling pgettext/npgettext instead of\n    (u)gettext/(u)ngettext.\n    \"\"\"",
                    "name": "do_block_translate",
                    "namespace": "django.templatetags.i18n.do_block_translate",
                    "class_name": "",
                    "module_name": "django.templatetags.i18n",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Enable the given language just for this block.\n\n    Usage::\n\n        {% language \"de\" %}\n            This is {{ bar }} and {{ boo }}.\n        {% endlanguage %}\n    \"\"\"",
                    "name": "language",
                    "namespace": "django.templatetags.i18n.language",
                    "class_name": "",
                    "module_name": "django.templatetags.i18n",
                    "package_name": ""
                }
            ],
            "package_name": "django.templatetags"
        }
    ],
    "subpackages": []
}