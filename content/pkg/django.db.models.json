{
    "name": "django.db.models",
    "docstring": "",
    "modules": [
        {
            "docstring": "\"\"\"\nConstants used across the ORM in general.\n\"\"\"",
            "namespace": "django.db.models.constants",
            "classes": []
        },
        {
            "docstring": "\"\"\"\nThe main QuerySet implementation. This provides the public API for the ORM.\n\"\"\"",
            "namespace": "django.db.models.query",
            "classes": [
                {
                    "docstring": "",
                    "name": "BaseIterable",
                    "parent_name": "django.db.models.query"
                },
                {
                    "docstring": "\"\"\"Iterable that yields a model instance for each row.\"\"\"",
                    "name": "ModelIterable",
                    "parent_name": "django.db.models.query"
                },
                {
                    "docstring": "\"\"\"\n    Iterable returned by QuerySet.values() that yields a dict for each row.\n    \"\"\"",
                    "name": "ValuesIterable",
                    "parent_name": "django.db.models.query"
                },
                {
                    "docstring": "\"\"\"\n    Iterable returned by QuerySet.values_list(flat=False) that yields a tuple\n    for each row.\n    \"\"\"",
                    "name": "ValuesListIterable",
                    "parent_name": "django.db.models.query"
                },
                {
                    "docstring": "\"\"\"\n    Iterable returned by QuerySet.values_list(named=True) that yields a\n    namedtuple for each row.\n    \"\"\"",
                    "name": "NamedValuesListIterable",
                    "parent_name": "django.db.models.query"
                },
                {
                    "docstring": "\"\"\"\n    Iterable returned by QuerySet.values_list(flat=True) that yields single\n    values.\n    \"\"\"",
                    "name": "FlatValuesListIterable",
                    "parent_name": "django.db.models.query"
                },
                {
                    "docstring": "\"\"\"Represent a lazy database lookup for a set of objects.\"\"\"",
                    "name": "QuerySet",
                    "parent_name": "django.db.models.query"
                },
                {
                    "docstring": "",
                    "name": "InstanceCheckMeta",
                    "parent_name": "django.db.models.query"
                },
                {
                    "docstring": "\"\"\"\n    Marker class to checking if a queryset is empty by .none():\n        isinstance(qs.none(), EmptyQuerySet) -> True\n    \"\"\"",
                    "name": "EmptyQuerySet",
                    "parent_name": "django.db.models.query"
                },
                {
                    "docstring": "\"\"\"\n    Provide an iterator which converts the results of raw SQL queries into\n    annotated model instances.\n    \"\"\"",
                    "name": "RawQuerySet",
                    "parent_name": "django.db.models.query"
                },
                {
                    "docstring": "",
                    "name": "Prefetch",
                    "parent_name": "django.db.models.query"
                },
                {
                    "docstring": "\"\"\"\n    RelatedPopulator is used for select_related() object instantiation.\n\n    The idea is that each select_related() model will be populated by a\n    different RelatedPopulator instance. The RelatedPopulator instances get\n    klass_info and select (computed in SQLCompiler) plus the used db as\n    input for initialization. That data is used to compute which columns\n    to use, how to instantiate the model, and how to populate the links\n    between the objects.\n\n    The actual creation of the objects is done in populate() method. This\n    method gets row and from_obj as input and populates the select_related()\n    model instance.\n    \"\"\"",
                    "name": "RelatedPopulator",
                    "parent_name": "django.db.models.query"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.db.models.base",
            "classes": [
                {
                    "docstring": "",
                    "name": "Deferred",
                    "parent_name": "django.db.models.base"
                },
                {
                    "docstring": "\"\"\"Metaclass for all models.\"\"\"",
                    "name": "ModelBase",
                    "parent_name": "django.db.models.base"
                },
                {
                    "docstring": "",
                    "name": "ModelStateFieldsCacheDescriptor",
                    "parent_name": "django.db.models.base"
                },
                {
                    "docstring": "\"\"\"Store model instance state.\"\"\"",
                    "name": "ModelState",
                    "parent_name": "django.db.models.base"
                },
                {
                    "docstring": "",
                    "name": "Model",
                    "parent_name": "django.db.models.base"
                }
            ]
        },
        {
            "docstring": "\"\"\"\nVarious data structures used in query construction.\n\nFactored out from django.db.models.query to avoid making the main module very\nlarge and/or so that they can be used by other modules without getting into\ncircular import difficulties.\n\"\"\"",
            "namespace": "django.db.models.query_utils",
            "classes": [
                {
                    "docstring": "\"\"\"\n    Encapsulate filters as objects that can then be combined logically (using\n    `&` and `|`).\n    \"\"\"",
                    "name": "Q",
                    "parent_name": "django.db.models.query_utils"
                },
                {
                    "docstring": "\"\"\"\n    A wrapper for a deferred-loading field. When the value is read from this\n    object the first time, the query is executed.\n    \"\"\"",
                    "name": "DeferredAttribute",
                    "parent_name": "django.db.models.query_utils"
                },
                {
                    "docstring": "",
                    "name": "RegisterLookupMixin",
                    "parent_name": "django.db.models.query_utils"
                },
                {
                    "docstring": "\"\"\"Specify custom filtering in the ON clause of SQL joins.\"\"\"",
                    "name": "FilteredRelation",
                    "parent_name": "django.db.models.query_utils"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.db.models.enums",
            "classes": [
                {
                    "docstring": "\"\"\"A metaclass for creating a enum choices.\"\"\"",
                    "name": "ChoicesMeta",
                    "parent_name": "django.db.models.enums"
                },
                {
                    "docstring": "\"\"\"Class for creating enumerated choices.\"\"\"",
                    "name": "Choices",
                    "parent_name": "django.db.models.enums"
                },
                {
                    "docstring": "\"\"\"Class for creating enumerated integer choices.\"\"\"",
                    "name": "IntegerChoices",
                    "parent_name": "django.db.models.enums"
                },
                {
                    "docstring": "\"\"\"Class for creating enumerated string choices.\"\"\"",
                    "name": "TextChoices",
                    "parent_name": "django.db.models.enums"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.db.models.indexes",
            "classes": [
                {
                    "docstring": "",
                    "name": "Index",
                    "parent_name": "django.db.models.indexes"
                },
                {
                    "docstring": "\"\"\"Order and wrap expressions for CREATE INDEX statements.\"\"\"",
                    "name": "IndexExpression",
                    "parent_name": "django.db.models.indexes"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.db.models.expressions",
            "classes": [
                {
                    "docstring": "\"\"\"\n    Some expressions with output_field=DecimalField() must be cast to\n    numeric to be properly filtered.\n    \"\"\"",
                    "name": "SQLiteNumericMixin",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "\"\"\"\n    Provide the ability to combine one or two objects with\n    some connector. For example F('foo') + F('bar').\n    \"\"\"",
                    "name": "Combinable",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "\"\"\"Base class for all query expressions.\"\"\"",
                    "name": "BaseExpression",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "\"\"\"An expression that can be combined with other expressions.\"\"\"",
                    "name": "Expression",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "",
                    "name": "CombinedExpression",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "",
                    "name": "DurationExpression",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "",
                    "name": "TemporalSubtraction",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "\"\"\"An object capable of resolving references to existing query objects.\"\"\"",
                    "name": "F",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "\"\"\"\n    An object that contains a reference to an outer query.\n\n    In this case, the reference to the outer query has been resolved because\n    the inner query has been used as a subquery.\n    \"\"\"",
                    "name": "ResolvedOuterRef",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "",
                    "name": "OuterRef",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "\"\"\"An SQL function call.\"\"\"",
                    "name": "Func",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "\"\"\"Represent a wrapped value as a node within an expression.\"\"\"",
                    "name": "Value",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "",
                    "name": "RawSQL",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "",
                    "name": "Star",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "",
                    "name": "Col",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "\"\"\"\n    Reference to column alias of the query. For example, Ref('sum_cost') in\n    qs.annotate(sum_cost=Sum('cost')) query.\n    \"\"\"",
                    "name": "Ref",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "\"\"\"\n    An expression containing multiple expressions. Can be used to provide a\n    list of expressions as an argument to another expression, like an\n    ordering clause.\n    \"\"\"",
                    "name": "ExpressionList",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "\"\"\"\n    An expression that can wrap another expression so that it can provide\n    extra context to the inner expression, such as the output_field.\n    \"\"\"",
                    "name": "ExpressionWrapper",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "",
                    "name": "When",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "\"\"\"\n    An SQL searched CASE expression:\n\n        CASE\n            WHEN n > 0\n                THEN 'positive'\n            WHEN n < 0\n                THEN 'negative'\n            ELSE 'zero'\n        END\n    \"\"\"",
                    "name": "Case",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "\"\"\"\n    An explicit subquery. It may contain OuterRef() references to the outer\n    query which will be resolved when it is applied to that query.\n    \"\"\"",
                    "name": "Subquery",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "",
                    "name": "Exists",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "",
                    "name": "OrderBy",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "",
                    "name": "Window",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "\"\"\"\n    Model the frame clause in window expressions. There are two types of frame\n    clauses which are subclasses, however, all processing and validation (by no\n    means intended to be complete) is done here. Thus, providing an end for a\n    frame is optional (the default is UNBOUNDED FOLLOWING, which is the last\n    row in the frame).\n    \"\"\"",
                    "name": "WindowFrame",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "",
                    "name": "RowRange",
                    "parent_name": "django.db.models.expressions"
                },
                {
                    "docstring": "",
                    "name": "ValueRange",
                    "parent_name": "django.db.models.expressions"
                }
            ]
        },
        {
            "docstring": "\"\"\"\nClasses to represent the definitions of aggregate functions.\n\"\"\"",
            "namespace": "django.db.models.aggregates",
            "classes": [
                {
                    "docstring": "",
                    "name": "Aggregate",
                    "parent_name": "django.db.models.aggregates"
                },
                {
                    "docstring": "",
                    "name": "Avg",
                    "parent_name": "django.db.models.aggregates"
                },
                {
                    "docstring": "",
                    "name": "Count",
                    "parent_name": "django.db.models.aggregates"
                },
                {
                    "docstring": "",
                    "name": "Max",
                    "parent_name": "django.db.models.aggregates"
                },
                {
                    "docstring": "",
                    "name": "Min",
                    "parent_name": "django.db.models.aggregates"
                },
                {
                    "docstring": "",
                    "name": "StdDev",
                    "parent_name": "django.db.models.aggregates"
                },
                {
                    "docstring": "",
                    "name": "Sum",
                    "parent_name": "django.db.models.aggregates"
                },
                {
                    "docstring": "",
                    "name": "Variance",
                    "parent_name": "django.db.models.aggregates"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.db.models.signals",
            "classes": [
                {
                    "docstring": "\"\"\"\n    Signal subclass that allows the sender to be lazily specified as a string\n    of the `app_label.ModelName` form.\n    \"\"\"",
                    "name": "ModelSignal",
                    "parent_name": "django.db.models.signals"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.db.models.deletion",
            "classes": [
                {
                    "docstring": "",
                    "name": "ProtectedError",
                    "parent_name": "django.db.models.deletion"
                },
                {
                    "docstring": "",
                    "name": "RestrictedError",
                    "parent_name": "django.db.models.deletion"
                },
                {
                    "docstring": "",
                    "name": "Collector",
                    "parent_name": "django.db.models.deletion"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.db.models.utils",
            "classes": []
        },
        {
            "docstring": "",
            "namespace": "django.db.models.options",
            "classes": [
                {
                    "docstring": "",
                    "name": "Options",
                    "parent_name": "django.db.models.options"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.db.models.manager",
            "classes": [
                {
                    "docstring": "",
                    "name": "BaseManager",
                    "parent_name": "django.db.models.manager"
                },
                {
                    "docstring": "",
                    "name": "Manager",
                    "parent_name": "django.db.models.manager"
                },
                {
                    "docstring": "",
                    "name": "ManagerDescriptor",
                    "parent_name": "django.db.models.manager"
                },
                {
                    "docstring": "",
                    "name": "EmptyManager",
                    "parent_name": "django.db.models.manager"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.db.models.constraints",
            "classes": [
                {
                    "docstring": "",
                    "name": "BaseConstraint",
                    "parent_name": "django.db.models.constraints"
                },
                {
                    "docstring": "",
                    "name": "CheckConstraint",
                    "parent_name": "django.db.models.constraints"
                },
                {
                    "docstring": "",
                    "name": "Deferrable",
                    "parent_name": "django.db.models.constraints"
                },
                {
                    "docstring": "",
                    "name": "UniqueConstraint",
                    "parent_name": "django.db.models.constraints"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.db.models.lookups",
            "classes": [
                {
                    "docstring": "",
                    "name": "Lookup",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "\"\"\"\n    RegisterLookupMixin() is first so that get_lookup() and get_transform()\n    first examine self and then check output_field.\n    \"\"\"",
                    "name": "Transform",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "BuiltinLookup",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "\"\"\"\n    Some lookups require Field.get_db_prep_value() to be called on their\n    inputs.\n    \"\"\"",
                    "name": "FieldGetDbPrepValueMixin",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "\"\"\"\n    Some lookups require Field.get_db_prep_value() to be called on each value\n    in an iterable.\n    \"\"\"",
                    "name": "FieldGetDbPrepValueIterableMixin",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "\"\"\"Lookup defined by operators on PostgreSQL.\"\"\"",
                    "name": "PostgresOperatorLookup",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "Exact",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "IExact",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "GreaterThan",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "GreaterThanOrEqual",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "LessThan",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "LessThanOrEqual",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "\"\"\"\n    Allow floats to work as query values for IntegerField. Without this, the\n    decimal portion of the float would always be discarded.\n    \"\"\"",
                    "name": "IntegerFieldFloatRounding",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "IntegerGreaterThanOrEqual",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "IntegerLessThan",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "In",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "PatternLookup",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "Contains",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "IContains",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "StartsWith",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "IStartsWith",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "EndsWith",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "IEndsWith",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "Range",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "IsNull",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "Regex",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "IRegex",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "YearLookup",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "YearExact",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "YearGt",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "YearGte",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "YearLt",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "YearLte",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "\"\"\"\n    Strip hyphens from a value when filtering a UUIDField on backends without\n    a native datatype for UUID.\n    \"\"\"",
                    "name": "UUIDTextMixin",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "UUIDIExact",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "UUIDContains",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "UUIDIContains",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "UUIDStartsWith",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "UUIDIStartsWith",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "UUIDEndsWith",
                    "parent_name": "django.db.models.lookups"
                },
                {
                    "docstring": "",
                    "name": "UUIDIEndsWith",
                    "parent_name": "django.db.models.lookups"
                }
            ]
        }
    ],
    "subpackages": [
        {
            "name": "django.db.models.fields",
            "docstring": ""
        },
        {
            "name": "django.db.models.functions",
            "docstring": ""
        },
        {
            "name": "django.db.models.sql",
            "docstring": ""
        }
    ]
}