{
    "name": "django.forms",
    "docstring": "\"\"\"\nDjango validation and HTML form handling.\n\"\"\"",
    "package_name": "django",
    "functions": [],
    "classes": [],
    "modules": [
        {
            "namespace": "django.forms.models",
            "docstring": "\"\"\"\nHelper functions for creating Form classes from Django models\nand database field objects.\n\"\"\"",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Construct and return a model instance from the bound ``form``'s\n    ``cleaned_data``, but do not save the returned instance to the database.\n    \"\"\"",
                    "name": "construct_instance",
                    "namespace": "django.forms.models.construct_instance",
                    "class_name": "",
                    "module_name": "django.forms.models",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Return a dict containing the data in ``instance`` suitable for passing as\n    a Form's ``initial`` keyword argument.\n\n    ``fields`` is an optional list of field names. If provided, return only the\n    named.\n\n    ``exclude`` is an optional list of field names. If provided, exclude the\n    named from the returned dict, even if they are listed in the ``fields``\n    argument.\n    \"\"\"",
                    "name": "model_to_dict",
                    "namespace": "django.forms.models.model_to_dict",
                    "class_name": "",
                    "module_name": "django.forms.models",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Apply limit_choices_to to the formfield's queryset if needed.\"\"\"",
                    "name": "apply_limit_choices_to_to_formfield",
                    "namespace": "django.forms.models.apply_limit_choices_to_to_formfield",
                    "class_name": "",
                    "module_name": "django.forms.models",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Return a dictionary containing form fields for the given model.\n\n    ``fields`` is an optional list of field names. If provided, return only the\n    named fields.\n\n    ``exclude`` is an optional list of field names. If provided, exclude the\n    named fields from the returned fields, even if they are listed in the\n    ``fields`` argument.\n\n    ``widgets`` is a dictionary of model field names mapped to a widget.\n\n    ``formfield_callback`` is a callable that takes a model field and returns\n    a form field.\n\n    ``localized_fields`` is a list of names of fields which should be localized.\n\n    ``labels`` is a dictionary of model field names mapped to a label.\n\n    ``help_texts`` is a dictionary of model field names mapped to a help text.\n\n    ``error_messages`` is a dictionary of model field names mapped to a\n    dictionary of error messages.\n\n    ``field_classes`` is a dictionary of model field names mapped to a form\n    field class.\n\n    ``apply_limit_choices_to`` is a boolean indicating if limit_choices_to\n    should be applied to a field's queryset.\n    \"\"\"",
                    "name": "fields_for_model",
                    "namespace": "django.forms.models.fields_for_model",
                    "class_name": "",
                    "module_name": "django.forms.models",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Return a ModelForm containing form fields for the given model. You can\n    optionally pass a `form` argument to use as a starting point for\n    constructing the ModelForm.\n\n    ``fields`` is an optional list of field names. If provided, include only\n    the named fields in the returned fields. If omitted or '__all__', use all\n    fields.\n\n    ``exclude`` is an optional list of field names. If provided, exclude the\n    named fields from the returned fields, even if they are listed in the\n    ``fields`` argument.\n\n    ``widgets`` is a dictionary of model field names mapped to a widget.\n\n    ``localized_fields`` is a list of names of fields which should be localized.\n\n    ``formfield_callback`` is a callable that takes a model field and returns\n    a form field.\n\n    ``labels`` is a dictionary of model field names mapped to a label.\n\n    ``help_texts`` is a dictionary of model field names mapped to a help text.\n\n    ``error_messages`` is a dictionary of model field names mapped to a\n    dictionary of error messages.\n\n    ``field_classes`` is a dictionary of model field names mapped to a form\n    field class.\n    \"\"\"",
                    "name": "modelform_factory",
                    "namespace": "django.forms.models.modelform_factory",
                    "class_name": "",
                    "module_name": "django.forms.models",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return a FormSet class for the given Django model class.\"\"\"",
                    "name": "modelformset_factory",
                    "namespace": "django.forms.models.modelformset_factory",
                    "class_name": "",
                    "module_name": "django.forms.models",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Find and return the ForeignKey from model to parent if there is one\n    (return None if can_fail is True and no such field exists). If fk_name is\n    provided, assume it is the name of the ForeignKey field. Unless can_fail is\n    True, raise an exception if there isn't a ForeignKey from model to\n    parent_model.\n    \"\"\"",
                    "name": "_get_foreign_key",
                    "namespace": "django.forms.models._get_foreign_key",
                    "class_name": "",
                    "module_name": "django.forms.models",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Return an ``InlineFormSet`` for the given kwargs.\n\n    ``fk_name`` must be provided if ``model`` has more than one ``ForeignKey``\n    to ``parent_model``.\n    \"\"\"",
                    "name": "inlineformset_factory",
                    "namespace": "django.forms.models.inlineformset_factory",
                    "class_name": "",
                    "module_name": "django.forms.models",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "modelform_defines_fields",
                    "namespace": "django.forms.models.modelform_defines_fields",
                    "class_name": "",
                    "module_name": "django.forms.models",
                    "package_name": ""
                }
            ],
            "package_name": "django.forms"
        },
        {
            "namespace": "django.forms.fields",
            "docstring": "\"\"\"\nField classes.\n\"\"\"",
            "functions": [],
            "package_name": "django.forms"
        },
        {
            "namespace": "django.forms.boundfield",
            "docstring": "",
            "functions": [],
            "package_name": "django.forms"
        },
        {
            "namespace": "django.forms.renderers",
            "docstring": "",
            "functions": [
                {
                    "docstring": "",
                    "name": "get_default_renderer",
                    "namespace": "django.forms.renderers.get_default_renderer",
                    "class_name": "",
                    "module_name": "django.forms.renderers",
                    "package_name": ""
                }
            ],
            "package_name": "django.forms"
        },
        {
            "namespace": "django.forms.widgets",
            "docstring": "\"\"\"\nHTML Widget classes\n\"\"\"",
            "functions": [
                {
                    "docstring": "",
                    "name": "media_property",
                    "namespace": "django.forms.widgets.media_property",
                    "class_name": "",
                    "module_name": "django.forms.widgets",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "boolean_check",
                    "namespace": "django.forms.widgets.boolean_check",
                    "class_name": "",
                    "module_name": "django.forms.widgets",
                    "package_name": ""
                }
            ],
            "package_name": "django.forms"
        },
        {
            "namespace": "django.forms.formsets",
            "docstring": "",
            "functions": [
                {
                    "docstring": "\"\"\"Return a FormSet for the given form class.\"\"\"",
                    "name": "formset_factory",
                    "namespace": "django.forms.formsets.formset_factory",
                    "class_name": "",
                    "module_name": "django.forms.formsets",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Validate every formset and return True if all are valid.\"\"\"",
                    "name": "all_valid",
                    "namespace": "django.forms.formsets.all_valid",
                    "class_name": "",
                    "module_name": "django.forms.formsets",
                    "package_name": ""
                }
            ],
            "package_name": "django.forms"
        },
        {
            "namespace": "django.forms.forms",
            "docstring": "\"\"\"\nForm classes\n\"\"\"",
            "functions": [],
            "package_name": "django.forms"
        },
        {
            "namespace": "django.forms.utils",
            "docstring": "",
            "functions": [
                {
                    "docstring": "\"\"\"Convert 'first_name' to 'First name'.\"\"\"",
                    "name": "pretty_name",
                    "namespace": "django.forms.utils.pretty_name",
                    "class_name": "",
                    "module_name": "django.forms.utils",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Convert a dictionary of attributes to a single string.\n    The returned string will contain a leading space followed by key=\"value\",\n    XML-style pairs. In the case of a boolean value, the key will appear\n    without a value. It is assumed that the keys do not need to be\n    XML-escaped. If the passed dictionary is empty, then return an empty\n    string.\n\n    The result is passed through 'mark_safe' (by way of 'format_html_join').\n    \"\"\"",
                    "name": "flatatt",
                    "namespace": "django.forms.utils.flatatt",
                    "class_name": "",
                    "module_name": "django.forms.utils",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    When time zone support is enabled, convert naive datetimes\n    entered in the current time zone to aware datetimes.\n    \"\"\"",
                    "name": "from_current_timezone",
                    "namespace": "django.forms.utils.from_current_timezone",
                    "class_name": "",
                    "module_name": "django.forms.utils",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    When time zone support is enabled, convert aware datetimes\n    to naive datetimes in the current time zone for display.\n    \"\"\"",
                    "name": "to_current_timezone",
                    "namespace": "django.forms.utils.to_current_timezone",
                    "class_name": "",
                    "module_name": "django.forms.utils",
                    "package_name": ""
                }
            ],
            "package_name": "django.forms"
        }
    ],
    "subpackages": []
}