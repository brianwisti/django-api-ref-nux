{
    "name": "django.forms",
    "docstring": "\"\"\"\nDjango validation and HTML form handling.\n\"\"\"",
    "modules": [
        {
            "docstring": "\"\"\"\nHTML Widget classes\n\"\"\"",
            "namespace": "django.forms.widgets",
            "classes": [
                {
                    "docstring": "",
                    "name": "MediaOrderConflictWarning",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "Media",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "\"\"\"\n    Metaclass for classes that can have media definitions.\n    \"\"\"",
                    "name": "MediaDefiningClass",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "Widget",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "\"\"\"\n    Base class for all <input> widgets.\n    \"\"\"",
                    "name": "Input",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "TextInput",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "NumberInput",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "EmailInput",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "URLInput",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "PasswordInput",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "HiddenInput",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "\"\"\"\n    Handle <input type=\"hidden\"> for fields that have a list\n    of values.\n    \"\"\"",
                    "name": "MultipleHiddenInput",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "FileInput",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "ClearableFileInput",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "Textarea",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "DateTimeBaseInput",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "DateInput",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "DateTimeInput",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "TimeInput",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "CheckboxInput",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "ChoiceWidget",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "Select",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "\"\"\"\n    A Select Widget intended to be used with NullBooleanField.\n    \"\"\"",
                    "name": "NullBooleanSelect",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "SelectMultiple",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "RadioSelect",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "",
                    "name": "CheckboxSelectMultiple",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "\"\"\"\n    A widget that is composed of multiple widgets.\n\n    In addition to the values added by Widget.get_context(), this widget\n    adds a list of subwidgets to the context as widget['subwidgets'].\n    These can be looped over and rendered like normal widgets.\n\n    You'll probably want to use this class with MultiValueField.\n    \"\"\"",
                    "name": "MultiWidget",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "\"\"\"\n    A widget that splits datetime input into two <input type=\"text\"> boxes.\n    \"\"\"",
                    "name": "SplitDateTimeWidget",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "\"\"\"\n    A widget that splits datetime input into two <input type=\"hidden\"> inputs.\n    \"\"\"",
                    "name": "SplitHiddenDateTimeWidget",
                    "parent_name": "django.forms.widgets"
                },
                {
                    "docstring": "\"\"\"\n    A widget that splits date input into three <select> boxes.\n\n    This also serves as an example of a Widget that has more than one HTML\n    element and hence implements value_from_datadict.\n    \"\"\"",
                    "name": "SelectDateWidget",
                    "parent_name": "django.forms.widgets"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.forms.formsets",
            "classes": [
                {
                    "docstring": "\"\"\"\n    Keep track of how many form instances are displayed on the page. If adding\n    new forms via JavaScript, you should increment the count field of this form\n    as well.\n    \"\"\"",
                    "name": "ManagementForm",
                    "parent_name": "django.forms.formsets"
                },
                {
                    "docstring": "\"\"\"\n    A collection of instances of the same Form class.\n    \"\"\"",
                    "name": "BaseFormSet",
                    "parent_name": "django.forms.formsets"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.forms.utils",
            "classes": [
                {
                    "docstring": "",
                    "name": "RenderableMixin",
                    "parent_name": "django.forms.utils"
                },
                {
                    "docstring": "",
                    "name": "RenderableFormMixin",
                    "parent_name": "django.forms.utils"
                },
                {
                    "docstring": "",
                    "name": "RenderableErrorMixin",
                    "parent_name": "django.forms.utils"
                },
                {
                    "docstring": "\"\"\"\n    A collection of errors that knows how to display itself in various formats.\n\n    The dictionary keys are the field names, and the values are the errors.\n    \"\"\"",
                    "name": "ErrorDict",
                    "parent_name": "django.forms.utils"
                },
                {
                    "docstring": "\"\"\"\n    A collection of errors that knows how to display itself in various formats.\n    \"\"\"",
                    "name": "ErrorList",
                    "parent_name": "django.forms.utils"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.forms.renderers",
            "classes": [
                {
                    "docstring": "",
                    "name": "BaseRenderer",
                    "parent_name": "django.forms.renderers"
                },
                {
                    "docstring": "",
                    "name": "EngineMixin",
                    "parent_name": "django.forms.renderers"
                },
                {
                    "docstring": "\"\"\"\n    Load Django templates from the built-in widget templates in\n    django/forms/templates and from apps' 'templates' directory.\n    \"\"\"",
                    "name": "DjangoTemplates",
                    "parent_name": "django.forms.renderers"
                },
                {
                    "docstring": "\"\"\"\n    Load Jinja2 templates from the built-in widget templates in\n    django/forms/jinja2 and from apps' 'jinja2' directory.\n    \"\"\"",
                    "name": "Jinja2",
                    "parent_name": "django.forms.renderers"
                },
                {
                    "docstring": "\"\"\"\n    Load templates using template.loader.get_template() which is configured\n    based on settings.TEMPLATES.\n    \"\"\"",
                    "name": "TemplatesSetting",
                    "parent_name": "django.forms.renderers"
                }
            ]
        },
        {
            "docstring": "\"\"\"\nField classes.\n\"\"\"",
            "namespace": "django.forms.fields",
            "classes": [
                {
                    "docstring": "",
                    "name": "Field",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "CharField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "IntegerField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "FloatField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "DecimalField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "BaseTemporalField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "DateField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "TimeField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "DateTimeFormatsIterator",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "DateTimeField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "DurationField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "RegexField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "EmailField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "FileField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "ImageField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "URLField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "BooleanField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "\"\"\"\n    A field whose valid values are None, True, and False. Clean invalid values\n    to None.\n    \"\"\"",
                    "name": "NullBooleanField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "CallableChoiceIterator",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "ChoiceField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "TypedChoiceField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "MultipleChoiceField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "TypedMultipleChoiceField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "\"\"\"\n    A Field whose clean() method calls multiple Field clean() methods.\n    \"\"\"",
                    "name": "ComboField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "\"\"\"\n    Aggregate the logic of multiple Fields.\n\n    Its clean() method takes a \"decompressed\" list of values, which are then\n    cleaned into a single value according to self.fields. Each value in\n    this list is cleaned by the corresponding field -- the first value is\n    cleaned by the first field, the second value is cleaned by the second\n    field, etc. Once all fields are cleaned, the list of clean values is\n    \"compressed\" into a single value.\n\n    Subclasses should not have to implement clean(). Instead, they must\n    implement compress(), which takes a list of valid values and returns a\n    \"compressed\" version of those values -- a single value.\n\n    You'll probably want to use this with MultiWidget.\n    \"\"\"",
                    "name": "MultiValueField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "FilePathField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "SplitDateTimeField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "GenericIPAddressField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "SlugField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "UUIDField",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "InvalidJSONInput",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "JSONString",
                    "parent_name": "django.forms.fields"
                },
                {
                    "docstring": "",
                    "name": "JSONField",
                    "parent_name": "django.forms.fields"
                }
            ]
        },
        {
            "docstring": "\"\"\"\nForm classes\n\"\"\"",
            "namespace": "django.forms.forms",
            "classes": [
                {
                    "docstring": "\"\"\"Collect Fields declared on the base classes.\"\"\"",
                    "name": "DeclarativeFieldsMetaclass",
                    "parent_name": "django.forms.forms"
                },
                {
                    "docstring": "\"\"\"\n    The main implementation of all the Form logic. Note that this class is\n    different than Form. See the comments by the Form class for more info. Any\n    improvements to the form API should be made to this class, not to the Form\n    class.\n    \"\"\"",
                    "name": "BaseForm",
                    "parent_name": "django.forms.forms"
                },
                {
                    "docstring": "\"A collection of Fields, plus their associated data.\"",
                    "name": "Form",
                    "parent_name": "django.forms.forms"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.forms.boundfield",
            "classes": [
                {
                    "docstring": "\"A Field plus data\"",
                    "name": "BoundField",
                    "parent_name": "django.forms.boundfield"
                },
                {
                    "docstring": "\"\"\"\n    A container class used for iterating over widgets. This is useful for\n    widgets that have choices. For example, the following can be used in a\n    template:\n\n    {% for radio in myform.beatles %}\n      <label for=\"{{ radio.id_for_label }}\">\n        {{ radio.choice_label }}\n        <span class=\"radio\">{{ radio.tag }}</span>\n      </label>\n    {% endfor %}\n    \"\"\"",
                    "name": "BoundWidget",
                    "parent_name": "django.forms.boundfield"
                }
            ]
        },
        {
            "docstring": "\"\"\"\nHelper functions for creating Form classes from Django models\nand database field objects.\n\"\"\"",
            "namespace": "django.forms.models",
            "classes": [
                {
                    "docstring": "",
                    "name": "ModelFormOptions",
                    "parent_name": "django.forms.models"
                },
                {
                    "docstring": "",
                    "name": "ModelFormMetaclass",
                    "parent_name": "django.forms.models"
                },
                {
                    "docstring": "",
                    "name": "BaseModelForm",
                    "parent_name": "django.forms.models"
                },
                {
                    "docstring": "",
                    "name": "ModelForm",
                    "parent_name": "django.forms.models"
                },
                {
                    "docstring": "\"\"\"\n    A ``FormSet`` for editing a queryset and/or adding new objects to it.\n    \"\"\"",
                    "name": "BaseModelFormSet",
                    "parent_name": "django.forms.models"
                },
                {
                    "docstring": "\"\"\"A formset for child objects related to a parent.\"\"\"",
                    "name": "BaseInlineFormSet",
                    "parent_name": "django.forms.models"
                },
                {
                    "docstring": "\"\"\"\n    A basic integer field that deals with validating the given value to a\n    given parent instance in an inline.\n    \"\"\"",
                    "name": "InlineForeignKeyField",
                    "parent_name": "django.forms.models"
                },
                {
                    "docstring": "",
                    "name": "ModelChoiceIteratorValue",
                    "parent_name": "django.forms.models"
                },
                {
                    "docstring": "",
                    "name": "ModelChoiceIterator",
                    "parent_name": "django.forms.models"
                },
                {
                    "docstring": "\"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"",
                    "name": "ModelChoiceField",
                    "parent_name": "django.forms.models"
                },
                {
                    "docstring": "\"\"\"A MultipleChoiceField whose choices are a model QuerySet.\"\"\"",
                    "name": "ModelMultipleChoiceField",
                    "parent_name": "django.forms.models"
                }
            ]
        }
    ],
    "subpackages": []
}