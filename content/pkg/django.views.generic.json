{
    "name": "django.views.generic",
    "docstring": "",
    "package_name": "django.views",
    "functions": [],
    "classes": [
        {
            "docstring": "\"\"\"A problem in a generic view.\"\"\"",
            "name": "GenericViewError",
            "namespace": "django.views.generic.GenericViewError",
            "module_name": "django.views.generic",
            "package_name": "django.views.generic",
            "methods": []
        }
    ],
    "modules": [
        {
            "namespace": "django.views.generic.list",
            "docstring": "",
            "functions": [],
            "package_name": "django.views.generic"
        },
        {
            "namespace": "django.views.generic.edit",
            "docstring": "",
            "functions": [],
            "package_name": "django.views.generic"
        },
        {
            "namespace": "django.views.generic.detail",
            "docstring": "",
            "functions": [],
            "package_name": "django.views.generic"
        },
        {
            "namespace": "django.views.generic.dates",
            "docstring": "",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Get a datetime.date object given a format string and a year, month, and day\n    (only year is mandatory). Raise a 404 for an invalid date.\n    \"\"\"",
                    "name": "_date_from_string",
                    "namespace": "django.views.generic.dates._date_from_string",
                    "class_name": "",
                    "module_name": "django.views.generic.dates",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Get the next or the previous valid date. The idea is to allow links on\n    month/day views to never be 404s by never providing a date that'll be\n    invalid for the given view.\n\n    This is a bit complicated since it handles different intervals of time,\n    hence the coupling to generic_view.\n\n    However in essence the logic comes down to:\n\n        * If allow_empty and allow_future are both true, this is easy: just\n          return the naive result (just the next/previous day/week/month,\n          regardless of object existence.)\n\n        * If allow_empty is true, allow_future is false, and the naive result\n          isn't in the future, then return it; otherwise return None.\n\n        * If allow_empty is false and allow_future is true, return the next\n          date *that contains a valid object*, even if it's in the future. If\n          there are no next objects, return None.\n\n        * If allow_empty is false and allow_future is false, return the next\n          date that contains a valid object. If that date is in the future, or\n          if there are no next objects, return None.\n    \"\"\"",
                    "name": "_get_next_prev",
                    "namespace": "django.views.generic.dates._get_next_prev",
                    "class_name": "",
                    "module_name": "django.views.generic.dates",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the current date in the current time zone.\"\"\"",
                    "name": "timezone_today",
                    "namespace": "django.views.generic.dates.timezone_today",
                    "class_name": "",
                    "module_name": "django.views.generic.dates",
                    "package_name": ""
                }
            ],
            "package_name": "django.views.generic"
        },
        {
            "namespace": "django.views.generic.base",
            "docstring": "",
            "functions": [],
            "package_name": "django.views.generic"
        }
    ],
    "subpackages": []
}