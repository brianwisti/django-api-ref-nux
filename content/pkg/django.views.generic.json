{
    "name": "django.views.generic",
    "docstring": "",
    "modules": [
        {
            "docstring": "",
            "namespace": "django.views.generic.list",
            "classes": [
                {
                    "docstring": "\"\"\"A mixin for views manipulating multiple objects.\"\"\"",
                    "name": "MultipleObjectMixin",
                    "parent_name": "django.views.generic.list"
                },
                {
                    "docstring": "\"\"\"A base view for displaying a list of objects.\"\"\"",
                    "name": "BaseListView",
                    "parent_name": "django.views.generic.list"
                },
                {
                    "docstring": "\"\"\"Mixin for responding with a template and list of objects.\"\"\"",
                    "name": "MultipleObjectTemplateResponseMixin",
                    "parent_name": "django.views.generic.list"
                },
                {
                    "docstring": "\"\"\"\n    Render some list of objects, set by `self.model` or `self.queryset`.\n    `self.queryset` can actually be any iterable of items, not just a queryset.\n    \"\"\"",
                    "name": "ListView",
                    "parent_name": "django.views.generic.list"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.views.generic.base",
            "classes": [
                {
                    "docstring": "\"\"\"\n    A default context mixin that passes the keyword arguments received by\n    get_context_data() as the template context.\n    \"\"\"",
                    "name": "ContextMixin",
                    "parent_name": "django.views.generic.base"
                },
                {
                    "docstring": "\"\"\"\n    Intentionally simple parent class for all views. Only implements\n    dispatch-by-method and simple sanity checking.\n    \"\"\"",
                    "name": "View",
                    "parent_name": "django.views.generic.base"
                },
                {
                    "docstring": "\"\"\"A mixin that can be used to render a template.\"\"\"",
                    "name": "TemplateResponseMixin",
                    "parent_name": "django.views.generic.base"
                },
                {
                    "docstring": "\"\"\"\n    Render a template. Pass keyword arguments from the URLconf to the context.\n    \"\"\"",
                    "name": "TemplateView",
                    "parent_name": "django.views.generic.base"
                },
                {
                    "docstring": "\"\"\"Provide a redirect on any GET request.\"\"\"",
                    "name": "RedirectView",
                    "parent_name": "django.views.generic.base"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.views.generic.dates",
            "classes": [
                {
                    "docstring": "\"\"\"Mixin for views manipulating year-based data.\"\"\"",
                    "name": "YearMixin",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"Mixin for views manipulating month-based data.\"\"\"",
                    "name": "MonthMixin",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"Mixin for views manipulating day-based data.\"\"\"",
                    "name": "DayMixin",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"Mixin for views manipulating week-based data.\"\"\"",
                    "name": "WeekMixin",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"Mixin class for views manipulating date-based data.\"\"\"",
                    "name": "DateMixin",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"Abstract base class for date-based views displaying a list of objects.\"\"\"",
                    "name": "BaseDateListView",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"\n    Base class for archives of date-based items. Requires a response mixin.\n    \"\"\"",
                    "name": "BaseArchiveIndexView",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"Top-level archive of date-based items.\"\"\"",
                    "name": "ArchiveIndexView",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"List of objects published in a given year.\"\"\"",
                    "name": "BaseYearArchiveView",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"List of objects published in a given year.\"\"\"",
                    "name": "YearArchiveView",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"List of objects published in a given month.\"\"\"",
                    "name": "BaseMonthArchiveView",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"List of objects published in a given month.\"\"\"",
                    "name": "MonthArchiveView",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"List of objects published in a given week.\"\"\"",
                    "name": "BaseWeekArchiveView",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"List of objects published in a given week.\"\"\"",
                    "name": "WeekArchiveView",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"List of objects published on a given day.\"\"\"",
                    "name": "BaseDayArchiveView",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"List of objects published on a given day.\"\"\"",
                    "name": "DayArchiveView",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"List of objects published today.\"\"\"",
                    "name": "BaseTodayArchiveView",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"List of objects published today.\"\"\"",
                    "name": "TodayArchiveView",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"\n    Detail view of a single object on a single date; this differs from the\n    standard DetailView by accepting a year/month/day in the URL.\n    \"\"\"",
                    "name": "BaseDateDetailView",
                    "parent_name": "django.views.generic.dates"
                },
                {
                    "docstring": "\"\"\"\n    Detail view of a single object on a single date; this differs from the\n    standard DetailView by accepting a year/month/day in the URL.\n    \"\"\"",
                    "name": "DateDetailView",
                    "parent_name": "django.views.generic.dates"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.views.generic.edit",
            "classes": [
                {
                    "docstring": "\"\"\"Provide a way to show and handle a form in a request.\"\"\"",
                    "name": "FormMixin",
                    "parent_name": "django.views.generic.edit"
                },
                {
                    "docstring": "\"\"\"Provide a way to show and handle a ModelForm in a request.\"\"\"",
                    "name": "ModelFormMixin",
                    "parent_name": "django.views.generic.edit"
                },
                {
                    "docstring": "\"\"\"Render a form on GET and processes it on POST.\"\"\"",
                    "name": "ProcessFormView",
                    "parent_name": "django.views.generic.edit"
                },
                {
                    "docstring": "\"\"\"A base view for displaying a form.\"\"\"",
                    "name": "BaseFormView",
                    "parent_name": "django.views.generic.edit"
                },
                {
                    "docstring": "\"\"\"A view for displaying a form and rendering a template response.\"\"\"",
                    "name": "FormView",
                    "parent_name": "django.views.generic.edit"
                },
                {
                    "docstring": "\"\"\"\n    Base view for creating a new object instance.\n\n    Using this base class requires subclassing to provide a response mixin.\n    \"\"\"",
                    "name": "BaseCreateView",
                    "parent_name": "django.views.generic.edit"
                },
                {
                    "docstring": "\"\"\"\n    View for creating a new object, with a response rendered by a template.\n    \"\"\"",
                    "name": "CreateView",
                    "parent_name": "django.views.generic.edit"
                },
                {
                    "docstring": "\"\"\"\n    Base view for updating an existing object.\n\n    Using this base class requires subclassing to provide a response mixin.\n    \"\"\"",
                    "name": "BaseUpdateView",
                    "parent_name": "django.views.generic.edit"
                },
                {
                    "docstring": "\"\"\"View for updating an object, with a response rendered by a template.\"\"\"",
                    "name": "UpdateView",
                    "parent_name": "django.views.generic.edit"
                },
                {
                    "docstring": "\"\"\"Provide the ability to delete objects.\"\"\"",
                    "name": "DeletionMixin",
                    "parent_name": "django.views.generic.edit"
                },
                {
                    "docstring": "",
                    "name": "DeleteViewCustomDeleteWarning",
                    "parent_name": "django.views.generic.edit"
                },
                {
                    "docstring": "\"\"\"\n    Base view for deleting an object.\n\n    Using this base class requires subclassing to provide a response mixin.\n    \"\"\"",
                    "name": "BaseDeleteView",
                    "parent_name": "django.views.generic.edit"
                },
                {
                    "docstring": "\"\"\"\n    View for deleting an object retrieved with self.get_object(), with a\n    response rendered by a template.\n    \"\"\"",
                    "name": "DeleteView",
                    "parent_name": "django.views.generic.edit"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.views.generic.detail",
            "classes": [
                {
                    "docstring": "\"\"\"\n    Provide the ability to retrieve a single object for further manipulation.\n    \"\"\"",
                    "name": "SingleObjectMixin",
                    "parent_name": "django.views.generic.detail"
                },
                {
                    "docstring": "\"\"\"A base view for displaying a single object.\"\"\"",
                    "name": "BaseDetailView",
                    "parent_name": "django.views.generic.detail"
                },
                {
                    "docstring": "",
                    "name": "SingleObjectTemplateResponseMixin",
                    "parent_name": "django.views.generic.detail"
                },
                {
                    "docstring": "\"\"\"\n    Render a \"detail\" view of an object.\n\n    By default this is a model instance looked up from `self.queryset`, but the\n    view will support display of *any* object by overriding `self.get_object()`.\n    \"\"\"",
                    "name": "DetailView",
                    "parent_name": "django.views.generic.detail"
                }
            ]
        }
    ],
    "subpackages": []
}