{
    "name": "django.contrib.admindocs",
    "docstring": "",
    "package_name": "django.contrib",
    "functions": [],
    "classes": [],
    "modules": [
        {
            "namespace": "django.contrib.admindocs.apps",
            "docstring": "",
            "functions": [],
            "package_name": "django.contrib.admindocs"
        },
        {
            "namespace": "django.contrib.admindocs.utils",
            "docstring": "\"Misc. utility functions/classes for admin documentation generator.\"",
            "functions": [
                {
                    "docstring": "",
                    "name": "get_view_name",
                    "namespace": "django.contrib.admindocs.utils.get_view_name",
                    "class_name": "",
                    "module_name": "django.contrib.admindocs.utils",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Parse out the parts of a docstring.  Return (title, body, metadata).\n    \"\"\"",
                    "name": "parse_docstring",
                    "namespace": "django.contrib.admindocs.utils.parse_docstring",
                    "class_name": "",
                    "module_name": "django.contrib.admindocs.utils",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Convert the string from reST to an XHTML fragment.\n    \"\"\"",
                    "name": "parse_rst",
                    "namespace": "django.contrib.admindocs.utils.parse_rst",
                    "class_name": "",
                    "module_name": "django.contrib.admindocs.utils",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "create_reference_role",
                    "namespace": "django.contrib.admindocs.utils.create_reference_role",
                    "class_name": "",
                    "module_name": "django.contrib.admindocs.utils",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "default_reference_role",
                    "namespace": "django.contrib.admindocs.utils.default_reference_role",
                    "class_name": "",
                    "module_name": "django.contrib.admindocs.utils",
                    "package_name": ""
                },
                {
                    "docstring": "r\"\"\"\n    Find named groups in `pattern` and replace them with the group name. E.g.,\n    1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^<a>/b/(\\w+)$\n    2. ^(?P<a>\\w+)/b/(?P<c>\\w+)/$ ==> ^<a>/b/<c>/$\n    3. ^(?P<a>\\w+)/b/(\\w+) ==> ^<a>/b/(\\w+)\n    4. ^(?P<a>\\w+)/b/(?P<c>\\w+) ==> ^<a>/b/<c>\n    \"\"\"",
                    "name": "replace_named_groups",
                    "namespace": "django.contrib.admindocs.utils.replace_named_groups",
                    "class_name": "",
                    "module_name": "django.contrib.admindocs.utils",
                    "package_name": ""
                },
                {
                    "docstring": "r\"\"\"\n    Find unnamed groups in `pattern` and replace them with '<var>'. E.g.,\n    1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^(?P<a>\\w+)/b/<var>$\n    2. ^(?P<a>\\w+)/b/((x|y)\\w+)$ ==> ^(?P<a>\\w+)/b/<var>$\n    3. ^(?P<a>\\w+)/b/(\\w+) ==> ^(?P<a>\\w+)/b/<var>\n    4. ^(?P<a>\\w+)/b/((x|y)\\w+) ==> ^(?P<a>\\w+)/b/<var>\n    \"\"\"",
                    "name": "replace_unnamed_groups",
                    "namespace": "django.contrib.admindocs.utils.replace_unnamed_groups",
                    "class_name": "",
                    "module_name": "django.contrib.admindocs.utils",
                    "package_name": ""
                }
            ],
            "package_name": "django.contrib.admindocs"
        },
        {
            "namespace": "django.contrib.admindocs.urls",
            "docstring": "",
            "functions": [],
            "package_name": "django.contrib.admindocs"
        },
        {
            "namespace": "django.contrib.admindocs.middleware",
            "docstring": "",
            "functions": [],
            "package_name": "django.contrib.admindocs"
        },
        {
            "namespace": "django.contrib.admindocs.views",
            "docstring": "",
            "functions": [
                {
                    "docstring": "\"\"\"Return a somewhat-helpful data type given a function name\"\"\"",
                    "name": "get_return_data_type",
                    "namespace": "django.contrib.admindocs.views.get_return_data_type",
                    "class_name": "",
                    "module_name": "django.contrib.admindocs.views",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Return the description for a given field type, if it exists. Fields'\n    descriptions can contain format strings, which will be interpolated with\n    the values of field.__dict__ before being output.\n    \"\"\"",
                    "name": "get_readable_field_data_type",
                    "namespace": "django.contrib.admindocs.views.get_readable_field_data_type",
                    "class_name": "",
                    "module_name": "django.contrib.admindocs.views",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Return a list of views from a list of urlpatterns.\n\n    Each object in the returned list is a two-tuple: (view_func, regex)\n    \"\"\"",
                    "name": "extract_views_from_urlpatterns",
                    "namespace": "django.contrib.admindocs.views.extract_views_from_urlpatterns",
                    "class_name": "",
                    "module_name": "django.contrib.admindocs.views",
                    "package_name": ""
                },
                {
                    "docstring": "r\"\"\"\n    Clean up urlpattern regexes into something more readable by humans. For\n    example, turn \"^(?P<sport_slug>\\w+)/athletes/(?P<athlete_slug>\\w+)/$\"\n    into \"/<sport_slug>/athletes/<athlete_slug>/\".\n    \"\"\"",
                    "name": "simplify_regex",
                    "namespace": "django.contrib.admindocs.views.simplify_regex",
                    "class_name": "",
                    "module_name": "django.contrib.admindocs.views",
                    "package_name": ""
                }
            ],
            "package_name": "django.contrib.admindocs"
        }
    ],
    "subpackages": []
}