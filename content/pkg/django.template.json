{
    "name": "django.template",
    "docstring": "\"\"\"\nDjango's support for templates.\n\nThe django.template namespace contains two independent subsystems:\n\n1. Multiple Template Engines: support for pluggable template backends,\n   built-in backends and backend-independent APIs\n2. Django Template Language: Django's own template engine, including its\n   built-in loaders, context processors, tags and filters.\n\nIdeally these subsystems would be implemented in distinct packages. However\nkeeping them together made the implementation of Multiple Template Engines\nless disruptive .\n\nHere's a breakdown of which modules belong to which subsystem.\n\nMultiple Template Engines:\n\n- django.template.backends.*\n- django.template.loader\n- django.template.response\n\nDjango Template Language:\n\n- django.template.base\n- django.template.context\n- django.template.context_processors\n- django.template.loaders.*\n- django.template.debug\n- django.template.defaultfilters\n- django.template.defaulttags\n- django.template.engine\n- django.template.loader_tags\n- django.template.smartif\n\nShared:\n\n- django.template.utils\n\n\"\"\"",
    "modules": [
        {
            "docstring": "",
            "namespace": "django.template.loader",
            "classes": []
        },
        {
            "docstring": "\"\"\"\nThis module contains generic exceptions used by template backends. Although,\ndue to historical reasons, the Django template language also internally uses\nthese exceptions, other exceptions specific to the DTL should not be added\nhere.\n\"\"\"",
            "namespace": "django.template.exceptions",
            "classes": [
                {
                    "docstring": "\"\"\"\n    The exception used when a template does not exist. Optional arguments:\n\n    backend\n        The template backend class used when raising this exception.\n\n    tried\n        A list of sources that were tried when finding the template. This\n        is formatted as a list of tuples containing (origin, status), where\n        origin is an Origin object or duck type and status is a string with the\n        reason the template wasn't found.\n\n    chain\n        A list of intermediate TemplateDoesNotExist exceptions. This is used to\n        encapsulate multiple exceptions when loading templates from multiple\n        engines.\n    \"\"\"",
                    "name": "TemplateDoesNotExist",
                    "parent_name": "django.template.exceptions"
                },
                {
                    "docstring": "\"\"\"\n    The exception used for syntax errors during parsing or rendering.\n    \"\"\"",
                    "name": "TemplateSyntaxError",
                    "parent_name": "django.template.exceptions"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.template.engine",
            "classes": [
                {
                    "docstring": "",
                    "name": "Engine",
                    "parent_name": "django.template.engine"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.template.context",
            "classes": [
                {
                    "docstring": "\"pop() has been called more times than push()\"",
                    "name": "ContextPopException",
                    "parent_name": "django.template.context"
                },
                {
                    "docstring": "",
                    "name": "ContextDict",
                    "parent_name": "django.template.context"
                },
                {
                    "docstring": "",
                    "name": "BaseContext",
                    "parent_name": "django.template.context"
                },
                {
                    "docstring": "\"A stack container for variable context\"",
                    "name": "Context",
                    "parent_name": "django.template.context"
                },
                {
                    "docstring": "\"\"\"\n    A stack container for storing Template state.\n\n    RenderContext simplifies the implementation of template Nodes by providing a\n    safe place to store state between invocations of a node's `render` method.\n\n    The RenderContext also provides scoping rules that are more sensible for\n    'template local' variables. The render context stack is pushed before each\n    template is rendered, creating a fresh scope with nothing in it. Name\n    resolution fails if a variable is not found at the top of the RequestContext\n    stack. Thus, variables are local to a specific template and don't affect the\n    rendering of other templates as they would if they were stored in the normal\n    template context.\n    \"\"\"",
                    "name": "RenderContext",
                    "parent_name": "django.template.context"
                },
                {
                    "docstring": "\"\"\"\n    This subclass of template.Context automatically populates itself using\n    the processors defined in the engine's configuration.\n    Additional processors can be specified as a list of callables\n    using the \"processors\" keyword argument.\n    \"\"\"",
                    "name": "RequestContext",
                    "parent_name": "django.template.context"
                }
            ]
        },
        {
            "docstring": "\"\"\"\nThis is the Django template system.\n\nHow it works:\n\nThe Lexer.tokenize() method converts a template string (i.e., a string\ncontaining markup with custom template tags) to tokens, which can be either\nplain text (TokenType.TEXT), variables (TokenType.VAR), or block statements\n(TokenType.BLOCK).\n\nThe Parser() class takes a list of tokens in its constructor, and its parse()\nmethod returns a compiled template -- which is, under the hood, a list of\nNode objects.\n\nEach Node is responsible for creating some sort of output -- e.g. simple text\n(TextNode), variable values in a given context (VariableNode), results of basic\nlogic (IfNode), results of looping (ForNode), or anything else. The core Node\ntypes are TextNode, VariableNode, IfNode and ForNode, but plugin modules can\ndefine their own custom node types.\n\nEach Node has a render() method, which takes a Context and returns a string of\nthe rendered node. For example, the render() method of a Variable Node returns\nthe variable's value as a string. The render() method of a ForNode returns the\nrendered output of whatever was inside the loop, recursively.\n\nThe Template class is a convenient wrapper that takes care of template\ncompilation and rendering.\n\nUsage:\n\nThe only thing you should ever use directly in this file is the Template class.\nCreate a compiled template object with a template_string, then call render()\nwith a context. In the compilation stage, the TemplateSyntaxError exception\nwill be raised if the template doesn't have proper syntax.\n\nSample code:\n\n>>> from django import template\n>>> s = '<html>{% if test %}<h1>{{ varvalue }}</h1>{% endif %}</html>'\n>>> t = template.Template(s)\n\n(t is now a compiled template, and its render() method can be called multiple\ntimes with multiple contexts)\n\n>>> c = template.Context({'test':True, 'varvalue': 'Hello'})\n>>> t.render(c)\n'<html><h1>Hello</h1></html>'\n>>> c = template.Context({'test':False, 'varvalue': 'Hello'})\n>>> t.render(c)\n'<html></html>'\n\"\"\"",
            "namespace": "django.template.base",
            "classes": [
                {
                    "docstring": "",
                    "name": "TokenType",
                    "parent_name": "django.template.base"
                },
                {
                    "docstring": "",
                    "name": "VariableDoesNotExist",
                    "parent_name": "django.template.base"
                },
                {
                    "docstring": "",
                    "name": "Origin",
                    "parent_name": "django.template.base"
                },
                {
                    "docstring": "",
                    "name": "Template",
                    "parent_name": "django.template.base"
                },
                {
                    "docstring": "",
                    "name": "Token",
                    "parent_name": "django.template.base"
                },
                {
                    "docstring": "",
                    "name": "Lexer",
                    "parent_name": "django.template.base"
                },
                {
                    "docstring": "",
                    "name": "DebugLexer",
                    "parent_name": "django.template.base"
                },
                {
                    "docstring": "",
                    "name": "Parser",
                    "parent_name": "django.template.base"
                },
                {
                    "docstring": "\"\"\"\n    Parse a variable token and its optional filters (all as a single string),\n    and return a list of tuples of the filter name and arguments.\n    Sample::\n\n        >>> token = 'variable|default:\"Default value\"|date:\"Y-m-d\"'\n        >>> p = Parser('')\n        >>> fe = FilterExpression(token, p)\n        >>> len(fe.filters)\n        2\n        >>> fe.var\n        <Variable: 'variable'>\n    \"\"\"",
                    "name": "FilterExpression",
                    "parent_name": "django.template.base"
                },
                {
                    "docstring": "\"\"\"\n    A template variable, resolvable against a given context. The variable may\n    be a hard-coded string (if it begins and ends with single or double quote\n    marks)::\n\n        >>> c = {'article': {'section':'News'}}\n        >>> Variable('article.section').resolve(c)\n        'News'\n        >>> Variable('article').resolve(c)\n        {'section': 'News'}\n        >>> class AClass: pass\n        >>> c = AClass()\n        >>> c.article = AClass()\n        >>> c.article.section = 'News'\n\n    (The example assumes VARIABLE_ATTRIBUTE_SEPARATOR is '.')\n    \"\"\"",
                    "name": "Variable",
                    "parent_name": "django.template.base"
                },
                {
                    "docstring": "",
                    "name": "Node",
                    "parent_name": "django.template.base"
                },
                {
                    "docstring": "",
                    "name": "NodeList",
                    "parent_name": "django.template.base"
                },
                {
                    "docstring": "",
                    "name": "TextNode",
                    "parent_name": "django.template.base"
                },
                {
                    "docstring": "",
                    "name": "VariableNode",
                    "parent_name": "django.template.base"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.template.library",
            "classes": [
                {
                    "docstring": "",
                    "name": "InvalidTemplateLibrary",
                    "parent_name": "django.template.library"
                },
                {
                    "docstring": "\"\"\"\n    A class for registering template tags and filters. Compiled filter and\n    template tag functions are stored in the filters and tags attributes.\n    The filter, simple_tag, and inclusion_tag methods provide a convenient\n    way to register callables as tags.\n    \"\"\"",
                    "name": "Library",
                    "parent_name": "django.template.library"
                },
                {
                    "docstring": "\"\"\"\n    Base class for tag helper nodes such as SimpleNode and InclusionNode.\n    Manages the positional and keyword arguments to be passed to the decorated\n    function.\n    \"\"\"",
                    "name": "TagHelperNode",
                    "parent_name": "django.template.library"
                },
                {
                    "docstring": "",
                    "name": "SimpleNode",
                    "parent_name": "django.template.library"
                },
                {
                    "docstring": "",
                    "name": "InclusionNode",
                    "parent_name": "django.template.library"
                }
            ]
        },
        {
            "docstring": "\"\"\"Default tags used by the template system, available to all templates.\"\"\"",
            "namespace": "django.template.defaulttags",
            "classes": [
                {
                    "docstring": "\"\"\"Implement the actions of the autoescape tag.\"\"\"",
                    "name": "AutoEscapeControlNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "CommentNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "CsrfTokenNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "CycleNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "DebugNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "FilterNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "FirstOfNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "ForNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "IfChangedNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "IfNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "LoremNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "RegroupNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "LoadNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "NowNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "ResetCycleNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "SpacelessNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "TemplateTagNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "URLNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "VerbatimNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "WidthRatioNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "WithNode",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "TemplateLiteral",
                    "parent_name": "django.template.defaulttags"
                },
                {
                    "docstring": "",
                    "name": "TemplateIfParser",
                    "parent_name": "django.template.defaulttags"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.template.response",
            "classes": [
                {
                    "docstring": "",
                    "name": "ContentNotRenderedError",
                    "parent_name": "django.template.response"
                },
                {
                    "docstring": "",
                    "name": "SimpleTemplateResponse",
                    "parent_name": "django.template.response"
                },
                {
                    "docstring": "",
                    "name": "TemplateResponse",
                    "parent_name": "django.template.response"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.template.utils",
            "classes": [
                {
                    "docstring": "",
                    "name": "InvalidTemplateEngineError",
                    "parent_name": "django.template.utils"
                },
                {
                    "docstring": "",
                    "name": "EngineHandler",
                    "parent_name": "django.template.utils"
                }
            ]
        },
        {
            "docstring": "\"\"\"\nParser and utilities for the smart 'if' tag\n\"\"\"",
            "namespace": "django.template.smartif",
            "classes": [
                {
                    "docstring": "\"\"\"\n    Base class for operators and literals, mainly for debugging and for throwing\n    syntax errors.\n    \"\"\"",
                    "name": "TokenBase",
                    "parent_name": "django.template.smartif"
                },
                {
                    "docstring": "\"\"\"\n    A basic self-resolvable object similar to a Django template variable.\n    \"\"\"",
                    "name": "Literal",
                    "parent_name": "django.template.smartif"
                },
                {
                    "docstring": "",
                    "name": "EndToken",
                    "parent_name": "django.template.smartif"
                },
                {
                    "docstring": "",
                    "name": "IfParser",
                    "parent_name": "django.template.smartif"
                }
            ]
        },
        {
            "docstring": "",
            "namespace": "django.template.autoreload",
            "classes": []
        },
        {
            "docstring": "",
            "namespace": "django.template.loader_tags",
            "classes": [
                {
                    "docstring": "",
                    "name": "BlockContext",
                    "parent_name": "django.template.loader_tags"
                },
                {
                    "docstring": "",
                    "name": "BlockNode",
                    "parent_name": "django.template.loader_tags"
                },
                {
                    "docstring": "",
                    "name": "ExtendsNode",
                    "parent_name": "django.template.loader_tags"
                },
                {
                    "docstring": "",
                    "name": "IncludeNode",
                    "parent_name": "django.template.loader_tags"
                }
            ]
        },
        {
            "docstring": "\"\"\"\nA set of request processors that return dictionaries to be merged into a\ntemplate context. Each function takes the request object as its only parameter\nand returns a dictionary to add to the context.\n\nThese are referenced from the 'context_processors' option of the configuration\nof a DjangoTemplates backend and used by RequestContext.\n\"\"\"",
            "namespace": "django.template.context_processors",
            "classes": []
        },
        {
            "docstring": "\"\"\"Default variable filters.\"\"\"",
            "namespace": "django.template.defaultfilters",
            "classes": []
        }
    ],
    "subpackages": [
        {
            "name": "django.template.loaders",
            "docstring": ""
        },
        {
            "name": "django.template.backends",
            "docstring": ""
        }
    ]
}