{
    "name": "django.template",
    "docstring": "\"\"\"\nDjango's support for templates.\n\nThe django.template namespace contains two independent subsystems:\n\n1. Multiple Template Engines: support for pluggable template backends,\n   built-in backends and backend-independent APIs\n2. Django Template Language: Django's own template engine, including its\n   built-in loaders, context processors, tags and filters.\n\nIdeally these subsystems would be implemented in distinct packages. However\nkeeping them together made the implementation of Multiple Template Engines\nless disruptive .\n\nHere's a breakdown of which modules belong to which subsystem.\n\nMultiple Template Engines:\n\n- django.template.backends.*\n- django.template.loader\n- django.template.response\n\nDjango Template Language:\n\n- django.template.base\n- django.template.context\n- django.template.context_processors\n- django.template.loaders.*\n- django.template.debug\n- django.template.defaultfilters\n- django.template.defaulttags\n- django.template.engine\n- django.template.loader_tags\n- django.template.smartif\n\nShared:\n\n- django.template.utils\n\n\"\"\"",
    "package_name": "django",
    "functions": [],
    "classes": [],
    "modules": [
        {
            "namespace": "django.template.library",
            "docstring": "",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Parse bits for template tag helpers simple_tag and inclusion_tag, in\n    particular by detecting syntax errors and by extracting positional and\n    keyword arguments.\n    \"\"\"",
                    "name": "parse_bits",
                    "namespace": "django.template.library.parse_bits",
                    "class_name": "",
                    "module_name": "django.template.library",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Load a Library object from a template tag module.\n    \"\"\"",
                    "name": "import_library",
                    "namespace": "django.template.library.import_library",
                    "class_name": "",
                    "module_name": "django.template.library",
                    "package_name": ""
                }
            ],
            "package_name": "django.template"
        },
        {
            "namespace": "django.template.response",
            "docstring": "",
            "functions": [],
            "package_name": "django.template"
        },
        {
            "namespace": "django.template.smartif",
            "docstring": "\"\"\"\nParser and utilities for the smart 'if' tag\n\"\"\"",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Create an infix operator, given a binding power and a function that\n    evaluates the node.\n    \"\"\"",
                    "name": "infix",
                    "namespace": "django.template.smartif.infix",
                    "class_name": "",
                    "module_name": "django.template.smartif",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Create a prefix operator, given a binding power and a function that\n    evaluates the node.\n    \"\"\"",
                    "name": "prefix",
                    "namespace": "django.template.smartif.prefix",
                    "class_name": "",
                    "module_name": "django.template.smartif",
                    "package_name": ""
                }
            ],
            "package_name": "django.template"
        },
        {
            "namespace": "django.template.context_processors",
            "docstring": "\"\"\"\nA set of request processors that return dictionaries to be merged into a\ntemplate context. Each function takes the request object as its only parameter\nand returns a dictionary to add to the context.\n\nThese are referenced from the 'context_processors' option of the configuration\nof a DjangoTemplates backend and used by RequestContext.\n\"\"\"",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Context processor that provides a CSRF token, or the string 'NOTPROVIDED' if\n    it has not been provided by either a view decorator or the middleware\n    \"\"\"",
                    "name": "csrf",
                    "namespace": "django.template.context_processors.csrf",
                    "class_name": "",
                    "module_name": "django.template.context_processors",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Return context variables helpful for debugging.\n    \"\"\"",
                    "name": "debug",
                    "namespace": "django.template.context_processors.debug",
                    "class_name": "",
                    "module_name": "django.template.context_processors",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "i18n",
                    "namespace": "django.template.context_processors.i18n",
                    "class_name": "",
                    "module_name": "django.template.context_processors",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "tz",
                    "namespace": "django.template.context_processors.tz",
                    "class_name": "",
                    "module_name": "django.template.context_processors",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Add static-related context variables to the context.\n    \"\"\"",
                    "name": "static",
                    "namespace": "django.template.context_processors.static",
                    "class_name": "",
                    "module_name": "django.template.context_processors",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Add media-related context variables to the context.\n    \"\"\"",
                    "name": "media",
                    "namespace": "django.template.context_processors.media",
                    "class_name": "",
                    "module_name": "django.template.context_processors",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "request",
                    "namespace": "django.template.context_processors.request",
                    "class_name": "",
                    "module_name": "django.template.context_processors",
                    "package_name": ""
                }
            ],
            "package_name": "django.template"
        },
        {
            "namespace": "django.template.defaultfilters",
            "docstring": "\"\"\"Default variable filters.\"\"\"",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Decorator for filters which should only receive strings. The object\n    passed as the first positional argument will be converted to a string.\n    \"\"\"",
                    "name": "stringfilter",
                    "namespace": "django.template.defaultfilters.stringfilter",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Add slashes before quotes. Useful for escaping strings in CSV, for\n    example. Less useful for escaping JavaScript; use the ``escapejs``\n    filter instead.\n    \"\"\"",
                    "name": "addslashes",
                    "namespace": "django.template.defaultfilters.addslashes",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Capitalize the first character of the value.\"\"\"",
                    "name": "capfirst",
                    "namespace": "django.template.defaultfilters.capfirst",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Hex encode characters for use in JavaScript strings.\"\"\"",
                    "name": "escapejs_filter",
                    "namespace": "django.template.defaultfilters.escapejs_filter",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag.\n    \"\"\"",
                    "name": "json_script",
                    "namespace": "django.template.defaultfilters.json_script",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Display a float to a specified number of decimal places.\n\n    If called without an argument, display the floating point number with one\n    decimal place -- but only if there's a decimal place to be displayed:\n\n    * num1 = 34.23234\n    * num2 = 34.00000\n    * num3 = 34.26000\n    * {{ num1|floatformat }} displays \"34.2\"\n    * {{ num2|floatformat }} displays \"34\"\n    * {{ num3|floatformat }} displays \"34.3\"\n\n    If arg is positive, always display exactly arg number of decimal places:\n\n    * {{ num1|floatformat:3 }} displays \"34.232\"\n    * {{ num2|floatformat:3 }} displays \"34.000\"\n    * {{ num3|floatformat:3 }} displays \"34.260\"\n\n    If arg is negative, display arg number of decimal places -- but only if\n    there are places to be displayed:\n\n    * {{ num1|floatformat:\"-3\" }} displays \"34.232\"\n    * {{ num2|floatformat:\"-3\" }} displays \"34\"\n    * {{ num3|floatformat:\"-3\" }} displays \"34.260\"\n\n    If arg has the 'g' suffix, force the result to be grouped by the\n    THOUSAND_SEPARATOR for the active locale. When the active locale is\n    en (English):\n\n    * {{ 6666.6666|floatformat:\"2g\" }} displays \"6,666.67\"\n    * {{ 10000|floatformat:\"g\" }} displays \"10,000\"\n\n    If arg has the 'u' suffix, force the result to be unlocalized. When the\n    active locale is pl (Polish):\n\n    * {{ 66666.6666|floatformat:\"2\" }} displays \"66666,67\"\n    * {{ 66666.6666|floatformat:\"2u\" }} displays \"66666.67\"\n\n    If the input float is infinity or NaN, display the string representation\n    of that value.\n    \"\"\"",
                    "name": "floatformat",
                    "namespace": "django.template.defaultfilters.floatformat",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Escape an IRI value for use in a URL.\"\"\"",
                    "name": "iriencode",
                    "namespace": "django.template.defaultfilters.iriencode",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Display text with line numbers.\"\"\"",
                    "name": "linenumbers",
                    "namespace": "django.template.defaultfilters.linenumbers",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Convert a string into all lowercase.\"\"\"",
                    "name": "lower",
                    "namespace": "django.template.defaultfilters.lower",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Return the value turned into a list.\n\n    For an integer, it's a list of digits.\n    For a string, it's a list of characters.\n    \"\"\"",
                    "name": "make_list",
                    "namespace": "django.template.defaultfilters.make_list",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Convert to ASCII. Convert spaces to hyphens. Remove characters that aren't\n    alphanumerics, underscores, or hyphens. Convert to lowercase. Also strip\n    leading and trailing whitespace.\n    \"\"\"",
                    "name": "slugify",
                    "namespace": "django.template.defaultfilters.slugify",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Format the variable according to the arg, a string formatting specifier.\n\n    This specifier uses Python string formatting syntax, with the exception\n    that the leading \"%\" is dropped.\n\n    See https://docs.python.org/library/stdtypes.html#printf-style-string-formatting\n    for documentation of Python string formatting.\n    \"\"\"",
                    "name": "stringformat",
                    "namespace": "django.template.defaultfilters.stringformat",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Convert a string into titlecase.\"\"\"",
                    "name": "title",
                    "namespace": "django.template.defaultfilters.title",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Truncate a string after `arg` number of characters.\"\"\"",
                    "name": "truncatechars",
                    "namespace": "django.template.defaultfilters.truncatechars",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Truncate HTML after `arg` number of chars.\n    Preserve newlines in the HTML.\n    \"\"\"",
                    "name": "truncatechars_html",
                    "namespace": "django.template.defaultfilters.truncatechars_html",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Truncate a string after `arg` number of words.\n    Remove newlines within the string.\n    \"\"\"",
                    "name": "truncatewords",
                    "namespace": "django.template.defaultfilters.truncatewords",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Truncate HTML after `arg` number of words.\n    Preserve newlines in the HTML.\n    \"\"\"",
                    "name": "truncatewords_html",
                    "namespace": "django.template.defaultfilters.truncatewords_html",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Convert a string into all uppercase.\"\"\"",
                    "name": "upper",
                    "namespace": "django.template.defaultfilters.upper",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Escape a value for use in a URL.\n\n    The ``safe`` parameter determines the characters which should not be\n    escaped by Python's quote() function. If not provided, use the default safe\n    characters (but an empty string can be provided when *all* characters\n    should be escaped).\n    \"\"\"",
                    "name": "urlencode",
                    "namespace": "django.template.defaultfilters.urlencode",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Convert URLs in plain text into clickable links.\"\"\"",
                    "name": "urlize",
                    "namespace": "django.template.defaultfilters.urlize",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Convert URLs into clickable links, truncating URLs to the given character\n    limit, and adding 'rel=nofollow' attribute to discourage spamming.\n\n    Argument: Length to truncate URLs to.\n    \"\"\"",
                    "name": "urlizetrunc",
                    "namespace": "django.template.defaultfilters.urlizetrunc",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the number of words.\"\"\"",
                    "name": "wordcount",
                    "namespace": "django.template.defaultfilters.wordcount",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Wrap words at `arg` line length.\"\"\"",
                    "name": "wordwrap",
                    "namespace": "django.template.defaultfilters.wordwrap",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Left-align the value in a field of a given width.\"\"\"",
                    "name": "ljust",
                    "namespace": "django.template.defaultfilters.ljust",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Right-align the value in a field of a given width.\"\"\"",
                    "name": "rjust",
                    "namespace": "django.template.defaultfilters.rjust",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Center the value in a field of a given width.\"\"\"",
                    "name": "center",
                    "namespace": "django.template.defaultfilters.center",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Remove all values of arg from the given string.\"\"\"",
                    "name": "cut",
                    "namespace": "django.template.defaultfilters.cut",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Mark the value as a string that should be auto-escaped.\"\"\"",
                    "name": "escape_filter",
                    "namespace": "django.template.defaultfilters.escape_filter",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Escape a string's HTML. Return a new string containing the escaped\n    characters (as opposed to \"escape\", which marks the content for later\n    possible escaping).\n    \"\"\"",
                    "name": "force_escape",
                    "namespace": "django.template.defaultfilters.force_escape",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Replace line breaks in plain text with appropriate HTML; a single\n    newline becomes an HTML line break (``<br>``) and a new line\n    followed by a blank line becomes a paragraph break (``</p>``).\n    \"\"\"",
                    "name": "linebreaks_filter",
                    "namespace": "django.template.defaultfilters.linebreaks_filter",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Convert all newlines in a piece of plain text to HTML line breaks\n    (``<br>``).\n    \"\"\"",
                    "name": "linebreaksbr",
                    "namespace": "django.template.defaultfilters.linebreaksbr",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Mark the value as a string that should not be auto-escaped.\"\"\"",
                    "name": "safe",
                    "namespace": "django.template.defaultfilters.safe",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    A \"safe\" filter for sequences. Mark each element in the sequence,\n    individually, as safe, after converting them to strings. Return a list\n    with the results.\n    \"\"\"",
                    "name": "safeseq",
                    "namespace": "django.template.defaultfilters.safeseq",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Strip all [X]HTML tags.\"\"\"",
                    "name": "striptags",
                    "namespace": "django.template.defaultfilters.striptags",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    When arg is convertible to float, behave like operator.itemgetter(arg)\n    Otherwise, behave like Variable(arg).resolve\n\n    >>> _property_resolver(1)('abc')\n    'b'\n    >>> _property_resolver('1')('abc')\n    Traceback (most recent call last):\n    ...\n    TypeError: string indices must be integers\n    >>> class Foo:\n    ...     a = 42\n    ...     b = 3.14\n    ...     c = 'Hey!'\n    >>> _property_resolver('b')(Foo())\n    3.14\n    \"\"\"",
                    "name": "_property_resolver",
                    "namespace": "django.template.defaultfilters._property_resolver",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Given a list of dicts, return that list sorted by the property given in\n    the argument.\n    \"\"\"",
                    "name": "dictsort",
                    "namespace": "django.template.defaultfilters.dictsort",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Given a list of dicts, return that list sorted in reverse order by the\n    property given in the argument.\n    \"\"\"",
                    "name": "dictsortreversed",
                    "namespace": "django.template.defaultfilters.dictsortreversed",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the first item in a list.\"\"\"",
                    "name": "first",
                    "namespace": "django.template.defaultfilters.first",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Join a list with a string, like Python's ``str.join(list)``.\"\"\"",
                    "name": "join",
                    "namespace": "django.template.defaultfilters.join",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the last item in a list.\"\"\"",
                    "name": "last",
                    "namespace": "django.template.defaultfilters.last",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the length of the value - useful for lists.\"\"\"",
                    "name": "length",
                    "namespace": "django.template.defaultfilters.length",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return a boolean of whether the value's length is the argument.\"\"\"",
                    "name": "length_is",
                    "namespace": "django.template.defaultfilters.length_is",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return a random item from the list.\"\"\"",
                    "name": "random",
                    "namespace": "django.template.defaultfilters.random",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Return a slice of the list using the same syntax as Python's list slicing.\n    \"\"\"",
                    "name": "slice_filter",
                    "namespace": "django.template.defaultfilters.slice_filter",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Recursively take a self-nested list and return an HTML unordered list --\n    WITHOUT opening and closing <ul> tags.\n\n    Assume the list is in the proper format. For example, if ``var`` contains:\n    ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``, then\n    ``{{ var|unordered_list }}`` returns::\n\n        <li>States\n        <ul>\n                <li>Kansas\n                <ul>\n                        <li>Lawrence</li>\n                        <li>Topeka</li>\n                </ul>\n                </li>\n                <li>Illinois</li>\n        </ul>\n        </li>\n    \"\"\"",
                    "name": "unordered_list",
                    "namespace": "django.template.defaultfilters.unordered_list",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Add the arg to the value.\"\"\"",
                    "name": "add",
                    "namespace": "django.template.defaultfilters.add",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Given a whole number, return the requested digit of it, where 1 is the\n    right-most digit, 2 is the second-right-most digit, etc. Return the\n    original value for invalid input (if input or argument is not an integer,\n    or if argument is less than 1). Otherwise, output is always an integer.\n    \"\"\"",
                    "name": "get_digit",
                    "namespace": "django.template.defaultfilters.get_digit",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Format a date according to the given format.\"\"\"",
                    "name": "date",
                    "namespace": "django.template.defaultfilters.date",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Format a time according to the given format.\"\"\"",
                    "name": "time",
                    "namespace": "django.template.defaultfilters.time",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Format a date as the time since that date (i.e. \"4 days, 6 hours\").\"\"\"",
                    "name": "timesince_filter",
                    "namespace": "django.template.defaultfilters.timesince_filter",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Format a date as the time until that date (i.e. \"4 days, 6 hours\").\"\"\"",
                    "name": "timeuntil_filter",
                    "namespace": "django.template.defaultfilters.timeuntil_filter",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"If value is unavailable, use given default.\"\"\"",
                    "name": "default",
                    "namespace": "django.template.defaultfilters.default",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"If value is None, use given default.\"\"\"",
                    "name": "default_if_none",
                    "namespace": "django.template.defaultfilters.default_if_none",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return True if the value is divisible by the argument.\"\"\"",
                    "name": "divisibleby",
                    "namespace": "django.template.defaultfilters.divisibleby",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Given a string mapping values for true, false, and (optionally) None,\n    return one of those strings according to the value:\n\n    ==========  ======================  ==================================\n    Value       Argument                Outputs\n    ==========  ======================  ==================================\n    ``True``    ``\"yeah,no,maybe\"``     ``yeah``\n    ``False``   ``\"yeah,no,maybe\"``     ``no``\n    ``None``    ``\"yeah,no,maybe\"``     ``maybe``\n    ``None``    ``\"yeah,no\"``           ``\"no\"`` (converts None to False\n                                        if no mapping for None is given.\n    ==========  ======================  ==================================\n    \"\"\"",
                    "name": "yesno",
                    "namespace": "django.template.defaultfilters.yesno",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Format the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB,\n    102 bytes, etc.).\n    \"\"\"",
                    "name": "filesizeformat",
                    "namespace": "django.template.defaultfilters.filesizeformat",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Return a plural suffix if the value is not 1, '1', or an object of\n    length 1. By default, use 's' as the suffix:\n\n    * If value is 0, vote{{ value|pluralize }} display \"votes\".\n    * If value is 1, vote{{ value|pluralize }} display \"vote\".\n    * If value is 2, vote{{ value|pluralize }} display \"votes\".\n\n    If an argument is provided, use that string instead:\n\n    * If value is 0, class{{ value|pluralize:\"es\" }} display \"classes\".\n    * If value is 1, class{{ value|pluralize:\"es\" }} display \"class\".\n    * If value is 2, class{{ value|pluralize:\"es\" }} display \"classes\".\n\n    If the provided argument contains a comma, use the text before the comma\n    for the singular case and the text after the comma for the plural case:\n\n    * If value is 0, cand{{ value|pluralize:\"y,ies\" }} display \"candies\".\n    * If value is 1, cand{{ value|pluralize:\"y,ies\" }} display \"candy\".\n    * If value is 2, cand{{ value|pluralize:\"y,ies\" }} display \"candies\".\n    \"\"\"",
                    "name": "pluralize",
                    "namespace": "django.template.defaultfilters.pluralize",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Take a phone number and converts it in to its numerical equivalent.\"\"\"",
                    "name": "phone2numeric_filter",
                    "namespace": "django.template.defaultfilters.phone2numeric_filter",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"A wrapper around pprint.pprint -- for debugging, really.\"\"\"",
                    "name": "pprint",
                    "namespace": "django.template.defaultfilters.pprint",
                    "class_name": "",
                    "module_name": "django.template.defaultfilters",
                    "package_name": ""
                }
            ],
            "package_name": "django.template"
        },
        {
            "namespace": "django.template.engine",
            "docstring": "",
            "functions": [],
            "package_name": "django.template"
        },
        {
            "namespace": "django.template.context",
            "docstring": "",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Create a suitable Context from a plain dict and optionally an HttpRequest.\n    \"\"\"",
                    "name": "make_context",
                    "namespace": "django.template.context.make_context",
                    "class_name": "",
                    "module_name": "django.template.context",
                    "package_name": ""
                }
            ],
            "package_name": "django.template"
        },
        {
            "namespace": "django.template.utils",
            "docstring": "",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Return an iterable of paths of directories to load app templates from.\n\n    dirname is the name of the subdirectory containing templates inside\n    installed applications.\n    \"\"\"",
                    "name": "get_app_template_dirs",
                    "namespace": "django.template.utils.get_app_template_dirs",
                    "class_name": "",
                    "module_name": "django.template.utils",
                    "package_name": ""
                }
            ],
            "package_name": "django.template"
        },
        {
            "namespace": "django.template.loader",
            "docstring": "",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Load and return a template for the given name.\n\n    Raise TemplateDoesNotExist if no such template exists.\n    \"\"\"",
                    "name": "get_template",
                    "namespace": "django.template.loader.get_template",
                    "class_name": "",
                    "module_name": "django.template.loader",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Load and return a template for one of the given names.\n\n    Try names in order and return the first template found.\n\n    Raise TemplateDoesNotExist if no such template exists.\n    \"\"\"",
                    "name": "select_template",
                    "namespace": "django.template.loader.select_template",
                    "class_name": "",
                    "module_name": "django.template.loader",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Load a template and render it with a context. Return a string.\n\n    template_name may be a string or a list of strings.\n    \"\"\"",
                    "name": "render_to_string",
                    "namespace": "django.template.loader.render_to_string",
                    "class_name": "",
                    "module_name": "django.template.loader",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_engine_list",
                    "namespace": "django.template.loader._engine_list",
                    "class_name": "",
                    "module_name": "django.template.loader",
                    "package_name": ""
                }
            ],
            "package_name": "django.template"
        },
        {
            "namespace": "django.template.loader_tags",
            "docstring": "",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Define a block that can be overridden by child templates.\n    \"\"\"",
                    "name": "do_block",
                    "namespace": "django.template.loader_tags.do_block",
                    "class_name": "",
                    "module_name": "django.template.loader_tags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Convert a relative path (starting with './' or '../') to the full template\n    name based on the current_template_name.\n    \"\"\"",
                    "name": "construct_relative_path",
                    "namespace": "django.template.loader_tags.construct_relative_path",
                    "class_name": "",
                    "module_name": "django.template.loader_tags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Signal that this template extends a parent template.\n\n    This tag may be used in two ways: ``{% extends \"base\" %}`` (with quotes)\n    uses the literal value \"base\" as the name of the parent template to extend,\n    or ``{% extends variable %}`` uses the value of ``variable`` as either the\n    name of the parent template to extend (if it evaluates to a string) or as\n    the parent template itself (if it evaluates to a Template object).\n    \"\"\"",
                    "name": "do_extends",
                    "namespace": "django.template.loader_tags.do_extends",
                    "class_name": "",
                    "module_name": "django.template.loader_tags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Load a template and render it with the current context. You can pass\n    additional context using keyword arguments.\n\n    Example::\n\n        {% include \"foo/some_include\" %}\n        {% include \"foo/some_include\" with bar=\"BAZZ!\" baz=\"BING!\" %}\n\n    Use the ``only`` argument to exclude the current context when rendering\n    the included template::\n\n        {% include \"foo/some_include\" only %}\n        {% include \"foo/some_include\" with bar=\"1\" only %}\n    \"\"\"",
                    "name": "do_include",
                    "namespace": "django.template.loader_tags.do_include",
                    "class_name": "",
                    "module_name": "django.template.loader_tags",
                    "package_name": ""
                }
            ],
            "package_name": "django.template"
        },
        {
            "namespace": "django.template.exceptions",
            "docstring": "\"\"\"\nThis module contains generic exceptions used by template backends. Although,\ndue to historical reasons, the Django template language also internally uses\nthese exceptions, other exceptions specific to the DTL should not be added\nhere.\n\"\"\"",
            "functions": [],
            "package_name": "django.template"
        },
        {
            "namespace": "django.template.autoreload",
            "docstring": "",
            "functions": [
                {
                    "docstring": "",
                    "name": "get_template_directories",
                    "namespace": "django.template.autoreload.get_template_directories",
                    "class_name": "",
                    "module_name": "django.template.autoreload",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "reset_loaders",
                    "namespace": "django.template.autoreload.reset_loaders",
                    "class_name": "",
                    "module_name": "django.template.autoreload",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "watch_for_template_changes",
                    "namespace": "django.template.autoreload.watch_for_template_changes",
                    "class_name": "",
                    "module_name": "django.template.autoreload",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "template_changed",
                    "namespace": "django.template.autoreload.template_changed",
                    "class_name": "",
                    "module_name": "django.template.autoreload",
                    "package_name": ""
                }
            ],
            "package_name": "django.template"
        },
        {
            "namespace": "django.template.base",
            "docstring": "\"\"\"\nThis is the Django template system.\n\nHow it works:\n\nThe Lexer.tokenize() method converts a template string (i.e., a string\ncontaining markup with custom template tags) to tokens, which can be either\nplain text (TokenType.TEXT), variables (TokenType.VAR), or block statements\n(TokenType.BLOCK).\n\nThe Parser() class takes a list of tokens in its constructor, and its parse()\nmethod returns a compiled template -- which is, under the hood, a list of\nNode objects.\n\nEach Node is responsible for creating some sort of output -- e.g. simple text\n(TextNode), variable values in a given context (VariableNode), results of basic\nlogic (IfNode), results of looping (ForNode), or anything else. The core Node\ntypes are TextNode, VariableNode, IfNode and ForNode, but plugin modules can\ndefine their own custom node types.\n\nEach Node has a render() method, which takes a Context and returns a string of\nthe rendered node. For example, the render() method of a Variable Node returns\nthe variable's value as a string. The render() method of a ForNode returns the\nrendered output of whatever was inside the loop, recursively.\n\nThe Template class is a convenient wrapper that takes care of template\ncompilation and rendering.\n\nUsage:\n\nThe only thing you should ever use directly in this file is the Template class.\nCreate a compiled template object with a template_string, then call render()\nwith a context. In the compilation stage, the TemplateSyntaxError exception\nwill be raised if the template doesn't have proper syntax.\n\nSample code:\n\n>>> from django import template\n>>> s = '<html>{% if test %}<h1>{{ varvalue }}</h1>{% endif %}</html>'\n>>> t = template.Template(s)\n\n(t is now a compiled template, and its render() method can be called multiple\ntimes with multiple contexts)\n\n>>> c = template.Context({'test':True, 'varvalue': 'Hello'})\n>>> t.render(c)\n'<html><h1>Hello</h1></html>'\n>>> c = template.Context({'test':False, 'varvalue': 'Hello'})\n>>> t.render(c)\n'<html></html>'\n\"\"\"",
            "functions": [
                {
                    "docstring": "",
                    "name": "linebreak_iter",
                    "namespace": "django.template.base.linebreak_iter",
                    "class_name": "",
                    "module_name": "django.template.base",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Convert any value to a string to become part of a rendered template. This\n    means escaping, if required, and conversion to a string. If value is a\n    string, it's expected to already be translated.\n    \"\"\"",
                    "name": "render_value_in_context",
                    "namespace": "django.template.base.render_value_in_context",
                    "class_name": "",
                    "module_name": "django.template.base",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Parse token keyword arguments and return a dictionary of the arguments\n    retrieved from the ``bits`` token list.\n\n    `bits` is a list containing the remainder of the token (split by spaces)\n    that is to be checked for arguments. Valid arguments are removed from this\n    list.\n\n    `support_legacy` - if True, the legacy format ``1 as foo`` is accepted.\n    Otherwise, only the standard ``foo=1`` format is allowed.\n\n    There is no requirement for all remaining token ``bits`` to be keyword\n    arguments, so return the dictionary as soon as an invalid argument format\n    is reached.\n    \"\"\"",
                    "name": "token_kwargs",
                    "namespace": "django.template.base.token_kwargs",
                    "class_name": "",
                    "module_name": "django.template.base",
                    "package_name": ""
                }
            ],
            "package_name": "django.template"
        },
        {
            "namespace": "django.template.defaulttags",
            "docstring": "\"\"\"Default tags used by the template system, available to all templates.\"\"\"",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Force autoescape behavior for this block.\n    \"\"\"",
                    "name": "autoescape",
                    "namespace": "django.template.defaulttags.autoescape",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Ignore everything between ``{% comment %}`` and ``{% endcomment %}``.\n    \"\"\"",
                    "name": "comment",
                    "namespace": "django.template.defaulttags.comment",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Cycle among the given strings each time this tag is encountered.\n\n    Within a loop, cycles among the given strings each time through\n    the loop::\n\n        {% for o in some_list %}\n            <tr class=\"{% cycle 'row1' 'row2' %}\">\n                ...\n            </tr>\n        {% endfor %}\n\n    Outside of a loop, give the values a unique name the first time you call\n    it, then use that name each successive time through::\n\n            <tr class=\"{% cycle 'row1' 'row2' 'row3' as rowcolors %}\">...</tr>\n            <tr class=\"{% cycle rowcolors %}\">...</tr>\n            <tr class=\"{% cycle rowcolors %}\">...</tr>\n\n    You can use any number of values, separated by spaces. Commas can also\n    be used to separate values; if a comma is used, the cycle values are\n    interpreted as literal strings.\n\n    The optional flag \"silent\" can be used to prevent the cycle declaration\n    from returning any value::\n\n        {% for o in some_list %}\n            {% cycle 'row1' 'row2' as rowcolors silent %}\n            <tr class=\"{{ rowcolors }}\">{% include \"subtemplate.html \" %}</tr>\n        {% endfor %}\n    \"\"\"",
                    "name": "cycle",
                    "namespace": "django.template.defaulttags.cycle",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "csrf_token",
                    "namespace": "django.template.defaulttags.csrf_token",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Output a whole load of debugging information, including the current\n    context and imported modules.\n\n    Sample usage::\n\n        <pre>\n            {% debug %}\n        </pre>\n    \"\"\"",
                    "name": "debug",
                    "namespace": "django.template.defaulttags.debug",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Filter the contents of the block through variable filters.\n\n    Filters can also be piped through each other, and they can have\n    arguments -- just like in variable syntax.\n\n    Sample usage::\n\n        {% filter force_escape|lower %}\n            This text will be HTML-escaped, and will appear in lowercase.\n        {% endfilter %}\n\n    Note that the ``escape`` and ``safe`` filters are not acceptable arguments.\n    Instead, use the ``autoescape`` tag to manage autoescaping for blocks of\n    template code.\n    \"\"\"",
                    "name": "do_filter",
                    "namespace": "django.template.defaulttags.do_filter",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Output the first variable passed that is not False.\n\n    Output nothing if all the passed variables are False.\n\n    Sample usage::\n\n        {% firstof var1 var2 var3 as myvar %}\n\n    This is equivalent to::\n\n        {% if var1 %}\n            {{ var1 }}\n        {% elif var2 %}\n            {{ var2 }}\n        {% elif var3 %}\n            {{ var3 }}\n        {% endif %}\n\n    but much cleaner!\n\n    You can also use a literal string as a fallback value in case all\n    passed variables are False::\n\n        {% firstof var1 var2 var3 \"fallback value\" %}\n\n    If you want to disable auto-escaping of variables you can use::\n\n        {% autoescape off %}\n            {% firstof var1 var2 var3 \"<strong>fallback value</strong>\" %}\n        {% autoescape %}\n\n    Or if only some variables should be escaped, you can use::\n\n        {% firstof var1 var2|safe var3 \"<strong>fallback value</strong>\"|safe %}\n    \"\"\"",
                    "name": "firstof",
                    "namespace": "django.template.defaulttags.firstof",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Loop over each item in an array.\n\n    For example, to display a list of athletes given ``athlete_list``::\n\n        <ul>\n        {% for athlete in athlete_list %}\n            <li>{{ athlete.name }}</li>\n        {% endfor %}\n        </ul>\n\n    You can loop over a list in reverse by using\n    ``{% for obj in list reversed %}``.\n\n    You can also unpack multiple values from a two-dimensional array::\n\n        {% for key,value in dict.items %}\n            {{ key }}: {{ value }}\n        {% endfor %}\n\n    The ``for`` tag can take an optional ``{% empty %}`` clause that will\n    be displayed if the given array is empty or could not be found::\n\n        <ul>\n          {% for athlete in athlete_list %}\n            <li>{{ athlete.name }}</li>\n          {% empty %}\n            <li>Sorry, no athletes in this list.</li>\n          {% endfor %}\n        <ul>\n\n    The above is equivalent to -- but shorter, cleaner, and possibly faster\n    than -- the following::\n\n        <ul>\n          {% if athlete_list %}\n            {% for athlete in athlete_list %}\n              <li>{{ athlete.name }}</li>\n            {% endfor %}\n          {% else %}\n            <li>Sorry, no athletes in this list.</li>\n          {% endif %}\n        </ul>\n\n    The for loop sets a number of variables available within the loop:\n\n        ==========================  ================================================\n        Variable                    Description\n        ==========================  ================================================\n        ``forloop.counter``         The current iteration of the loop (1-indexed)\n        ``forloop.counter0``        The current iteration of the loop (0-indexed)\n        ``forloop.revcounter``      The number of iterations from the end of the\n                                    loop (1-indexed)\n        ``forloop.revcounter0``     The number of iterations from the end of the\n                                    loop (0-indexed)\n        ``forloop.first``           True if this is the first time through the loop\n        ``forloop.last``            True if this is the last time through the loop\n        ``forloop.parentloop``      For nested loops, this is the loop \"above\" the\n                                    current one\n        ==========================  ================================================\n    \"\"\"",
                    "name": "do_for",
                    "namespace": "django.template.defaulttags.do_for",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Evaluate a variable, and if that variable is \"true\" (i.e., exists, is not\n    empty, and is not a false boolean value), output the contents of the block:\n\n    ::\n\n        {% if athlete_list %}\n            Number of athletes: {{ athlete_list|count }}\n        {% elif athlete_in_locker_room_list %}\n            Athletes should be out of the locker room soon!\n        {% else %}\n            No athletes.\n        {% endif %}\n\n    In the above, if ``athlete_list`` is not empty, the number of athletes will\n    be displayed by the ``{{ athlete_list|count }}`` variable.\n\n    The ``if`` tag may take one or several `` {% elif %}`` clauses, as well as\n    an ``{% else %}`` clause that will be displayed if all previous conditions\n    fail. These clauses are optional.\n\n    ``if`` tags may use ``or``, ``and`` or ``not`` to test a number of\n    variables or to negate a given variable::\n\n        {% if not athlete_list %}\n            There are no athletes.\n        {% endif %}\n\n        {% if athlete_list or coach_list %}\n            There are some athletes or some coaches.\n        {% endif %}\n\n        {% if athlete_list and coach_list %}\n            Both athletes and coaches are available.\n        {% endif %}\n\n        {% if not athlete_list or coach_list %}\n            There are no athletes, or there are some coaches.\n        {% endif %}\n\n        {% if athlete_list and not coach_list %}\n            There are some athletes and absolutely no coaches.\n        {% endif %}\n\n    Comparison operators are also available, and the use of filters is also\n    allowed, for example::\n\n        {% if articles|length >= 5 %}...{% endif %}\n\n    Arguments and operators _must_ have a space between them, so\n    ``{% if 1>2 %}`` is not a valid if tag.\n\n    All supported operators are: ``or``, ``and``, ``in``, ``not in``\n    ``==``, ``!=``, ``>``, ``>=``, ``<`` and ``<=``.\n\n    Operator precedence follows Python.\n    \"\"\"",
                    "name": "do_if",
                    "namespace": "django.template.defaulttags.do_if",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Check if a value has changed from the last iteration of a loop.\n\n    The ``{% ifchanged %}`` block tag is used within a loop. It has two\n    possible uses.\n\n    1. Check its own rendered contents against its previous state and only\n       displays the content if it has changed. For example, this displays a\n       list of days, only displaying the month if it changes::\n\n            <h1>Archive for {{ year }}</h1>\n\n            {% for date in days %}\n                {% ifchanged %}<h3>{{ date|date:\"F\" }}</h3>{% endifchanged %}\n                <a href=\"{{ date|date:\"M/d\"|lower }}/\">{{ date|date:\"j\" }}</a>\n            {% endfor %}\n\n    2. If given one or more variables, check whether any variable has changed.\n       For example, the following shows the date every time it changes, while\n       showing the hour if either the hour or the date has changed::\n\n            {% for date in days %}\n                {% ifchanged date.date %} {{ date.date }} {% endifchanged %}\n                {% ifchanged date.hour date.date %}\n                    {{ date.hour }}\n                {% endifchanged %}\n            {% endfor %}\n    \"\"\"",
                    "name": "ifchanged",
                    "namespace": "django.template.defaulttags.ifchanged",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "find_library",
                    "namespace": "django.template.defaulttags.find_library",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Return a subset of tags and filters from a library.\n    \"\"\"",
                    "name": "load_from_library",
                    "namespace": "django.template.defaulttags.load_from_library",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Load a custom template tag library into the parser.\n\n    For example, to load the template tags in\n    ``django/templatetags/news/photos.py``::\n\n        {% load news.photos %}\n\n    Can also be used to load an individual tag/filter from\n    a library::\n\n        {% load byline from news %}\n    \"\"\"",
                    "name": "load",
                    "namespace": "django.template.defaulttags.load",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Create random Latin text useful for providing test data in templates.\n\n    Usage format::\n\n        {% lorem [count] [method] [random] %}\n\n    ``count`` is a number (or variable) containing the number of paragraphs or\n    words to generate (default is 1).\n\n    ``method`` is either ``w`` for words, ``p`` for HTML paragraphs, ``b`` for\n    plain-text paragraph blocks (default is ``b``).\n\n    ``random`` is the word ``random``, which if given, does not use the common\n    paragraph (starting \"Lorem ipsum dolor sit amet, consectetuer...\").\n\n    Examples:\n\n    * ``{% lorem %}`` outputs the common \"lorem ipsum\" paragraph\n    * ``{% lorem 3 p %}`` outputs the common \"lorem ipsum\" paragraph\n      and two random paragraphs each wrapped in HTML ``<p>`` tags\n    * ``{% lorem 2 w random %}`` outputs two random latin words\n    \"\"\"",
                    "name": "lorem",
                    "namespace": "django.template.defaulttags.lorem",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Display the date, formatted according to the given string.\n\n    Use the same format as PHP's ``date()`` function; see https://php.net/date\n    for all the possible values.\n\n    Sample usage::\n\n        It is {% now \"jS F Y H:i\" %}\n    \"\"\"",
                    "name": "now",
                    "namespace": "django.template.defaulttags.now",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Regroup a list of alike objects by a common attribute.\n\n    This complex tag is best illustrated by use of an example: say that\n    ``musicians`` is a list of ``Musician`` objects that have ``name`` and\n    ``instrument`` attributes, and you'd like to display a list that\n    looks like:\n\n        * Guitar:\n            * Django Reinhardt\n            * Emily Remler\n        * Piano:\n            * Lovie Austin\n            * Bud Powell\n        * Trumpet:\n            * Duke Ellington\n\n    The following snippet of template code would accomplish this dubious task::\n\n        {% regroup musicians by instrument as grouped %}\n        <ul>\n        {% for group in grouped %}\n            <li>{{ group.grouper }}\n            <ul>\n                {% for musician in group.list %}\n                <li>{{ musician.name }}</li>\n                {% endfor %}\n            </ul>\n        {% endfor %}\n        </ul>\n\n    As you can see, ``{% regroup %}`` populates a variable with a list of\n    objects with ``grouper`` and ``list`` attributes. ``grouper`` contains the\n    item that was grouped by; ``list`` contains the list of objects that share\n    that ``grouper``. In this case, ``grouper`` would be ``Guitar``, ``Piano``\n    and ``Trumpet``, and ``list`` is the list of musicians who play this\n    instrument.\n\n    Note that ``{% regroup %}`` does not work when the list to be grouped is not\n    sorted by the key you are grouping by! This means that if your list of\n    musicians was not sorted by instrument, you'd need to make sure it is sorted\n    before using it, i.e.::\n\n        {% regroup musicians|dictsort:\"instrument\" by instrument as grouped %}\n    \"\"\"",
                    "name": "regroup",
                    "namespace": "django.template.defaulttags.regroup",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Reset a cycle tag.\n\n    If an argument is given, reset the last rendered cycle tag whose name\n    matches the argument, else reset the last rendered cycle tag (named or\n    unnamed).\n    \"\"\"",
                    "name": "resetcycle",
                    "namespace": "django.template.defaulttags.resetcycle",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Remove whitespace between HTML tags, including tab and newline characters.\n\n    Example usage::\n\n        {% spaceless %}\n            <p>\n                <a href=\"foo/\">Foo</a>\n            </p>\n        {% endspaceless %}\n\n    This example returns this HTML::\n\n        <p><a href=\"foo/\">Foo</a></p>\n\n    Only space between *tags* is normalized -- not space between tags and text.\n    In this example, the space around ``Hello`` isn't stripped::\n\n        {% spaceless %}\n            <strong>\n                Hello\n            </strong>\n        {% endspaceless %}\n    \"\"\"",
                    "name": "spaceless",
                    "namespace": "django.template.defaulttags.spaceless",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Output one of the bits used to compose template tags.\n\n    Since the template system has no concept of \"escaping\", to display one of\n    the bits used in template tags, you must use the ``{% templatetag %}`` tag.\n\n    The argument tells which template bit to output:\n\n        ==================  =======\n        Argument            Outputs\n        ==================  =======\n        ``openblock``       ``{%``\n        ``closeblock``      ``%}``\n        ``openvariable``    ``{{``\n        ``closevariable``   ``}}``\n        ``openbrace``       ``{``\n        ``closebrace``      ``}``\n        ``opencomment``     ``{#``\n        ``closecomment``    ``#}``\n        ==================  =======\n    \"\"\"",
                    "name": "templatetag",
                    "namespace": "django.template.defaulttags.templatetag",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "r\"\"\"\n    Return an absolute URL matching the given view with its parameters.\n\n    This is a way to define links that aren't tied to a particular URL\n    configuration::\n\n        {% url \"url_name\" arg1 arg2 %}\n\n        or\n\n        {% url \"url_name\" name1=value1 name2=value2 %}\n\n    The first argument is a URL pattern name. Other arguments are\n    space-separated values that will be filled in place of positional and\n    keyword arguments in the URL. Don't mix positional and keyword arguments.\n    All arguments for the URL must be present.\n\n    For example, if you have a view ``app_name.views.client_details`` taking\n    the client's id and the corresponding line in a URLconf looks like this::\n\n        path('client/<int:id>/', views.client_details, name='client-detail-view')\n\n    and this app's URLconf is included into the project's URLconf under some\n    path::\n\n        path('clients/', include('app_name.urls'))\n\n    then in a template you can create a link for a certain client like this::\n\n        {% url \"client-detail-view\" client.id %}\n\n    The URL will look like ``/clients/client/123/``.\n\n    The first argument may also be the name of a template variable that will be\n    evaluated to obtain the view name or the URL name, e.g.::\n\n        {% with url_name=\"client-detail-view\" %}\n        {% url url_name client.id %}\n        {% endwith %}\n    \"\"\"",
                    "name": "url",
                    "namespace": "django.template.defaulttags.url",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Stop the template engine from rendering the contents of this block tag.\n\n    Usage::\n\n        {% verbatim %}\n            {% don't process this %}\n        {% endverbatim %}\n\n    You can also designate a specific closing tag block (allowing the\n    unrendered use of ``{% endverbatim %}``)::\n\n        {% verbatim myblock %}\n            ...\n        {% endverbatim myblock %}\n    \"\"\"",
                    "name": "verbatim",
                    "namespace": "django.template.defaulttags.verbatim",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    For creating bar charts and such. Calculate the ratio of a given value to a\n    maximum value, and then apply that ratio to a constant.\n\n    For example::\n\n        <img src=\"bar.png\" alt=\"Bar\"\n             height=\"10\" width=\"{% widthratio this_value max_value max_width %}\">\n\n    If ``this_value`` is 175, ``max_value`` is 200, and ``max_width`` is 100,\n    the image in the above example will be 88 pixels wide\n    (because 175/200 = .875; .875 * 100 = 87.5 which is rounded up to 88).\n\n    In some cases you might want to capture the result of widthratio in a\n    variable. It can be useful for instance in a blocktranslate like this::\n\n        {% widthratio this_value max_value max_width as width %}\n        {% blocktranslate %}The width is: {{ width }}{% endblocktranslate %}\n    \"\"\"",
                    "name": "widthratio",
                    "namespace": "django.template.defaulttags.widthratio",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Add one or more values to the context (inside of this block) for caching\n    and easy access.\n\n    For example::\n\n        {% with total=person.some_sql_method %}\n            {{ total }} object{{ total|pluralize }}\n        {% endwith %}\n\n    Multiple values can be added to the context::\n\n        {% with foo=1 bar=2 %}\n            ...\n        {% endwith %}\n\n    The legacy format of ``{% with person.some_sql_method as total %}`` is\n    still accepted.\n    \"\"\"",
                    "name": "do_with",
                    "namespace": "django.template.defaulttags.do_with",
                    "class_name": "",
                    "module_name": "django.template.defaulttags",
                    "package_name": ""
                }
            ],
            "package_name": "django.template"
        }
    ],
    "subpackages": [
        {
            "name": "django.template.backends",
            "docstring": "",
            "package_name": "django.template",
            "functions": []
        },
        {
            "name": "django.template.loaders",
            "docstring": "",
            "package_name": "django.template",
            "functions": []
        }
    ]
}