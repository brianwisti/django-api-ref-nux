{
    "name": "django.contrib.gis.utils",
    "docstring": "\"\"\"\n This module contains useful utilities for GeoDjango.\n\"\"\"",
    "package_name": "django.contrib.gis",
    "functions": [],
    "classes": [],
    "modules": [
        {
            "namespace": "django.contrib.gis.utils.srs",
            "docstring": "",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Take a GDAL SpatialReference system and add its information to the\n    `spatial_ref_sys` table of the spatial backend. Doing this enables\n    database-level spatial transformations for the backend.  Thus, this utility\n    is useful for adding spatial reference systems not included by default with\n    the backend:\n\n    >>> from django.contrib.gis.utils import add_srs_entry\n    >>> add_srs_entry(3857)\n\n    Keyword Arguments:\n     auth_name:\n       This keyword may be customized with the value of the `auth_name` field.\n       Defaults to 'EPSG'.\n\n     auth_srid:\n       This keyword may be customized with the value of the `auth_srid` field.\n       Defaults to the SRID determined by GDAL.\n\n     ref_sys_name:\n       For SpatiaLite users only, sets the value of the `ref_sys_name` field.\n       Defaults to the name determined by GDAL.\n\n     database:\n      The name of the database connection to use; the default is the value\n      of `django.db.DEFAULT_DB_ALIAS` (at the time of this writing, its value\n      is 'default').\n    \"\"\"",
                    "name": "add_srs_entry",
                    "namespace": "django.contrib.gis.utils.srs.add_srs_entry",
                    "class_name": "",
                    "module_name": "django.contrib.gis.utils.srs",
                    "package_name": ""
                }
            ],
            "package_name": "django.contrib.gis.utils"
        },
        {
            "namespace": "django.contrib.gis.utils.ogrinspect",
            "docstring": "\"\"\"\nThis module is for inspecting OGR data sources and generating either\nmodels for GeoDjango and/or mapping dictionaries for use with the\n`LayerMapping` utility.\n\"\"\"",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Given a DataSource, generate a dictionary that may be used\n    for invoking the LayerMapping utility.\n\n    Keyword Arguments:\n     `geom_name` => The name of the geometry field to use for the model.\n\n     `layer_key` => The key for specifying which layer in the DataSource to use;\n       defaults to 0 (the first layer).  May be an integer index or a string\n       identifier for the layer.\n\n     `multi_geom` => Boolean (default: False) - specify as multigeometry.\n    \"\"\"",
                    "name": "mapping",
                    "namespace": "django.contrib.gis.utils.ogrinspect.mapping",
                    "class_name": "",
                    "module_name": "django.contrib.gis.utils.ogrinspect",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Given a data source (either a string or a DataSource object) and a string\n    model name this function will generate a GeoDjango model.\n\n    Usage:\n\n    >>> from django.contrib.gis.utils import ogrinspect\n    >>> ogrinspect('/path/to/shapefile.shp','NewModel')\n\n    ...will print model definition to stout\n\n    or put this in a Python script and use to redirect the output to a new\n    model like:\n\n    $ python generate_model.py > myapp/models.py\n\n    # generate_model.py\n    from django.contrib.gis.utils import ogrinspect\n    shp_file = 'data/mapping_hacks/world_borders.shp'\n    model_name = 'WorldBorders'\n\n    print(ogrinspect(shp_file, model_name, multi_geom=True, srid=4326,\n                     geom_name='shapes', blank=True))\n\n    Required Arguments\n     `datasource` => string or DataSource object to file pointer\n\n     `model name` => string of name of new model class to create\n\n    Optional Keyword Arguments\n     `geom_name` => For specifying the model name for the Geometry Field.\n       Otherwise will default to `geom`\n\n     `layer_key` => The key for specifying which layer in the DataSource to use;\n       defaults to 0 (the first layer).  May be an integer index or a string\n       identifier for the layer.\n\n     `srid` => The SRID to use for the Geometry Field.  If it can be determined,\n       the SRID of the datasource is used.\n\n     `multi_geom` => Boolean (default: False) - specify as multigeometry.\n\n     `name_field` => String - specifies a field name to return for the\n       __str__() method (which will be generated if specified).\n\n     `imports` => Boolean (default: True) - set to False to omit the\n       `from django.contrib.gis.db import models` code from the\n       autogenerated models thus avoiding duplicated imports when building\n       more than one model by batching ogrinspect()\n\n     `decimal` => Boolean or sequence (default: False).  When set to True\n       all generated model fields corresponding to the `OFTReal` type will\n       be `DecimalField` instead of `FloatField`.  A sequence of specific\n       field names to generate as `DecimalField` may also be used.\n\n     `blank` => Boolean or sequence (default: False).  When set to True all\n       generated model fields will have `blank=True`.  If the user wants to\n       give specific fields to have blank, then a list/tuple of OGR field\n       names may be used.\n\n     `null` => Boolean (default: False) - When set to True all generated\n       model fields will have `null=True`.  If the user wants to specify\n       give specific fields to have null, then a list/tuple of OGR field\n       names may be used.\n\n    Note: Call the _ogrinspect() helper to do the heavy lifting.\n    \"\"\"",
                    "name": "ogrinspect",
                    "namespace": "django.contrib.gis.utils.ogrinspect.ogrinspect",
                    "class_name": "",
                    "module_name": "django.contrib.gis.utils.ogrinspect",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n    Helper routine for `ogrinspect` that generates GeoDjango models corresponding\n    to the given data source.  See the `ogrinspect` docstring for more details.\n    \"\"\"",
                    "name": "_ogrinspect",
                    "namespace": "django.contrib.gis.utils.ogrinspect._ogrinspect",
                    "class_name": "",
                    "module_name": "django.contrib.gis.utils.ogrinspect",
                    "package_name": ""
                }
            ],
            "package_name": "django.contrib.gis.utils"
        },
        {
            "namespace": "django.contrib.gis.utils.layermapping",
            "docstring": "\"\"\"\n The LayerMapping class provides a way to map the contents of OGR\n vector files (e.g. SHP files) to Geographic-enabled Django models.\n\n For more information, please consult the GeoDjango documentation:\n   https://docs.djangoproject.com/en/dev/ref/contrib/gis/layermapping/\n\"\"\"",
            "functions": [],
            "package_name": "django.contrib.gis.utils"
        },
        {
            "namespace": "django.contrib.gis.utils.ogrinfo",
            "docstring": "\"\"\"\nThis module includes some utility functions for inspecting the layout\nof a GDAL data source -- the functionality is analogous to the output\nproduced by the `ogrinfo` utility.\n\"\"\"",
            "functions": [
                {
                    "docstring": "\"\"\"\n    Walk the available layers in the supplied `data_source`, displaying\n    the fields for the first `num_features` features.\n    \"\"\"",
                    "name": "ogrinfo",
                    "namespace": "django.contrib.gis.utils.ogrinfo.ogrinfo",
                    "class_name": "",
                    "module_name": "django.contrib.gis.utils.ogrinfo",
                    "package_name": ""
                }
            ],
            "package_name": "django.contrib.gis.utils"
        }
    ],
    "subpackages": []
}