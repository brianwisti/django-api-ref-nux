{
    "namespace": "django.db.utils",
    "docstring": "",
    "classes": [
        {
            "docstring": "",
            "name": "Error",
            "namespace": "django.db.utils.Error",
            "methods": []
        },
        {
            "docstring": "",
            "name": "InterfaceError",
            "namespace": "django.db.utils.InterfaceError",
            "methods": []
        },
        {
            "docstring": "",
            "name": "DatabaseError",
            "namespace": "django.db.utils.DatabaseError",
            "methods": []
        },
        {
            "docstring": "",
            "name": "DataError",
            "namespace": "django.db.utils.DataError",
            "methods": []
        },
        {
            "docstring": "",
            "name": "OperationalError",
            "namespace": "django.db.utils.OperationalError",
            "methods": []
        },
        {
            "docstring": "",
            "name": "IntegrityError",
            "namespace": "django.db.utils.IntegrityError",
            "methods": []
        },
        {
            "docstring": "",
            "name": "InternalError",
            "namespace": "django.db.utils.InternalError",
            "methods": []
        },
        {
            "docstring": "",
            "name": "ProgrammingError",
            "namespace": "django.db.utils.ProgrammingError",
            "methods": []
        },
        {
            "docstring": "",
            "name": "NotSupportedError",
            "namespace": "django.db.utils.NotSupportedError",
            "methods": []
        },
        {
            "docstring": "\"\"\"\n    Context manager and decorator that reraises backend-specific database\n    exceptions using Django's common wrappers.\n    \"\"\"",
            "name": "DatabaseErrorWrapper",
            "namespace": "django.db.utils.DatabaseErrorWrapper",
            "methods": [
                {
                    "docstring": "\"\"\"\n        wrapper is a database wrapper.\n\n        It must have a Database attribute defining PEP-249 exceptions.\n        \"\"\"",
                    "name": "__init__",
                    "namespace": "django.db.utils.DatabaseErrorWrapper.__init__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__enter__",
                    "namespace": "django.db.utils.DatabaseErrorWrapper.__enter__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__exit__",
                    "namespace": "django.db.utils.DatabaseErrorWrapper.__exit__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__call__",
                    "namespace": "django.db.utils.DatabaseErrorWrapper.__call__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "",
            "name": "ConnectionHandler",
            "namespace": "django.db.utils.ConnectionHandler",
            "methods": [
                {
                    "docstring": "",
                    "name": "configure_settings",
                    "namespace": "django.db.utils.ConnectionHandler.configure_settings",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "databases",
                    "namespace": "django.db.utils.ConnectionHandler.databases",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Put the defaults into the settings dictionary for a given connection\n        where no settings is provided.\n        \"\"\"",
                    "name": "ensure_defaults",
                    "namespace": "django.db.utils.ConnectionHandler.ensure_defaults",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Make sure the test settings are available in the 'TEST' sub-dictionary.\n        \"\"\"",
                    "name": "prepare_test_settings",
                    "namespace": "django.db.utils.ConnectionHandler.prepare_test_settings",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "create_connection",
                    "namespace": "django.db.utils.ConnectionHandler.create_connection",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "close_all",
                    "namespace": "django.db.utils.ConnectionHandler.close_all",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "",
            "name": "ConnectionRouter",
            "namespace": "django.db.utils.ConnectionRouter",
            "methods": [
                {
                    "docstring": "\"\"\"\n        If routers is not specified, default to settings.DATABASE_ROUTERS.\n        \"\"\"",
                    "name": "__init__",
                    "namespace": "django.db.utils.ConnectionRouter.__init__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "routers",
                    "namespace": "django.db.utils.ConnectionRouter.routers",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_router_func",
                    "namespace": "django.db.utils.ConnectionRouter._router_func",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "allow_relation",
                    "namespace": "django.db.utils.ConnectionRouter.allow_relation",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "allow_migrate",
                    "namespace": "django.db.utils.ConnectionRouter.allow_migrate",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "allow_migrate_model",
                    "namespace": "django.db.utils.ConnectionRouter.allow_migrate_model",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return app models allowed to be migrated on provided db.\"\"\"",
                    "name": "get_migratable_models",
                    "namespace": "django.db.utils.ConnectionRouter.get_migratable_models",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        }
    ],
    "functions": [
        {
            "docstring": "\"\"\"\n    Return a database backend's \"base\" module given a fully qualified database\n    backend name, or raise an error if it doesn't exist.\n    \"\"\"",
            "name": "load_backend",
            "namespace": "django.db.utils.load_backend",
            "class_name": "",
            "module_name": "django.db.utils",
            "package_name": ""
        }
    ],
    "package_name": "django.db"
}