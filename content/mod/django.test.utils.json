{
    "namespace": "django.test.utils",
    "docstring": "",
    "classes": [
        {
            "docstring": "",
            "name": "Approximate",
            "namespace": "django.test.utils.Approximate"
        },
        {
            "docstring": "\"\"\"\n    A wrapper that provides direct key access to context items contained\n    in a list of context objects.\n    \"\"\"",
            "name": "ContextList",
            "namespace": "django.test.utils.ContextList"
        },
        {
            "docstring": "",
            "name": "_TestState",
            "namespace": "django.test.utils._TestState"
        },
        {
            "docstring": "\"\"\"\n    A base class that can either be used as a context manager during tests\n    or as a test function or unittest.TestCase subclass decorator to perform\n    temporary alterations.\n\n    `attr_name`: attribute assigned the return value of enable() if used as\n                 a class decorator.\n\n    `kwarg_name`: keyword argument passing the return value of enable() if\n                  used as a function decorator.\n    \"\"\"",
            "name": "TestContextDecorator",
            "namespace": "django.test.utils.TestContextDecorator"
        },
        {
            "docstring": "\"\"\"\n    Act as either a decorator or a context manager. If it's a decorator, take a\n    function and return a wrapped function. If it's a contextmanager, use it\n    with the ``with`` statement. In either event, entering/exiting are called\n    before and after, respectively, the function/block is executed.\n    \"\"\"",
            "name": "override_settings",
            "namespace": "django.test.utils.override_settings"
        },
        {
            "docstring": "\"\"\"\n    Like override_settings, but makes it possible to append, prepend, or remove\n    items instead of redefining the entire list.\n    \"\"\"",
            "name": "modify_settings",
            "namespace": "django.test.utils.modify_settings"
        },
        {
            "docstring": "\"\"\"\n    Act as a decorator. Override list of registered system checks.\n    Useful when you override `INSTALLED_APPS`, e.g. if you exclude `auth` app,\n    you also need to exclude its system checks.\n    \"\"\"",
            "name": "override_system_checks",
            "namespace": "django.test.utils.override_system_checks"
        },
        {
            "docstring": "\"\"\"\n    Context manager that captures queries executed by the specified connection.\n    \"\"\"",
            "name": "CaptureQueriesContext",
            "namespace": "django.test.utils.CaptureQueriesContext"
        },
        {
            "docstring": "",
            "name": "ignore_warnings",
            "namespace": "django.test.utils.ignore_warnings"
        },
        {
            "docstring": "\"\"\"Decorator or context manager to temporary override the script prefix.\"\"\"",
            "name": "override_script_prefix",
            "namespace": "django.test.utils.override_script_prefix"
        },
        {
            "docstring": "\"\"\"\n    Capture the output from the 'django' logger and store it on the class's\n    logger_output attribute.\n    \"\"\"",
            "name": "LoggingCaptureMixin",
            "namespace": "django.test.utils.LoggingCaptureMixin"
        },
        {
            "docstring": "\"\"\"\n    Act as either a decorator or a context manager to register models defined\n    in its wrapped context to an isolated registry.\n\n    The list of installed apps the isolated registry should contain must be\n    passed as arguments.\n\n    Two optional keyword arguments can be specified:\n\n    `attr_name`: attribute assigned the isolated registry if used as a class\n                 decorator.\n\n    `kwarg_name`: keyword argument passing the isolated registry if used as a\n                  function decorator.\n    \"\"\"",
            "name": "isolate_apps",
            "namespace": "django.test.utils.isolate_apps"
        },
        {
            "docstring": "",
            "name": "TimeKeeper",
            "namespace": "django.test.utils.TimeKeeper"
        },
        {
            "docstring": "",
            "name": "NullTimeKeeper",
            "namespace": "django.test.utils.NullTimeKeeper"
        }
    ],
    "package_name": "django.test"
}