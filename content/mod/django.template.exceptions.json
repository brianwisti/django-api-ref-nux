{
    "namespace": "django.template.exceptions",
    "docstring": "\"\"\"\nThis module contains generic exceptions used by template backends. Although,\ndue to historical reasons, the Django template language also internally uses\nthese exceptions, other exceptions specific to the DTL should not be added\nhere.\n\"\"\"",
    "classes": [
        {
            "docstring": "\"\"\"\n    The exception used when a template does not exist. Optional arguments:\n\n    backend\n        The template backend class used when raising this exception.\n\n    tried\n        A list of sources that were tried when finding the template. This\n        is formatted as a list of tuples containing (origin, status), where\n        origin is an Origin object or duck type and status is a string with the\n        reason the template wasn't found.\n\n    chain\n        A list of intermediate TemplateDoesNotExist exceptions. This is used to\n        encapsulate multiple exceptions when loading templates from multiple\n        engines.\n    \"\"\"",
            "name": "TemplateDoesNotExist",
            "namespace": "django.template.exceptions.TemplateDoesNotExist",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.template.exceptions.TemplateDoesNotExist.__init__",
                    "class_name": "django.template.exceptions.TemplateDoesNotExist",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    The exception used for syntax errors during parsing or rendering.\n    \"\"\"",
            "name": "TemplateSyntaxError",
            "namespace": "django.template.exceptions.TemplateSyntaxError",
            "methods": []
        }
    ],
    "functions": [],
    "package_name": "django.template"
}