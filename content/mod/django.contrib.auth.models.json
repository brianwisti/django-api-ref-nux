{
    "namespace": "django.contrib.auth.models",
    "docstring": "",
    "classes": [
        {
            "docstring": "",
            "name": "PermissionManager",
            "namespace": "django.contrib.auth.models.PermissionManager"
        },
        {
            "docstring": "\"\"\"\n    The permissions system provides a way to assign permissions to specific\n    users and groups of users.\n\n    The permission system is used by the Django admin site, but may also be\n    useful in your own code. The Django admin site uses permissions as follows:\n\n        - The \"add\" permission limits the user's ability to view the \"add\" form\n          and add an object.\n        - The \"change\" permission limits a user's ability to view the change\n          list, view the \"change\" form and change an object.\n        - The \"delete\" permission limits the ability to delete an object.\n        - The \"view\" permission limits the ability to view an object.\n\n    Permissions are set globally per type of object, not per specific object\n    instance. It is possible to say \"Mary may change news stories,\" but it's\n    not currently possible to say \"Mary may change news stories, but only the\n    ones she created herself\" or \"Mary may only change news stories that have a\n    certain status or publication date.\"\n\n    The permissions listed above are automatically created for each model.\n    \"\"\"",
            "name": "Permission",
            "namespace": "django.contrib.auth.models.Permission"
        },
        {
            "docstring": "\"\"\"\n    The manager for the auth's Group model.\n    \"\"\"",
            "name": "GroupManager",
            "namespace": "django.contrib.auth.models.GroupManager"
        },
        {
            "docstring": "\"\"\"\n    Groups are a generic way of categorizing users to apply permissions, or\n    some other label, to those users. A user can belong to any number of\n    groups.\n\n    A user in a group automatically has all the permissions granted to that\n    group. For example, if the group 'Site editors' has the permission\n    can_edit_home_page, any user in that group will have that permission.\n\n    Beyond permissions, groups are a convenient way to categorize users to\n    apply some label, or extended functionality, to them. For example, you\n    could create a group 'Special users', and you could write code that would\n    do special things to those users -- such as giving them access to a\n    members-only portion of your site, or sending them members-only email\n    messages.\n    \"\"\"",
            "name": "Group",
            "namespace": "django.contrib.auth.models.Group"
        },
        {
            "docstring": "",
            "name": "UserManager",
            "namespace": "django.contrib.auth.models.UserManager"
        },
        {
            "docstring": "\"\"\"\n    Add the fields and methods necessary to support the Group and Permission\n    models using the ModelBackend.\n    \"\"\"",
            "name": "PermissionsMixin",
            "namespace": "django.contrib.auth.models.PermissionsMixin"
        },
        {
            "docstring": "\"\"\"\n    An abstract base class implementing a fully featured User model with\n    admin-compliant permissions.\n\n    Username and password are required. Other fields are optional.\n    \"\"\"",
            "name": "AbstractUser",
            "namespace": "django.contrib.auth.models.AbstractUser"
        },
        {
            "docstring": "\"\"\"\n    Users within the Django authentication system are represented by this\n    model.\n\n    Username and password are required. Other fields are optional.\n    \"\"\"",
            "name": "User",
            "namespace": "django.contrib.auth.models.User"
        },
        {
            "docstring": "",
            "name": "AnonymousUser",
            "namespace": "django.contrib.auth.models.AnonymousUser"
        }
    ],
    "package_name": "django.contrib.auth"
}