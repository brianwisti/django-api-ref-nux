{
    "namespace": "django.db.models.fields.related_descriptors",
    "docstring": "\"\"\"\nAccessors for related objects.\n\nWhen a field defines a relation between two models, each model class provides\nan attribute to access related instances of the other model class (unless the\nreverse accessor has been disabled with related_name='+').\n\nAccessors are implemented as descriptors in order to customize access and\nassignment. This module defines the descriptor classes.\n\nForward accessors follow foreign keys. Reverse accessors trace them back. For\nexample, with the following models::\n\n    class Parent(Model):\n        pass\n\n    class Child(Model):\n        parent = ForeignKey(Parent, related_name='children')\n\n ``child.parent`` is a forward many-to-one relation. ``parent.children`` is a\nreverse many-to-one relation.\n\nThere are three types of relations (many-to-one, one-to-one, and many-to-many)\nand two directions (forward and reverse) for a total of six combinations.\n\n1. Related instance on the forward side of a many-to-one relation:\n   ``ForwardManyToOneDescriptor``.\n\n   Uniqueness of foreign key values is irrelevant to accessing the related\n   instance, making the many-to-one and one-to-one cases identical as far as\n   the descriptor is concerned. The constraint is checked upstream (unicity\n   validation in forms) or downstream (unique indexes in the database).\n\n2. Related instance on the forward side of a one-to-one\n   relation: ``ForwardOneToOneDescriptor``.\n\n   It avoids querying the database when accessing the parent link field in\n   a multi-table inheritance scenario.\n\n3. Related instance on the reverse side of a one-to-one relation:\n   ``ReverseOneToOneDescriptor``.\n\n   One-to-one relations are asymmetrical, despite the apparent symmetry of the\n   name, because they're implemented in the database with a foreign key from\n   one table to another. As a consequence ``ReverseOneToOneDescriptor`` is\n   slightly different from ``ForwardManyToOneDescriptor``.\n\n4. Related objects manager for related instances on the reverse side of a\n   many-to-one relation: ``ReverseManyToOneDescriptor``.\n\n   Unlike the previous two classes, this one provides access to a collection\n   of objects. It returns a manager rather than an instance.\n\n5. Related objects manager for related instances on the forward or reverse\n   sides of a many-to-many relation: ``ManyToManyDescriptor``.\n\n   Many-to-many relations are symmetrical. The syntax of Django models\n   requires declaring them on one side but that's an implementation detail.\n   They could be declared on the other side without any change in behavior.\n   Therefore the forward and reverse descriptors can be the same.\n\n   If you're looking for ``ForwardManyToManyDescriptor`` or\n   ``ReverseManyToManyDescriptor``, use ``ManyToManyDescriptor`` instead.\n\"\"\"",
    "classes": [
        {
            "docstring": "",
            "name": "ForeignKeyDeferredAttribute",
            "namespace": "django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute",
            "methods": [
                {
                    "docstring": "",
                    "name": "__set__",
                    "namespace": "django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute.__set__",
                    "class_name": "django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Accessor to the related object on the forward side of a many-to-one or\n    one-to-one (via ForwardOneToOneDescriptor subclass) relation.\n\n    In the example::\n\n        class Child(Model):\n            parent = ForeignKey(Parent, related_name='children')\n\n    ``Child.parent`` is a ``ForwardManyToOneDescriptor`` instance.\n    \"\"\"",
            "name": "ForwardManyToOneDescriptor",
            "namespace": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.__init__",
                    "class_name": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "RelatedObjectDoesNotExist",
                    "namespace": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.RelatedObjectDoesNotExist",
                    "class_name": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "is_cached",
                    "namespace": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.is_cached",
                    "class_name": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_queryset",
                    "namespace": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.get_queryset",
                    "class_name": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_prefetch_queryset",
                    "namespace": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.get_prefetch_queryset",
                    "class_name": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_object",
                    "namespace": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.get_object",
                    "class_name": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Get the related instance through the forward relation.\n\n        With the example above, when getting ``child.parent``:\n\n        - ``self`` is the descriptor managing the ``parent`` attribute\n        - ``instance`` is the ``child`` instance\n        - ``cls`` is the ``Child`` class (we don't need it)\n        \"\"\"",
                    "name": "__get__",
                    "namespace": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.__get__",
                    "class_name": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Set the related instance through the forward relation.\n\n        With the example above, when setting ``child.parent = parent``:\n\n        - ``self`` is the descriptor managing the ``parent`` attribute\n        - ``instance`` is the ``child`` instance\n        - ``value`` is the ``parent`` instance on the right of the equal sign\n        \"\"\"",
                    "name": "__set__",
                    "namespace": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.__set__",
                    "class_name": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Pickling should return the instance attached by self.field on the\n        model, not a new copy of that descriptor. Use getattr() to retrieve\n        the instance directly from the model.\n        \"\"\"",
                    "name": "__reduce__",
                    "namespace": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.__reduce__",
                    "class_name": "django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Accessor to the related object on the forward side of a one-to-one relation.\n\n    In the example::\n\n        class Restaurant(Model):\n            place = OneToOneField(Place, related_name='restaurant')\n\n    ``Restaurant.place`` is a ``ForwardOneToOneDescriptor`` instance.\n    \"\"\"",
            "name": "ForwardOneToOneDescriptor",
            "namespace": "django.db.models.fields.related_descriptors.ForwardOneToOneDescriptor",
            "methods": [
                {
                    "docstring": "",
                    "name": "get_object",
                    "namespace": "django.db.models.fields.related_descriptors.ForwardOneToOneDescriptor.get_object",
                    "class_name": "django.db.models.fields.related_descriptors.ForwardOneToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__set__",
                    "namespace": "django.db.models.fields.related_descriptors.ForwardOneToOneDescriptor.__set__",
                    "class_name": "django.db.models.fields.related_descriptors.ForwardOneToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Accessor to the related object on the reverse side of a one-to-one\n    relation.\n\n    In the example::\n\n        class Restaurant(Model):\n            place = OneToOneField(Place, related_name='restaurant')\n\n    ``Place.restaurant`` is a ``ReverseOneToOneDescriptor`` instance.\n    \"\"\"",
            "name": "ReverseOneToOneDescriptor",
            "namespace": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.__init__",
                    "class_name": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "RelatedObjectDoesNotExist",
                    "namespace": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.RelatedObjectDoesNotExist",
                    "class_name": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "is_cached",
                    "namespace": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.is_cached",
                    "class_name": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_queryset",
                    "namespace": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.get_queryset",
                    "class_name": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_prefetch_queryset",
                    "namespace": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.get_prefetch_queryset",
                    "class_name": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Get the related instance through the reverse relation.\n\n        With the example above, when getting ``place.restaurant``:\n\n        - ``self`` is the descriptor managing the ``restaurant`` attribute\n        - ``instance`` is the ``place`` instance\n        - ``cls`` is the ``Place`` class (unused)\n\n        Keep in mind that ``Restaurant`` holds the foreign key to ``Place``.\n        \"\"\"",
                    "name": "__get__",
                    "namespace": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.__get__",
                    "class_name": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Set the related instance through the reverse relation.\n\n        With the example above, when setting ``place.restaurant = restaurant``:\n\n        - ``self`` is the descriptor managing the ``restaurant`` attribute\n        - ``instance`` is the ``place`` instance\n        - ``value`` is the ``restaurant`` instance on the right of the equal sign\n\n        Keep in mind that ``Restaurant`` holds the foreign key to ``Place``.\n        \"\"\"",
                    "name": "__set__",
                    "namespace": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.__set__",
                    "class_name": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__reduce__",
                    "namespace": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.__reduce__",
                    "class_name": "django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Accessor to the related objects manager on the reverse side of a\n    many-to-one relation.\n\n    In the example::\n\n        class Child(Model):\n            parent = ForeignKey(Parent, related_name='children')\n\n    ``Parent.children`` is a ``ReverseManyToOneDescriptor`` instance.\n\n    Most of the implementation is delegated to a dynamically defined manager\n    class built by ``create_forward_many_to_many_manager()`` defined below.\n    \"\"\"",
            "name": "ReverseManyToOneDescriptor",
            "namespace": "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor.__init__",
                    "class_name": "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "related_manager_cls",
                    "namespace": "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor.related_manager_cls",
                    "class_name": "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Get the related objects through the reverse relation.\n\n        With the example above, when getting ``parent.children``:\n\n        - ``self`` is the descriptor managing the ``children`` attribute\n        - ``instance`` is the ``parent`` instance\n        - ``cls`` is the ``Parent`` class (unused)\n        \"\"\"",
                    "name": "__get__",
                    "namespace": "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor.__get__",
                    "class_name": "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_get_set_deprecation_msg_params",
                    "namespace": "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor._get_set_deprecation_msg_params",
                    "class_name": "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__set__",
                    "namespace": "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor.__set__",
                    "class_name": "django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Accessor to the related objects manager on the forward and reverse sides of\n    a many-to-many relation.\n\n    In the example::\n\n        class Pizza(Model):\n            toppings = ManyToManyField(Topping, related_name='pizzas')\n\n    ``Pizza.toppings`` and ``Topping.pizzas`` are ``ManyToManyDescriptor``\n    instances.\n\n    Most of the implementation is delegated to a dynamically defined manager\n    class built by ``create_forward_many_to_many_manager()`` defined below.\n    \"\"\"",
            "name": "ManyToManyDescriptor",
            "namespace": "django.db.models.fields.related_descriptors.ManyToManyDescriptor",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.db.models.fields.related_descriptors.ManyToManyDescriptor.__init__",
                    "class_name": "django.db.models.fields.related_descriptors.ManyToManyDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "through",
                    "namespace": "django.db.models.fields.related_descriptors.ManyToManyDescriptor.through",
                    "class_name": "django.db.models.fields.related_descriptors.ManyToManyDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "related_manager_cls",
                    "namespace": "django.db.models.fields.related_descriptors.ManyToManyDescriptor.related_manager_cls",
                    "class_name": "django.db.models.fields.related_descriptors.ManyToManyDescriptor",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_get_set_deprecation_msg_params",
                    "namespace": "django.db.models.fields.related_descriptors.ManyToManyDescriptor._get_set_deprecation_msg_params",
                    "class_name": "django.db.models.fields.related_descriptors.ManyToManyDescriptor",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        }
    ],
    "functions": [
        {
            "docstring": "\"\"\"\n    Create a manager for the reverse side of a many-to-one relation.\n\n    This manager subclasses another manager, generally the default manager of\n    the related model, and adds behaviors specific to many-to-one relations.\n    \"\"\"",
            "name": "create_reverse_many_to_one_manager",
            "namespace": "django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager",
            "class_name": "",
            "module_name": "django.db.models.fields.related_descriptors",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Create a manager for the either side of a many-to-many relation.\n\n    This manager subclasses another manager, generally the default manager of\n    the related model, and adds behaviors specific to many-to-many relations.\n    \"\"\"",
            "name": "create_forward_many_to_many_manager",
            "namespace": "django.db.models.fields.related_descriptors.create_forward_many_to_many_manager",
            "class_name": "",
            "module_name": "django.db.models.fields.related_descriptors",
            "package_name": ""
        }
    ],
    "package_name": "django.db.models.fields"
}