{
    "namespace": "django.test.client",
    "docstring": "",
    "classes": [
        {
            "docstring": "\"\"\"The test client has been asked to follow a redirect loop.\"\"\"",
            "name": "RedirectCycleError",
            "namespace": "django.test.client.RedirectCycleError",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.test.client.RedirectCycleError.__init__",
                    "class_name": "django.test.client.RedirectCycleError",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    A wrapper around BytesIO that restricts what can be read since data from\n    the network can't be sought and cannot be read outside of its content\n    length. This makes sure that views can't do anything under the test client\n    that wouldn't work in real life.\n    \"\"\"",
            "name": "FakePayload",
            "namespace": "django.test.client.FakePayload",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.test.client.FakePayload.__init__",
                    "class_name": "django.test.client.FakePayload",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__len__",
                    "namespace": "django.test.client.FakePayload.__len__",
                    "class_name": "django.test.client.FakePayload",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "read",
                    "namespace": "django.test.client.FakePayload.read",
                    "class_name": "django.test.client.FakePayload",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "write",
                    "namespace": "django.test.client.FakePayload.write",
                    "class_name": "django.test.client.FakePayload",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    An HTTP Handler that can be used for testing purposes. Use the WSGI\n    interface to compose requests, but return the raw HttpResponse object with\n    the originating WSGIRequest attached to its ``wsgi_request`` attribute.\n    \"\"\"",
            "name": "ClientHandler",
            "namespace": "django.test.client.ClientHandler",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.test.client.ClientHandler.__init__",
                    "class_name": "django.test.client.ClientHandler",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__call__",
                    "namespace": "django.test.client.ClientHandler.__call__",
                    "class_name": "django.test.client.ClientHandler",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"An async version of ClientHandler.\"\"\"",
            "name": "AsyncClientHandler",
            "namespace": "django.test.client.AsyncClientHandler",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.test.client.AsyncClientHandler.__init__",
                    "class_name": "django.test.client.AsyncClientHandler",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__call__",
                    "namespace": "django.test.client.AsyncClientHandler.__call__",
                    "class_name": "django.test.client.AsyncClientHandler",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Class that lets you create mock Request objects for use in testing.\n\n    Usage:\n\n    rf = RequestFactory()\n    get_request = rf.get('/hello/')\n    post_request = rf.post('/submit/', {'foo': 'bar'})\n\n    Once you have a request object you can pass it to any view function,\n    just as if that view had been hooked up using a URLconf.\n    \"\"\"",
            "name": "RequestFactory",
            "namespace": "django.test.client.RequestFactory",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.test.client.RequestFactory.__init__",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        The base environment for a request.\n        \"\"\"",
                    "name": "_base_environ",
                    "namespace": "django.test.client.RequestFactory._base_environ",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"Construct a generic request object.\"",
                    "name": "request",
                    "namespace": "django.test.client.RequestFactory.request",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_encode_data",
                    "namespace": "django.test.client.RequestFactory._encode_data",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return encoded JSON if data is a dict, list, or tuple and content_type\n        is application/json.\n        \"\"\"",
                    "name": "_encode_json",
                    "namespace": "django.test.client.RequestFactory._encode_json",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_get_path",
                    "namespace": "django.test.client.RequestFactory._get_path",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Construct a GET request.\"\"\"",
                    "name": "get",
                    "namespace": "django.test.client.RequestFactory.get",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Construct a POST request.\"\"\"",
                    "name": "post",
                    "namespace": "django.test.client.RequestFactory.post",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Construct a HEAD request.\"\"\"",
                    "name": "head",
                    "namespace": "django.test.client.RequestFactory.head",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Construct a TRACE request.\"\"\"",
                    "name": "trace",
                    "namespace": "django.test.client.RequestFactory.trace",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"Construct an OPTIONS request.\"",
                    "name": "options",
                    "namespace": "django.test.client.RequestFactory.options",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Construct a PUT request.\"\"\"",
                    "name": "put",
                    "namespace": "django.test.client.RequestFactory.put",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Construct a PATCH request.\"\"\"",
                    "name": "patch",
                    "namespace": "django.test.client.RequestFactory.patch",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Construct a DELETE request.\"\"\"",
                    "name": "delete",
                    "namespace": "django.test.client.RequestFactory.delete",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Construct an arbitrary HTTP request.\"\"\"",
                    "name": "generic",
                    "namespace": "django.test.client.RequestFactory.generic",
                    "class_name": "django.test.client.RequestFactory",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Class that lets you create mock ASGI-like Request objects for use in\n    testing. Usage:\n\n    rf = AsyncRequestFactory()\n    get_request = await rf.get('/hello/')\n    post_request = await rf.post('/submit/', {'foo': 'bar'})\n\n    Once you have a request object you can pass it to any view function,\n    including synchronous ones. The reason we have a separate class here is:\n    a) this makes ASGIRequest subclasses, and\n    b) AsyncTestClient can subclass it.\n    \"\"\"",
            "name": "AsyncRequestFactory",
            "namespace": "django.test.client.AsyncRequestFactory",
            "methods": [
                {
                    "docstring": "\"\"\"The base scope for a request.\"\"\"",
                    "name": "_base_scope",
                    "namespace": "django.test.client.AsyncRequestFactory._base_scope",
                    "class_name": "django.test.client.AsyncRequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Construct a generic request object.\"\"\"",
                    "name": "request",
                    "namespace": "django.test.client.AsyncRequestFactory.request",
                    "class_name": "django.test.client.AsyncRequestFactory",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Construct an arbitrary HTTP request.\"\"\"",
                    "name": "generic",
                    "namespace": "django.test.client.AsyncRequestFactory.generic",
                    "class_name": "django.test.client.AsyncRequestFactory",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Mixin with common methods between Client and AsyncClient.\n    \"\"\"",
            "name": "ClientMixin",
            "namespace": "django.test.client.ClientMixin",
            "methods": [
                {
                    "docstring": "\"\"\"Store exceptions when they are generated by a view.\"\"\"",
                    "name": "store_exc_info",
                    "namespace": "django.test.client.ClientMixin.store_exc_info",
                    "class_name": "django.test.client.ClientMixin",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Look for a signaled exception, clear the current context exception\n        data, re-raise the signaled exception, and clear the signaled exception\n        from the local cache.\n        \"\"\"",
                    "name": "check_exception",
                    "namespace": "django.test.client.ClientMixin.check_exception",
                    "class_name": "django.test.client.ClientMixin",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the current session variables.\"\"\"",
                    "name": "session",
                    "namespace": "django.test.client.ClientMixin.session",
                    "class_name": "django.test.client.ClientMixin",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Set the Factory to appear as if it has successfully logged into a site.\n\n        Return True if login is possible or False if the provided credentials\n        are incorrect.\n        \"\"\"",
                    "name": "login",
                    "namespace": "django.test.client.ClientMixin.login",
                    "class_name": "django.test.client.ClientMixin",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "force_login",
                    "namespace": "django.test.client.ClientMixin.force_login",
                    "class_name": "django.test.client.ClientMixin",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_login",
                    "namespace": "django.test.client.ClientMixin._login",
                    "class_name": "django.test.client.ClientMixin",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Log out the user by removing the cookies and session object.\"\"\"",
                    "name": "logout",
                    "namespace": "django.test.client.ClientMixin.logout",
                    "class_name": "django.test.client.ClientMixin",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_parse_json",
                    "namespace": "django.test.client.ClientMixin._parse_json",
                    "class_name": "django.test.client.ClientMixin",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    A class that can act as a client for testing purposes.\n\n    It allows the user to compose GET and POST requests, and\n    obtain the response that the server gave to those requests.\n    The server Response objects are annotated with the details\n    of the contexts and templates that were rendered during the\n    process of serving the request.\n\n    Client objects are stateful - they will retain cookie (and\n    thus session) details for the lifetime of the Client instance.\n\n    This is not intended as a replacement for Twill/Selenium or\n    the like - it is here to allow testing against the\n    contexts and templates produced by a view, rather than the\n    HTML rendered to the end-user.\n    \"\"\"",
            "name": "Client",
            "namespace": "django.test.client.Client",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.test.client.Client.__init__",
                    "class_name": "django.test.client.Client",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        The master request method. Compose the environment dictionary and pass\n        to the handler, return the result of the handler. Assume defaults for\n        the query environment, which can be overridden using the arguments to\n        the request.\n        \"\"\"",
                    "name": "request",
                    "namespace": "django.test.client.Client.request",
                    "class_name": "django.test.client.Client",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Request a response from the server using GET.\"\"\"",
                    "name": "get",
                    "namespace": "django.test.client.Client.get",
                    "class_name": "django.test.client.Client",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Request a response from the server using POST.\"\"\"",
                    "name": "post",
                    "namespace": "django.test.client.Client.post",
                    "class_name": "django.test.client.Client",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Request a response from the server using HEAD.\"\"\"",
                    "name": "head",
                    "namespace": "django.test.client.Client.head",
                    "class_name": "django.test.client.Client",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Request a response from the server using OPTIONS.\"\"\"",
                    "name": "options",
                    "namespace": "django.test.client.Client.options",
                    "class_name": "django.test.client.Client",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Send a resource to the server using PUT.\"\"\"",
                    "name": "put",
                    "namespace": "django.test.client.Client.put",
                    "class_name": "django.test.client.Client",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Send a resource to the server using PATCH.\"\"\"",
                    "name": "patch",
                    "namespace": "django.test.client.Client.patch",
                    "class_name": "django.test.client.Client",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Send a DELETE request to the server.\"\"\"",
                    "name": "delete",
                    "namespace": "django.test.client.Client.delete",
                    "class_name": "django.test.client.Client",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Send a TRACE request to the server.\"\"\"",
                    "name": "trace",
                    "namespace": "django.test.client.Client.trace",
                    "class_name": "django.test.client.Client",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Follow any redirects by requesting responses from the server using GET.\n        \"\"\"",
                    "name": "_handle_redirects",
                    "namespace": "django.test.client.Client._handle_redirects",
                    "class_name": "django.test.client.Client",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    An async version of Client that creates ASGIRequests and calls through an\n    async request path.\n\n    Does not currently support \"follow\" on its methods.\n    \"\"\"",
            "name": "AsyncClient",
            "namespace": "django.test.client.AsyncClient",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.test.client.AsyncClient.__init__",
                    "class_name": "django.test.client.AsyncClient",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        The master request method. Compose the scope dictionary and pass to the\n        handler, return the result of the handler. Assume defaults for the\n        query environment, which can be overridden using the arguments to the\n        request.\n        \"\"\"",
                    "name": "request",
                    "namespace": "django.test.client.AsyncClient.request",
                    "class_name": "django.test.client.AsyncClient",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        }
    ],
    "functions": [
        {
            "docstring": "",
            "name": "closing_iterator_wrapper",
            "namespace": "django.test.client.closing_iterator_wrapper",
            "class_name": "",
            "module_name": "django.test.client",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Simulate the behavior of most web servers by removing the content of\n    responses for HEAD requests, 1xx, 204, and 304 responses. Ensure\n    compliance with RFC 7230, section 3.3.3.\n    \"\"\"",
            "name": "conditional_content_removal",
            "namespace": "django.test.client.conditional_content_removal",
            "class_name": "",
            "module_name": "django.test.client",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Store templates and contexts that are rendered.\n\n    The context is copied so that it is an accurate representation at the time\n    of rendering.\n    \"\"\"",
            "name": "store_rendered_templates",
            "namespace": "django.test.client.store_rendered_templates",
            "class_name": "",
            "module_name": "django.test.client",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Encode multipart POST data from a dictionary of form values.\n\n    The key will be used as the form data name; the value will be transmitted\n    as content. If the value is a file, the contents of the file will be sent\n    as an application/octet-stream; otherwise, str(value) will be sent.\n    \"\"\"",
            "name": "encode_multipart",
            "namespace": "django.test.client.encode_multipart",
            "class_name": "",
            "module_name": "django.test.client",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "encode_file",
            "namespace": "django.test.client.encode_file",
            "class_name": "",
            "module_name": "django.test.client",
            "package_name": ""
        }
    ],
    "package_name": "django.test"
}