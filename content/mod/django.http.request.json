{
    "namespace": "django.http.request",
    "docstring": "",
    "classes": [
        {
            "docstring": "",
            "name": "UnreadablePostError",
            "namespace": "django.http.request.UnreadablePostError",
            "methods": []
        },
        {
            "docstring": "\"\"\"\n    You cannot access raw_post_data from a request that has\n    multipart/* POST data if it has been accessed via POST,\n    FILES, etc..\n    \"\"\"",
            "name": "RawPostDataException",
            "namespace": "django.http.request.RawPostDataException",
            "methods": []
        },
        {
            "docstring": "\"\"\"A basic HTTP request.\"\"\"",
            "name": "HttpRequest",
            "namespace": "django.http.request.HttpRequest",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.http.request.HttpRequest.__init__",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__repr__",
                    "namespace": "django.http.request.HttpRequest.__repr__",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "headers",
                    "namespace": "django.http.request.HttpRequest.headers",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return a list of MediaType instances.\"\"\"",
                    "name": "accepted_types",
                    "namespace": "django.http.request.HttpRequest.accepted_types",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "accepts",
                    "namespace": "django.http.request.HttpRequest.accepts",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Set content_type, content_params, and encoding.\"\"\"",
                    "name": "_set_content_type_params",
                    "namespace": "django.http.request.HttpRequest._set_content_type_params",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return the HTTP host using the environment or request headers. Skip\n        allowed hosts protection, so may return an insecure host.\n        \"\"\"",
                    "name": "_get_raw_host",
                    "namespace": "django.http.request.HttpRequest._get_raw_host",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the HTTP host using the environment or request headers.\"\"\"",
                    "name": "get_host",
                    "namespace": "django.http.request.HttpRequest.get_host",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the port number for the request as a string.\"\"\"",
                    "name": "get_port",
                    "namespace": "django.http.request.HttpRequest.get_port",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_full_path",
                    "namespace": "django.http.request.HttpRequest.get_full_path",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_full_path_info",
                    "namespace": "django.http.request.HttpRequest.get_full_path_info",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_get_full_path",
                    "namespace": "django.http.request.HttpRequest._get_full_path",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Attempt to return a signed cookie. If the signature fails or the\n        cookie has expired, raise an exception, unless the `default` argument\n        is provided,  in which case return that value.\n        \"\"\"",
                    "name": "get_signed_cookie",
                    "namespace": "django.http.request.HttpRequest.get_signed_cookie",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Build an absolute URI from the location and the variables available in\n        this request. If no ``location`` is specified, build the absolute URI\n        using request.get_full_path(). If the location is absolute, convert it\n        to an RFC 3987 compliant URI and return it. If location is relative or\n        is scheme-relative (i.e., ``//example.com/``), urljoin() it to a base\n        URL constructed from the request variables.\n        \"\"\"",
                    "name": "build_absolute_uri",
                    "namespace": "django.http.request.HttpRequest.build_absolute_uri",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_current_scheme_host",
                    "namespace": "django.http.request.HttpRequest._current_scheme_host",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Hook for subclasses like WSGIRequest to implement. Return 'http' by\n        default.\n        \"\"\"",
                    "name": "_get_scheme",
                    "namespace": "django.http.request.HttpRequest._get_scheme",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "scheme",
                    "namespace": "django.http.request.HttpRequest.scheme",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "is_secure",
                    "namespace": "django.http.request.HttpRequest.is_secure",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "encoding",
                    "namespace": "django.http.request.HttpRequest.encoding",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Set the encoding used for GET/POST accesses. If the GET or POST\n        dictionary has already been created, remove and recreate it on the\n        next access (so that it is decoded correctly).\n        \"\"\"",
                    "name": "encoding",
                    "namespace": "django.http.request.HttpRequest.encoding",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_initialize_handlers",
                    "namespace": "django.http.request.HttpRequest._initialize_handlers",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "upload_handlers",
                    "namespace": "django.http.request.HttpRequest.upload_handlers",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "upload_handlers",
                    "namespace": "django.http.request.HttpRequest.upload_handlers",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return a tuple of (POST QueryDict, FILES MultiValueDict).\"\"\"",
                    "name": "parse_file_upload",
                    "namespace": "django.http.request.HttpRequest.parse_file_upload",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "body",
                    "namespace": "django.http.request.HttpRequest.body",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_mark_post_parse_error",
                    "namespace": "django.http.request.HttpRequest._mark_post_parse_error",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Populate self._post and self._files if the content-type is a form type\"\"\"",
                    "name": "_load_post_and_files",
                    "namespace": "django.http.request.HttpRequest._load_post_and_files",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "close",
                    "namespace": "django.http.request.HttpRequest.close",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "read",
                    "namespace": "django.http.request.HttpRequest.read",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "readline",
                    "namespace": "django.http.request.HttpRequest.readline",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__iter__",
                    "namespace": "django.http.request.HttpRequest.__iter__",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "readlines",
                    "namespace": "django.http.request.HttpRequest.readlines",
                    "class_name": "django.http.request.HttpRequest",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "",
            "name": "HttpHeaders",
            "namespace": "django.http.request.HttpHeaders",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.http.request.HttpHeaders.__init__",
                    "class_name": "django.http.request.HttpHeaders",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Allow header lookup using underscores in place of hyphens.\"\"\"",
                    "name": "__getitem__",
                    "namespace": "django.http.request.HttpHeaders.__getitem__",
                    "class_name": "django.http.request.HttpHeaders",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "parse_header_name",
                    "namespace": "django.http.request.HttpHeaders.parse_header_name",
                    "class_name": "django.http.request.HttpHeaders",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    A specialized MultiValueDict which represents a query string.\n\n    A QueryDict can be used to represent GET or POST data. It subclasses\n    MultiValueDict since keys in such data can be repeated, for instance\n    in the data from a form with a <select multiple> field.\n\n    By default QueryDicts are immutable, though the copy() method\n    will always return a mutable copy.\n\n    Both keys and values set on this class are converted from the given encoding\n    (DEFAULT_CHARSET by default) to str.\n    \"\"\"",
            "name": "QueryDict",
            "namespace": "django.http.request.QueryDict",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.http.request.QueryDict.__init__",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return a new QueryDict with keys (may be repeated) from an iterable and\n        values from value.\n        \"\"\"",
                    "name": "fromkeys",
                    "namespace": "django.http.request.QueryDict.fromkeys",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "encoding",
                    "namespace": "django.http.request.QueryDict.encoding",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "encoding",
                    "namespace": "django.http.request.QueryDict.encoding",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_assert_mutable",
                    "namespace": "django.http.request.QueryDict._assert_mutable",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__setitem__",
                    "namespace": "django.http.request.QueryDict.__setitem__",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__delitem__",
                    "namespace": "django.http.request.QueryDict.__delitem__",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__copy__",
                    "namespace": "django.http.request.QueryDict.__copy__",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__deepcopy__",
                    "namespace": "django.http.request.QueryDict.__deepcopy__",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "setlist",
                    "namespace": "django.http.request.QueryDict.setlist",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "setlistdefault",
                    "namespace": "django.http.request.QueryDict.setlistdefault",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "appendlist",
                    "namespace": "django.http.request.QueryDict.appendlist",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "pop",
                    "namespace": "django.http.request.QueryDict.pop",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "popitem",
                    "namespace": "django.http.request.QueryDict.popitem",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "clear",
                    "namespace": "django.http.request.QueryDict.clear",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "setdefault",
                    "namespace": "django.http.request.QueryDict.setdefault",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return a mutable copy of this object.\"\"\"",
                    "name": "copy",
                    "namespace": "django.http.request.QueryDict.copy",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return an encoded string of all query string arguments.\n\n        `safe` specifies characters which don't require quoting, for example::\n\n            >>> q = QueryDict(mutable=True)\n            >>> q['next'] = '/a&b/'\n            >>> q.urlencode()\n            'next=%2Fa%26b%2F'\n            >>> q.urlencode(safe='/')\n            'next=/a%26b/'\n        \"\"\"",
                    "name": "urlencode",
                    "namespace": "django.http.request.QueryDict.urlencode",
                    "class_name": "django.http.request.QueryDict",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "",
            "name": "MediaType",
            "namespace": "django.http.request.MediaType",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.http.request.MediaType.__init__",
                    "class_name": "django.http.request.MediaType",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__str__",
                    "namespace": "django.http.request.MediaType.__str__",
                    "class_name": "django.http.request.MediaType",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__repr__",
                    "namespace": "django.http.request.MediaType.__repr__",
                    "class_name": "django.http.request.MediaType",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "is_all_types",
                    "namespace": "django.http.request.MediaType.is_all_types",
                    "class_name": "django.http.request.MediaType",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "match",
                    "namespace": "django.http.request.MediaType.match",
                    "class_name": "django.http.request.MediaType",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        }
    ],
    "functions": [
        {
            "docstring": "\"\"\"\n    Convert bytes objects to strings, using the given encoding. Illegally\n    encoded input characters are replaced with Unicode \"unknown\" codepoint\n    (\\ufffd).\n\n    Return any non-bytes objects without change.\n    \"\"\"",
            "name": "bytes_to_text",
            "namespace": "django.http.request.bytes_to_text",
            "class_name": "",
            "module_name": "django.http.request",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Return a (domain, port) tuple from a given host.\n\n    Returned domain is lowercased. If the host is invalid, the domain will be\n    empty.\n    \"\"\"",
            "name": "split_domain_port",
            "namespace": "django.http.request.split_domain_port",
            "class_name": "",
            "module_name": "django.http.request",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Validate the given host for this site.\n\n    Check that the host looks valid and matches a host or host pattern in the\n    given list of ``allowed_hosts``. Any pattern beginning with a period\n    matches a domain and all its subdomains (e.g. ``.example.com`` matches\n    ``example.com`` and any subdomain), ``*`` matches anything, and anything\n    else must match exactly.\n\n    Note: This function assumes that the given host is lowercased and has\n    already had the port, if any, stripped off.\n\n    Return ``True`` for a valid host, ``False`` otherwise.\n    \"\"\"",
            "name": "validate_host",
            "namespace": "django.http.request.validate_host",
            "class_name": "",
            "module_name": "django.http.request",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "parse_accept_header",
            "namespace": "django.http.request.parse_accept_header",
            "class_name": "",
            "module_name": "django.http.request",
            "package_name": ""
        }
    ],
    "package_name": "django.http"
}