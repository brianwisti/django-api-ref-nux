{
    "namespace": "django.utils.datastructures",
    "docstring": "",
    "classes": [
        {
            "docstring": "\"\"\"\n    A set which keeps the ordering of the inserted items.\n    \"\"\"",
            "name": "OrderedSet",
            "namespace": "django.utils.datastructures.OrderedSet",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.utils.datastructures.OrderedSet.__init__",
                    "class_name": "django.utils.datastructures.OrderedSet",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "add",
                    "namespace": "django.utils.datastructures.OrderedSet.add",
                    "class_name": "django.utils.datastructures.OrderedSet",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "remove",
                    "namespace": "django.utils.datastructures.OrderedSet.remove",
                    "class_name": "django.utils.datastructures.OrderedSet",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "discard",
                    "namespace": "django.utils.datastructures.OrderedSet.discard",
                    "class_name": "django.utils.datastructures.OrderedSet",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__iter__",
                    "namespace": "django.utils.datastructures.OrderedSet.__iter__",
                    "class_name": "django.utils.datastructures.OrderedSet",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__reversed__",
                    "namespace": "django.utils.datastructures.OrderedSet.__reversed__",
                    "class_name": "django.utils.datastructures.OrderedSet",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__contains__",
                    "namespace": "django.utils.datastructures.OrderedSet.__contains__",
                    "class_name": "django.utils.datastructures.OrderedSet",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__bool__",
                    "namespace": "django.utils.datastructures.OrderedSet.__bool__",
                    "class_name": "django.utils.datastructures.OrderedSet",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__len__",
                    "namespace": "django.utils.datastructures.OrderedSet.__len__",
                    "class_name": "django.utils.datastructures.OrderedSet",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__repr__",
                    "namespace": "django.utils.datastructures.OrderedSet.__repr__",
                    "class_name": "django.utils.datastructures.OrderedSet",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "",
            "name": "MultiValueDictKeyError",
            "namespace": "django.utils.datastructures.MultiValueDictKeyError",
            "methods": []
        },
        {
            "docstring": "\"\"\"\n    A subclass of dictionary customized to handle multiple values for the\n    same key.\n\n    >>> d = MultiValueDict({'name': ['Adrian', 'Simon'], 'position': ['Developer']})\n    >>> d['name']\n    'Simon'\n    >>> d.getlist('name')\n    ['Adrian', 'Simon']\n    >>> d.getlist('doesnotexist')\n    []\n    >>> d.getlist('doesnotexist', ['Adrian', 'Simon'])\n    ['Adrian', 'Simon']\n    >>> d.get('lastname', 'nonexistent')\n    'nonexistent'\n    >>> d.setlist('lastname', ['Holovaty', 'Willison'])\n\n    This class exists to solve the irritating problem raised by cgi.parse_qs,\n    which returns a list for every key, even though most web forms submit\n    single name-value pairs.\n    \"\"\"",
            "name": "MultiValueDict",
            "namespace": "django.utils.datastructures.MultiValueDict",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.utils.datastructures.MultiValueDict.__init__",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__repr__",
                    "namespace": "django.utils.datastructures.MultiValueDict.__repr__",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return the last data value for this key, or [] if it's an empty list;\n        raise KeyError if not found.\n        \"\"\"",
                    "name": "__getitem__",
                    "namespace": "django.utils.datastructures.MultiValueDict.__getitem__",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__setitem__",
                    "namespace": "django.utils.datastructures.MultiValueDict.__setitem__",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__copy__",
                    "namespace": "django.utils.datastructures.MultiValueDict.__copy__",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__deepcopy__",
                    "namespace": "django.utils.datastructures.MultiValueDict.__deepcopy__",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__getstate__",
                    "namespace": "django.utils.datastructures.MultiValueDict.__getstate__",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__setstate__",
                    "namespace": "django.utils.datastructures.MultiValueDict.__setstate__",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return the last data value for the passed key. If key doesn't exist\n        or value is an empty list, return `default`.\n        \"\"\"",
                    "name": "get",
                    "namespace": "django.utils.datastructures.MultiValueDict.get",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return a list of values for the key.\n\n        Used internally to manipulate values list. If force_list is True,\n        return a new copy of values.\n        \"\"\"",
                    "name": "_getlist",
                    "namespace": "django.utils.datastructures.MultiValueDict._getlist",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return the list of values for the key. If key doesn't exist, return a\n        default value.\n        \"\"\"",
                    "name": "getlist",
                    "namespace": "django.utils.datastructures.MultiValueDict.getlist",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "setlist",
                    "namespace": "django.utils.datastructures.MultiValueDict.setlist",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "setdefault",
                    "namespace": "django.utils.datastructures.MultiValueDict.setdefault",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "setlistdefault",
                    "namespace": "django.utils.datastructures.MultiValueDict.setlistdefault",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Append an item to the internal list associated with key.\"\"\"",
                    "name": "appendlist",
                    "namespace": "django.utils.datastructures.MultiValueDict.appendlist",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Yield (key, value) pairs, where value is the last item in the list\n        associated with the key.\n        \"\"\"",
                    "name": "items",
                    "namespace": "django.utils.datastructures.MultiValueDict.items",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Yield (key, list) pairs.\"\"\"",
                    "name": "lists",
                    "namespace": "django.utils.datastructures.MultiValueDict.lists",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Yield the last value on every key list.\"\"\"",
                    "name": "values",
                    "namespace": "django.utils.datastructures.MultiValueDict.values",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return a shallow copy of this object.\"\"\"",
                    "name": "copy",
                    "namespace": "django.utils.datastructures.MultiValueDict.copy",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Extend rather than replace existing key lists.\"\"\"",
                    "name": "update",
                    "namespace": "django.utils.datastructures.MultiValueDict.update",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return current object as a dict with singular values.\"\"\"",
                    "name": "dict",
                    "namespace": "django.utils.datastructures.MultiValueDict.dict",
                    "class_name": "django.utils.datastructures.MultiValueDict",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    A tuple-like object that raises useful errors when it is asked to mutate.\n\n    Example::\n\n        >>> a = ImmutableList(range(5), warning=\"You cannot mutate this.\")\n        >>> a[3] = '4'\n        Traceback (most recent call last):\n            ...\n        AttributeError: You cannot mutate this.\n    \"\"\"",
            "name": "ImmutableList",
            "namespace": "django.utils.datastructures.ImmutableList",
            "methods": [
                {
                    "docstring": "",
                    "name": "__new__",
                    "namespace": "django.utils.datastructures.ImmutableList.__new__",
                    "class_name": "django.utils.datastructures.ImmutableList",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "complain",
                    "namespace": "django.utils.datastructures.ImmutableList.complain",
                    "class_name": "django.utils.datastructures.ImmutableList",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Wrap accesses to a dictionary so that certain values (those starting with\n    the specified prefix) are passed through a function before being returned.\n    The prefix is removed before looking up the real value.\n\n    Used by the SQL construction code to ensure that values are correctly\n    quoted before being used.\n    \"\"\"",
            "name": "DictWrapper",
            "namespace": "django.utils.datastructures.DictWrapper",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.utils.datastructures.DictWrapper.__init__",
                    "class_name": "django.utils.datastructures.DictWrapper",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Retrieve the real value after stripping the prefix string (if\n        present). If the prefix is present, pass the value through self.func\n        before returning, otherwise return the raw value.\n        \"\"\"",
                    "name": "__getitem__",
                    "namespace": "django.utils.datastructures.DictWrapper.__getitem__",
                    "class_name": "django.utils.datastructures.DictWrapper",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Mapping allowing case-insensitive key lookups. Original case of keys is\n    preserved for iteration and string representation.\n\n    Example::\n\n        >>> ci_map = CaseInsensitiveMapping({'name': 'Jane'})\n        >>> ci_map['Name']\n        Jane\n        >>> ci_map['NAME']\n        Jane\n        >>> ci_map['name']\n        Jane\n        >>> ci_map  # original case preserved\n        {'name': 'Jane'}\n    \"\"\"",
            "name": "CaseInsensitiveMapping",
            "namespace": "django.utils.datastructures.CaseInsensitiveMapping",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.utils.datastructures.CaseInsensitiveMapping.__init__",
                    "class_name": "django.utils.datastructures.CaseInsensitiveMapping",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__getitem__",
                    "namespace": "django.utils.datastructures.CaseInsensitiveMapping.__getitem__",
                    "class_name": "django.utils.datastructures.CaseInsensitiveMapping",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__len__",
                    "namespace": "django.utils.datastructures.CaseInsensitiveMapping.__len__",
                    "class_name": "django.utils.datastructures.CaseInsensitiveMapping",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__eq__",
                    "namespace": "django.utils.datastructures.CaseInsensitiveMapping.__eq__",
                    "class_name": "django.utils.datastructures.CaseInsensitiveMapping",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__iter__",
                    "namespace": "django.utils.datastructures.CaseInsensitiveMapping.__iter__",
                    "class_name": "django.utils.datastructures.CaseInsensitiveMapping",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__repr__",
                    "namespace": "django.utils.datastructures.CaseInsensitiveMapping.__repr__",
                    "class_name": "django.utils.datastructures.CaseInsensitiveMapping",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "copy",
                    "namespace": "django.utils.datastructures.CaseInsensitiveMapping.copy",
                    "class_name": "django.utils.datastructures.CaseInsensitiveMapping",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        }
    ],
    "functions": [
        {
            "docstring": "",
            "name": "_destruct_iterable_mapping_values",
            "namespace": "django.utils.datastructures._destruct_iterable_mapping_values",
            "class_name": "",
            "module_name": "django.utils.datastructures",
            "package_name": ""
        }
    ],
    "package_name": "django.utils"
}