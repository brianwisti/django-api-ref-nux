{
    "namespace": "django.db.models.query_utils",
    "docstring": "\"\"\"\nVarious data structures used in query construction.\n\nFactored out from django.db.models.query to avoid making the main module very\nlarge and/or so that they can be used by other modules without getting into\ncircular import difficulties.\n\"\"\"",
    "classes": [
        {
            "docstring": "\"\"\"\n    Encapsulate filters as objects that can then be combined logically (using\n    `&` and `|`).\n    \"\"\"",
            "name": "Q",
            "namespace": "django.db.models.query_utils.Q",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.db.models.query_utils.Q.__init__",
                    "class_name": "django.db.models.query_utils.Q",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_combine",
                    "namespace": "django.db.models.query_utils.Q._combine",
                    "class_name": "django.db.models.query_utils.Q",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__or__",
                    "namespace": "django.db.models.query_utils.Q.__or__",
                    "class_name": "django.db.models.query_utils.Q",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__and__",
                    "namespace": "django.db.models.query_utils.Q.__and__",
                    "class_name": "django.db.models.query_utils.Q",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__invert__",
                    "namespace": "django.db.models.query_utils.Q.__invert__",
                    "class_name": "django.db.models.query_utils.Q",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "resolve_expression",
                    "namespace": "django.db.models.query_utils.Q.resolve_expression",
                    "class_name": "django.db.models.query_utils.Q",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "deconstruct",
                    "namespace": "django.db.models.query_utils.Q.deconstruct",
                    "class_name": "django.db.models.query_utils.Q",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    A wrapper for a deferred-loading field. When the value is read from this\n    object the first time, the query is executed.\n    \"\"\"",
            "name": "DeferredAttribute",
            "namespace": "django.db.models.query_utils.DeferredAttribute",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.db.models.query_utils.DeferredAttribute.__init__",
                    "class_name": "django.db.models.query_utils.DeferredAttribute",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Retrieve and caches the value from the datastore on the first lookup.\n        Return the cached value.\n        \"\"\"",
                    "name": "__get__",
                    "namespace": "django.db.models.query_utils.DeferredAttribute.__get__",
                    "class_name": "django.db.models.query_utils.DeferredAttribute",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Check if the field value can be fetched from a parent field already\n        loaded in the instance. This can be done if the to-be fetched\n        field is a primary key field.\n        \"\"\"",
                    "name": "_check_parent_chain",
                    "namespace": "django.db.models.query_utils.DeferredAttribute._check_parent_chain",
                    "class_name": "django.db.models.query_utils.DeferredAttribute",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "",
            "name": "RegisterLookupMixin",
            "namespace": "django.db.models.query_utils.RegisterLookupMixin",
            "methods": [
                {
                    "docstring": "",
                    "name": "_get_lookup",
                    "namespace": "django.db.models.query_utils.RegisterLookupMixin._get_lookup",
                    "class_name": "django.db.models.query_utils.RegisterLookupMixin",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_lookups",
                    "namespace": "django.db.models.query_utils.RegisterLookupMixin.get_lookups",
                    "class_name": "django.db.models.query_utils.RegisterLookupMixin",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_lookup",
                    "namespace": "django.db.models.query_utils.RegisterLookupMixin.get_lookup",
                    "class_name": "django.db.models.query_utils.RegisterLookupMixin",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_transform",
                    "namespace": "django.db.models.query_utils.RegisterLookupMixin.get_transform",
                    "class_name": "django.db.models.query_utils.RegisterLookupMixin",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Merge dicts in reverse to preference the order of the original list. e.g.,\n        merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.\n        \"\"\"",
                    "name": "merge_dicts",
                    "namespace": "django.db.models.query_utils.RegisterLookupMixin.merge_dicts",
                    "class_name": "django.db.models.query_utils.RegisterLookupMixin",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_clear_cached_lookups",
                    "namespace": "django.db.models.query_utils.RegisterLookupMixin._clear_cached_lookups",
                    "class_name": "django.db.models.query_utils.RegisterLookupMixin",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "register_lookup",
                    "namespace": "django.db.models.query_utils.RegisterLookupMixin.register_lookup",
                    "class_name": "django.db.models.query_utils.RegisterLookupMixin",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Remove given lookup from cls lookups. For use in tests only as it's\n        not thread-safe.\n        \"\"\"",
                    "name": "_unregister_lookup",
                    "namespace": "django.db.models.query_utils.RegisterLookupMixin._unregister_lookup",
                    "class_name": "django.db.models.query_utils.RegisterLookupMixin",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"Specify custom filtering in the ON clause of SQL joins.\"\"\"",
            "name": "FilteredRelation",
            "namespace": "django.db.models.query_utils.FilteredRelation",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.db.models.query_utils.FilteredRelation.__init__",
                    "class_name": "django.db.models.query_utils.FilteredRelation",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__eq__",
                    "namespace": "django.db.models.query_utils.FilteredRelation.__eq__",
                    "class_name": "django.db.models.query_utils.FilteredRelation",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "clone",
                    "namespace": "django.db.models.query_utils.FilteredRelation.clone",
                    "class_name": "django.db.models.query_utils.FilteredRelation",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        QuerySet.annotate() only accepts expression-like arguments\n        (with a resolve_expression() method).\n        \"\"\"",
                    "name": "resolve_expression",
                    "namespace": "django.db.models.query_utils.FilteredRelation.resolve_expression",
                    "class_name": "django.db.models.query_utils.FilteredRelation",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "as_sql",
                    "namespace": "django.db.models.query_utils.FilteredRelation.as_sql",
                    "class_name": "django.db.models.query_utils.FilteredRelation",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        }
    ],
    "functions": [
        {
            "docstring": "",
            "name": "subclasses",
            "namespace": "django.db.models.query_utils.subclasses",
            "class_name": "",
            "module_name": "django.db.models.query_utils",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Return True if this field should be used to descend deeper for\n    select_related() purposes. Used by both the query construction code\n    (sql.query.fill_related_selections()) and the model instance creation code\n    (query.get_klass_info()).\n\n    Arguments:\n     * field - the field to be checked\n     * restricted - a boolean field, indicating if the field list has been\n       manually restricted using a requested clause)\n     * requested - The select_related() dictionary.\n     * load_fields - the set of fields to be loaded on this model\n     * reverse - boolean, True if we are checking a reverse select related\n    \"\"\"",
            "name": "select_related_descend",
            "namespace": "django.db.models.query_utils.select_related_descend",
            "class_name": "",
            "module_name": "django.db.models.query_utils",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Check if the lookup_parts contains references to the given annotations set.\n    Because the LOOKUP_SEP is contained in the default annotation names, check\n    each prefix of the lookup_parts for a match.\n    \"\"\"",
            "name": "refs_expression",
            "namespace": "django.db.models.query_utils.refs_expression",
            "class_name": "",
            "module_name": "django.db.models.query_utils",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Check that self.model is compatible with target_opts. Compatibility\n    is OK if:\n      1) model and opts match (where proxy inheritance is removed)\n      2) model is parent of opts' model or the other way around\n    \"\"\"",
            "name": "check_rel_lookup_compatibility",
            "namespace": "django.db.models.query_utils.check_rel_lookup_compatibility",
            "class_name": "",
            "module_name": "django.db.models.query_utils",
            "package_name": ""
        }
    ],
    "package_name": "django.db.models"
}