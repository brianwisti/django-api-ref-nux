{
    "namespace": "django.contrib.auth.middleware",
    "docstring": "",
    "classes": [
        {
            "docstring": "",
            "name": "AuthenticationMiddleware",
            "namespace": "django.contrib.auth.middleware.AuthenticationMiddleware",
            "methods": [
                {
                    "docstring": "",
                    "name": "process_request",
                    "namespace": "django.contrib.auth.middleware.AuthenticationMiddleware.process_request",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Middleware for utilizing web-server-provided authentication.\n\n    If request.user is not authenticated, then this middleware attempts to\n    authenticate the username passed in the ``REMOTE_USER`` request header.\n    If authentication is successful, the user is automatically logged in to\n    persist the user in the session.\n\n    The header used is configurable and defaults to ``REMOTE_USER``.  Subclass\n    this class and change the ``header`` attribute if you need to use a\n    different header.\n    \"\"\"",
            "name": "RemoteUserMiddleware",
            "namespace": "django.contrib.auth.middleware.RemoteUserMiddleware",
            "methods": [
                {
                    "docstring": "",
                    "name": "process_request",
                    "namespace": "django.contrib.auth.middleware.RemoteUserMiddleware.process_request",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Allow the backend to clean the username, if the backend defines a\n        clean_username method.\n        \"\"\"",
                    "name": "clean_username",
                    "namespace": "django.contrib.auth.middleware.RemoteUserMiddleware.clean_username",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Remove the current authenticated user in the request which is invalid\n        but only if the user is authenticated via the RemoteUserBackend.\n        \"\"\"",
                    "name": "_remove_invalid_user",
                    "namespace": "django.contrib.auth.middleware.RemoteUserMiddleware._remove_invalid_user",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Middleware for web-server provided authentication on logon pages.\n\n    Like RemoteUserMiddleware but keeps the user authenticated even if\n    the header (``REMOTE_USER``) is not found in the request. Useful\n    for setups when the external authentication via ``REMOTE_USER``\n    is only expected to happen on some \"logon\" URL and the rest of\n    the application wants to use Django's authentication mechanism.\n    \"\"\"",
            "name": "PersistentRemoteUserMiddleware",
            "namespace": "django.contrib.auth.middleware.PersistentRemoteUserMiddleware",
            "methods": []
        }
    ],
    "functions": [
        {
            "docstring": "",
            "name": "get_user",
            "namespace": "django.contrib.auth.middleware.get_user",
            "class_name": "",
            "module_name": "django.contrib.auth.middleware",
            "package_name": ""
        }
    ],
    "package_name": "django.contrib.auth"
}