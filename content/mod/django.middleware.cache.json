{
    "namespace": "django.middleware.cache",
    "docstring": "\"\"\"\nCache middleware. If enabled, each Django-powered page will be cached based on\nURL. The canonical way to enable cache middleware is to set\n``UpdateCacheMiddleware`` as your first piece of middleware, and\n``FetchFromCacheMiddleware`` as the last::\n\n    MIDDLEWARE = [\n        'django.middleware.cache.UpdateCacheMiddleware',\n        ...\n        'django.middleware.cache.FetchFromCacheMiddleware'\n    ]\n\nThis is counter-intuitive, but correct: ``UpdateCacheMiddleware`` needs to run\nlast during the response phase, which processes middleware bottom-up;\n``FetchFromCacheMiddleware`` needs to run last during the request phase, which\nprocesses middleware top-down.\n\nThe single-class ``CacheMiddleware`` can be used for some simple sites.\nHowever, if any other piece of middleware needs to affect the cache key, you'll\nneed to use the two-part ``UpdateCacheMiddleware`` and\n``FetchFromCacheMiddleware``. This'll most often happen when you're using\nDjango's ``LocaleMiddleware``.\n\nMore details about how the caching works:\n\n* Only GET or HEAD-requests with status code 200 are cached.\n\n* The number of seconds each page is stored for is set by the \"max-age\" section\n  of the response's \"Cache-Control\" header, falling back to the\n  CACHE_MIDDLEWARE_SECONDS setting if the section was not found.\n\n* This middleware expects that a HEAD request is answered with the same response\n  headers exactly like the corresponding GET request.\n\n* When a hit occurs, a shallow copy of the original response object is returned\n  from process_request.\n\n* Pages will be cached based on the contents of the request headers listed in\n  the response's \"Vary\" header.\n\n* This middleware also sets ETag, Last-Modified, Expires and Cache-Control\n  headers on the response object.\n\n\"\"\"",
    "classes": [
        {
            "docstring": "\"\"\"\n    Response-phase cache middleware that updates the cache if the response is\n    cacheable.\n\n    Must be used as part of the two-part update/fetch cache middleware.\n    UpdateCacheMiddleware must be the first piece of middleware in MIDDLEWARE\n    so that it'll get called last during the response phase.\n    \"\"\"",
            "name": "UpdateCacheMiddleware",
            "namespace": "django.middleware.cache.UpdateCacheMiddleware",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.middleware.cache.UpdateCacheMiddleware.__init__",
                    "class_name": "django.middleware.cache.UpdateCacheMiddleware",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_should_update_cache",
                    "namespace": "django.middleware.cache.UpdateCacheMiddleware._should_update_cache",
                    "class_name": "django.middleware.cache.UpdateCacheMiddleware",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Set the cache, if needed.\"\"\"",
                    "name": "process_response",
                    "namespace": "django.middleware.cache.UpdateCacheMiddleware.process_response",
                    "class_name": "django.middleware.cache.UpdateCacheMiddleware",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Request-phase cache middleware that fetches a page from the cache.\n\n    Must be used as part of the two-part update/fetch cache middleware.\n    FetchFromCacheMiddleware must be the last piece of middleware in MIDDLEWARE\n    so that it'll get called last during the request phase.\n    \"\"\"",
            "name": "FetchFromCacheMiddleware",
            "namespace": "django.middleware.cache.FetchFromCacheMiddleware",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.middleware.cache.FetchFromCacheMiddleware.__init__",
                    "class_name": "django.middleware.cache.FetchFromCacheMiddleware",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Check whether the page is already cached and return the cached\n        version if available.\n        \"\"\"",
                    "name": "process_request",
                    "namespace": "django.middleware.cache.FetchFromCacheMiddleware.process_request",
                    "class_name": "django.middleware.cache.FetchFromCacheMiddleware",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Cache middleware that provides basic behavior for many simple sites.\n\n    Also used as the hook point for the cache decorator, which is generated\n    using the decorator-from-middleware utility.\n    \"\"\"",
            "name": "CacheMiddleware",
            "namespace": "django.middleware.cache.CacheMiddleware",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.middleware.cache.CacheMiddleware.__init__",
                    "class_name": "django.middleware.cache.CacheMiddleware",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        }
    ],
    "functions": [],
    "package_name": "django.middleware"
}