{
    "docstring": "",
    "namespace": "django.contrib.auth.password_validation",
    "classes": [
        {
            "docstring": "\"\"\"\n    Validate whether the password is of a minimum length.\n    \"\"\"",
            "name": "MinimumLengthValidator",
            "parent_name": "django.contrib.auth.password_validation"
        },
        {
            "docstring": "\"\"\"\n    Validate whether the password is sufficiently different from the user's\n    attributes.\n\n    If no specific attributes are provided, look at a sensible list of\n    defaults. Attributes that don't exist are ignored. Comparison is made to\n    not only the full attribute value, but also its components, so that, for\n    example, a password is validated against either part of an email address,\n    as well as the full address.\n    \"\"\"",
            "name": "UserAttributeSimilarityValidator",
            "parent_name": "django.contrib.auth.password_validation"
        },
        {
            "docstring": "\"\"\"\n    Validate whether the password is a common password.\n\n    The password is rejected if it occurs in a provided list of passwords,\n    which may be gzipped. The list Django ships with contains 20000 common\n    passwords (lowercased and deduplicated), created by Royce Williams:\n    https://gist.github.com/roycewilliams/281ce539915a947a23db17137d91aeb7\n    The password list must be lowercased to match the comparison in validate().\n    \"\"\"",
            "name": "CommonPasswordValidator",
            "parent_name": "django.contrib.auth.password_validation"
        },
        {
            "docstring": "\"\"\"\n    Validate whether the password is alphanumeric.\n    \"\"\"",
            "name": "NumericPasswordValidator",
            "parent_name": "django.contrib.auth.password_validation"
        }
    ]
}