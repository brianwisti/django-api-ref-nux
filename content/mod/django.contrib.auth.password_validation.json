{
    "namespace": "django.contrib.auth.password_validation",
    "docstring": "",
    "classes": [
        {
            "docstring": "\"\"\"\n    Validate whether the password is of a minimum length.\n    \"\"\"",
            "name": "MinimumLengthValidator",
            "namespace": "django.contrib.auth.password_validation.MinimumLengthValidator",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.contrib.auth.password_validation.MinimumLengthValidator.__init__",
                    "class_name": "django.contrib.auth.password_validation.MinimumLengthValidator",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "validate",
                    "namespace": "django.contrib.auth.password_validation.MinimumLengthValidator.validate",
                    "class_name": "django.contrib.auth.password_validation.MinimumLengthValidator",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_help_text",
                    "namespace": "django.contrib.auth.password_validation.MinimumLengthValidator.get_help_text",
                    "class_name": "django.contrib.auth.password_validation.MinimumLengthValidator",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Validate whether the password is sufficiently different from the user's\n    attributes.\n\n    If no specific attributes are provided, look at a sensible list of\n    defaults. Attributes that don't exist are ignored. Comparison is made to\n    not only the full attribute value, but also its components, so that, for\n    example, a password is validated against either part of an email address,\n    as well as the full address.\n    \"\"\"",
            "name": "UserAttributeSimilarityValidator",
            "namespace": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator.__init__",
                    "class_name": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "validate",
                    "namespace": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator.validate",
                    "class_name": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_help_text",
                    "namespace": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator.get_help_text",
                    "class_name": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Validate whether the password is a common password.\n\n    The password is rejected if it occurs in a provided list of passwords,\n    which may be gzipped. The list Django ships with contains 20000 common\n    passwords (lowercased and deduplicated), created by Royce Williams:\n    https://gist.github.com/roycewilliams/281ce539915a947a23db17137d91aeb7\n    The password list must be lowercased to match the comparison in validate().\n    \"\"\"",
            "name": "CommonPasswordValidator",
            "namespace": "django.contrib.auth.password_validation.CommonPasswordValidator",
            "methods": [
                {
                    "docstring": "",
                    "name": "DEFAULT_PASSWORD_LIST_PATH",
                    "namespace": "django.contrib.auth.password_validation.CommonPasswordValidator.DEFAULT_PASSWORD_LIST_PATH",
                    "class_name": "django.contrib.auth.password_validation.CommonPasswordValidator",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.contrib.auth.password_validation.CommonPasswordValidator.__init__",
                    "class_name": "django.contrib.auth.password_validation.CommonPasswordValidator",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "validate",
                    "namespace": "django.contrib.auth.password_validation.CommonPasswordValidator.validate",
                    "class_name": "django.contrib.auth.password_validation.CommonPasswordValidator",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_help_text",
                    "namespace": "django.contrib.auth.password_validation.CommonPasswordValidator.get_help_text",
                    "class_name": "django.contrib.auth.password_validation.CommonPasswordValidator",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Validate whether the password is alphanumeric.\n    \"\"\"",
            "name": "NumericPasswordValidator",
            "namespace": "django.contrib.auth.password_validation.NumericPasswordValidator",
            "methods": [
                {
                    "docstring": "",
                    "name": "validate",
                    "namespace": "django.contrib.auth.password_validation.NumericPasswordValidator.validate",
                    "class_name": "django.contrib.auth.password_validation.NumericPasswordValidator",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_help_text",
                    "namespace": "django.contrib.auth.password_validation.NumericPasswordValidator.get_help_text",
                    "class_name": "django.contrib.auth.password_validation.NumericPasswordValidator",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        }
    ],
    "functions": [
        {
            "docstring": "",
            "name": "get_default_password_validators",
            "namespace": "django.contrib.auth.password_validation.get_default_password_validators",
            "class_name": "",
            "module_name": "django.contrib.auth.password_validation",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "get_password_validators",
            "namespace": "django.contrib.auth.password_validation.get_password_validators",
            "class_name": "",
            "module_name": "django.contrib.auth.password_validation",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Validate whether the password meets all validator requirements.\n\n    If the password is valid, return ``None``.\n    If the password is invalid, raise ValidationError with all error messages.\n    \"\"\"",
            "name": "validate_password",
            "namespace": "django.contrib.auth.password_validation.validate_password",
            "class_name": "",
            "module_name": "django.contrib.auth.password_validation",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Inform all validators that have implemented a password_changed() method\n    that the password has been changed.\n    \"\"\"",
            "name": "password_changed",
            "namespace": "django.contrib.auth.password_validation.password_changed",
            "class_name": "",
            "module_name": "django.contrib.auth.password_validation",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Return a list of all help texts of all configured validators.\n    \"\"\"",
            "name": "password_validators_help_texts",
            "namespace": "django.contrib.auth.password_validation.password_validators_help_texts",
            "class_name": "",
            "module_name": "django.contrib.auth.password_validation",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Return an HTML string with all help texts of all configured validators\n    in an <ul>.\n    \"\"\"",
            "name": "_password_validators_help_text_html",
            "namespace": "django.contrib.auth.password_validation._password_validators_help_text_html",
            "class_name": "",
            "module_name": "django.contrib.auth.password_validation",
            "package_name": ""
        }
    ],
    "package_name": "django.contrib.auth"
}