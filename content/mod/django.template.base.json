{
    "namespace": "django.template.base",
    "docstring": "\"\"\"\nThis is the Django template system.\n\nHow it works:\n\nThe Lexer.tokenize() method converts a template string (i.e., a string\ncontaining markup with custom template tags) to tokens, which can be either\nplain text (TokenType.TEXT), variables (TokenType.VAR), or block statements\n(TokenType.BLOCK).\n\nThe Parser() class takes a list of tokens in its constructor, and its parse()\nmethod returns a compiled template -- which is, under the hood, a list of\nNode objects.\n\nEach Node is responsible for creating some sort of output -- e.g. simple text\n(TextNode), variable values in a given context (VariableNode), results of basic\nlogic (IfNode), results of looping (ForNode), or anything else. The core Node\ntypes are TextNode, VariableNode, IfNode and ForNode, but plugin modules can\ndefine their own custom node types.\n\nEach Node has a render() method, which takes a Context and returns a string of\nthe rendered node. For example, the render() method of a Variable Node returns\nthe variable's value as a string. The render() method of a ForNode returns the\nrendered output of whatever was inside the loop, recursively.\n\nThe Template class is a convenient wrapper that takes care of template\ncompilation and rendering.\n\nUsage:\n\nThe only thing you should ever use directly in this file is the Template class.\nCreate a compiled template object with a template_string, then call render()\nwith a context. In the compilation stage, the TemplateSyntaxError exception\nwill be raised if the template doesn't have proper syntax.\n\nSample code:\n\n>>> from django import template\n>>> s = '<html>{% if test %}<h1>{{ varvalue }}</h1>{% endif %}</html>'\n>>> t = template.Template(s)\n\n(t is now a compiled template, and its render() method can be called multiple\ntimes with multiple contexts)\n\n>>> c = template.Context({'test':True, 'varvalue': 'Hello'})\n>>> t.render(c)\n'<html><h1>Hello</h1></html>'\n>>> c = template.Context({'test':False, 'varvalue': 'Hello'})\n>>> t.render(c)\n'<html></html>'\n\"\"\"",
    "classes": [
        {
            "docstring": "",
            "name": "TokenType",
            "namespace": "django.template.base.TokenType"
        },
        {
            "docstring": "",
            "name": "VariableDoesNotExist",
            "namespace": "django.template.base.VariableDoesNotExist"
        },
        {
            "docstring": "",
            "name": "Origin",
            "namespace": "django.template.base.Origin"
        },
        {
            "docstring": "",
            "name": "Template",
            "namespace": "django.template.base.Template"
        },
        {
            "docstring": "",
            "name": "Token",
            "namespace": "django.template.base.Token"
        },
        {
            "docstring": "",
            "name": "Lexer",
            "namespace": "django.template.base.Lexer"
        },
        {
            "docstring": "",
            "name": "DebugLexer",
            "namespace": "django.template.base.DebugLexer"
        },
        {
            "docstring": "",
            "name": "Parser",
            "namespace": "django.template.base.Parser"
        },
        {
            "docstring": "\"\"\"\n    Parse a variable token and its optional filters (all as a single string),\n    and return a list of tuples of the filter name and arguments.\n    Sample::\n\n        >>> token = 'variable|default:\"Default value\"|date:\"Y-m-d\"'\n        >>> p = Parser('')\n        >>> fe = FilterExpression(token, p)\n        >>> len(fe.filters)\n        2\n        >>> fe.var\n        <Variable: 'variable'>\n    \"\"\"",
            "name": "FilterExpression",
            "namespace": "django.template.base.FilterExpression"
        },
        {
            "docstring": "\"\"\"\n    A template variable, resolvable against a given context. The variable may\n    be a hard-coded string (if it begins and ends with single or double quote\n    marks)::\n\n        >>> c = {'article': {'section':'News'}}\n        >>> Variable('article.section').resolve(c)\n        'News'\n        >>> Variable('article').resolve(c)\n        {'section': 'News'}\n        >>> class AClass: pass\n        >>> c = AClass()\n        >>> c.article = AClass()\n        >>> c.article.section = 'News'\n\n    (The example assumes VARIABLE_ATTRIBUTE_SEPARATOR is '.')\n    \"\"\"",
            "name": "Variable",
            "namespace": "django.template.base.Variable"
        },
        {
            "docstring": "",
            "name": "Node",
            "namespace": "django.template.base.Node"
        },
        {
            "docstring": "",
            "name": "NodeList",
            "namespace": "django.template.base.NodeList"
        },
        {
            "docstring": "",
            "name": "TextNode",
            "namespace": "django.template.base.TextNode"
        },
        {
            "docstring": "",
            "name": "VariableNode",
            "namespace": "django.template.base.VariableNode"
        }
    ],
    "package_name": "django.template"
}