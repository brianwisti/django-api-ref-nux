{
    "namespace": "django.db.models.base",
    "docstring": "",
    "classes": [
        {
            "docstring": "",
            "name": "Deferred",
            "namespace": "django.db.models.base.Deferred",
            "methods": [
                {
                    "docstring": "",
                    "name": "__repr__",
                    "namespace": "django.db.models.base.Deferred.__repr__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__str__",
                    "namespace": "django.db.models.base.Deferred.__str__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"Metaclass for all models.\"\"\"",
            "name": "ModelBase",
            "namespace": "django.db.models.base.ModelBase",
            "methods": [
                {
                    "docstring": "",
                    "name": "__new__",
                    "namespace": "django.db.models.base.ModelBase.__new__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "add_to_class",
                    "namespace": "django.db.models.base.ModelBase.add_to_class",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Create some methods once self._meta has been populated.\"\"\"",
                    "name": "_prepare",
                    "namespace": "django.db.models.base.ModelBase._prepare",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_base_manager",
                    "namespace": "django.db.models.base.ModelBase._base_manager",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_default_manager",
                    "namespace": "django.db.models.base.ModelBase._default_manager",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "",
            "name": "ModelStateFieldsCacheDescriptor",
            "namespace": "django.db.models.base.ModelStateFieldsCacheDescriptor",
            "methods": [
                {
                    "docstring": "",
                    "name": "__get__",
                    "namespace": "django.db.models.base.ModelStateFieldsCacheDescriptor.__get__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"Store model instance state.\"\"\"",
            "name": "ModelState",
            "namespace": "django.db.models.base.ModelState",
            "methods": []
        },
        {
            "docstring": "",
            "name": "Model",
            "namespace": "django.db.models.base.Model",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.db.models.base.Model.__init__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "from_db",
                    "namespace": "django.db.models.base.Model.from_db",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__repr__",
                    "namespace": "django.db.models.base.Model.__repr__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__str__",
                    "namespace": "django.db.models.base.Model.__str__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__eq__",
                    "namespace": "django.db.models.base.Model.__eq__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__hash__",
                    "namespace": "django.db.models.base.Model.__hash__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__reduce__",
                    "namespace": "django.db.models.base.Model.__reduce__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Hook to allow choosing the attributes to pickle.\"\"\"",
                    "name": "__getstate__",
                    "namespace": "django.db.models.base.Model.__getstate__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__setstate__",
                    "namespace": "django.db.models.base.Model.__setstate__",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_get_pk_val",
                    "namespace": "django.db.models.base.Model._get_pk_val",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_set_pk_val",
                    "namespace": "django.db.models.base.Model._set_pk_val",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return a set containing names of deferred fields for this instance.\n        \"\"\"",
                    "name": "get_deferred_fields",
                    "namespace": "django.db.models.base.Model.get_deferred_fields",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Reload field values from the database.\n\n        By default, the reloading happens from the database this instance was\n        loaded from, or by the read router if this instance wasn't loaded from\n        any database. The using parameter will override the default.\n\n        Fields can be used to specify which fields to reload. The fields\n        should be an iterable of field attnames. If fields is None, then\n        all non-deferred fields are reloaded.\n\n        When accessing deferred fields of an instance, the deferred loading\n        of the field will call this method.\n        \"\"\"",
                    "name": "refresh_from_db",
                    "namespace": "django.db.models.base.Model.refresh_from_db",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return the value of the field name for this instance. If the field is\n        a foreign key, return the id value instead of the object. If there's\n        no Field object with this name on the model, return the model\n        attribute's value.\n\n        Used to serialize a field's value (in the serializer, or form output,\n        for example). Normally, you would just access the attribute directly\n        and not use this method.\n        \"\"\"",
                    "name": "serializable_value",
                    "namespace": "django.db.models.base.Model.serializable_value",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Save the current instance. Override this in a subclass if you want to\n        control the saving process.\n\n        The 'force_insert' and 'force_update' parameters can be used to insist\n        that the \"save\" must be an SQL insert or update (or equivalent for\n        non-SQL backends), respectively. Normally, they should not be set.\n        \"\"\"",
                    "name": "save",
                    "namespace": "django.db.models.base.Model.save",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Handle the parts of saving which should be done only once per save,\n        yet need to be done in raw saves, too. This includes some sanity\n        checks and signal sending.\n\n        The 'raw' argument is telling save_base not to save any parent\n        models and not to do any changes to the values before save. This\n        is used by fixture loading.\n        \"\"\"",
                    "name": "save_base",
                    "namespace": "django.db.models.base.Model.save_base",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Save all the parents of cls using values from self.\"\"\"",
                    "name": "_save_parents",
                    "namespace": "django.db.models.base.Model._save_parents",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Do the heavy-lifting involved in saving. Update or insert the data\n        for a single table.\n        \"\"\"",
                    "name": "_save_table",
                    "namespace": "django.db.models.base.Model._save_table",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Try to update the model. Return True if the model was updated (if an\n        update query was done and a matching row was found in the DB).\n        \"\"\"",
                    "name": "_do_update",
                    "namespace": "django.db.models.base.Model._do_update",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Do an INSERT. If returning_fields is defined then this method should\n        return the newly created data for the model.\n        \"\"\"",
                    "name": "_do_insert",
                    "namespace": "django.db.models.base.Model._do_insert",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_prepare_related_fields_for_save",
                    "namespace": "django.db.models.base.Model._prepare_related_fields_for_save",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "delete",
                    "namespace": "django.db.models.base.Model.delete",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_get_FIELD_display",
                    "namespace": "django.db.models.base.Model._get_FIELD_display",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_get_next_or_previous_by_FIELD",
                    "namespace": "django.db.models.base.Model._get_next_or_previous_by_FIELD",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_get_next_or_previous_in_order",
                    "namespace": "django.db.models.base.Model._get_next_or_previous_in_order",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "prepare_database_save",
                    "namespace": "django.db.models.base.Model.prepare_database_save",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Hook for doing any extra model-wide validation after clean() has been\n        called on every field by self.clean_fields. Any ValidationError raised\n        by this method will not be associated with a particular field; it will\n        have a special-case association with the field defined by NON_FIELD_ERRORS.\n        \"\"\"",
                    "name": "clean",
                    "namespace": "django.db.models.base.Model.clean",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Check unique constraints on the model and raise ValidationError if any\n        failed.\n        \"\"\"",
                    "name": "validate_unique",
                    "namespace": "django.db.models.base.Model.validate_unique",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return a list of checks to perform. Since validate_unique() could be\n        called from a ModelForm, some fields may have been excluded; we can't\n        perform a unique check on a model that is missing fields involved\n        in that check. Fields that did not validate should also be excluded,\n        but they need to be passed in via the exclude argument.\n        \"\"\"",
                    "name": "_get_unique_checks",
                    "namespace": "django.db.models.base.Model._get_unique_checks",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_perform_unique_checks",
                    "namespace": "django.db.models.base.Model._perform_unique_checks",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_perform_date_checks",
                    "namespace": "django.db.models.base.Model._perform_date_checks",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "date_error_message",
                    "namespace": "django.db.models.base.Model.date_error_message",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "unique_error_message",
                    "namespace": "django.db.models.base.Model.unique_error_message",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Call clean_fields(), clean(), and validate_unique() on the model.\n        Raise a ValidationError for any errors that occur.\n        \"\"\"",
                    "name": "full_clean",
                    "namespace": "django.db.models.base.Model.full_clean",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Clean all fields and raise a ValidationError containing a dict\n        of all validation errors if any occur.\n        \"\"\"",
                    "name": "clean_fields",
                    "namespace": "django.db.models.base.Model.clean_fields",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "check",
                    "namespace": "django.db.models.base.Model.check",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_default_pk",
                    "namespace": "django.db.models.base.Model._check_default_pk",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Check if the swapped model exists.\"\"\"",
                    "name": "_check_swappable",
                    "namespace": "django.db.models.base.Model._check_swappable",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_model",
                    "namespace": "django.db.models.base.Model._check_model",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Perform all manager checks.\"\"\"",
                    "name": "_check_managers",
                    "namespace": "django.db.models.base.Model._check_managers",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Perform all field checks.\"\"\"",
                    "name": "_check_fields",
                    "namespace": "django.db.models.base.Model._check_fields",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\" Check if no relationship model is used by more than one m2m field.\n        \"\"\"",
                    "name": "_check_m2m_through_same_relationship",
                    "namespace": "django.db.models.base.Model._check_m2m_through_same_relationship",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Check if `id` field is a primary key.\"\"\"",
                    "name": "_check_id_field",
                    "namespace": "django.db.models.base.Model._check_id_field",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Forbid field shadowing in multi-table inheritance.\"\"\"",
                    "name": "_check_field_name_clashes",
                    "namespace": "django.db.models.base.Model._check_field_name_clashes",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_column_name_clashes",
                    "namespace": "django.db.models.base.Model._check_column_name_clashes",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_model_name_db_lookup_clashes",
                    "namespace": "django.db.models.base.Model._check_model_name_db_lookup_clashes",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_property_name_related_field_accessor_clashes",
                    "namespace": "django.db.models.base.Model._check_property_name_related_field_accessor_clashes",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_single_primary_key",
                    "namespace": "django.db.models.base.Model._check_single_primary_key",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Check the value of \"index_together\" option.\"\"\"",
                    "name": "_check_index_together",
                    "namespace": "django.db.models.base.Model._check_index_together",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Check the value of \"unique_together\" option.\"\"\"",
                    "name": "_check_unique_together",
                    "namespace": "django.db.models.base.Model._check_unique_together",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Check fields, names, and conditions of indexes.\"\"\"",
                    "name": "_check_indexes",
                    "namespace": "django.db.models.base.Model._check_indexes",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_local_fields",
                    "namespace": "django.db.models.base.Model._check_local_fields",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Check \"ordering\" option -- is it a list of strings and do all fields\n        exist?\n        \"\"\"",
                    "name": "_check_ordering",
                    "namespace": "django.db.models.base.Model._check_ordering",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Check that any auto-generated column names are shorter than the limits\n        for each database in which the model will be created.\n        \"\"\"",
                    "name": "_check_long_column_names",
                    "namespace": "django.db.models.base.Model._check_long_column_names",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_get_expr_references",
                    "namespace": "django.db.models.base.Model._get_expr_references",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_constraints",
                    "namespace": "django.db.models.base.Model._check_constraints",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        }
    ],
    "functions": [
        {
            "docstring": "\"\"\"\n    Create exception subclass. Used by ModelBase below.\n\n    The exception is created in a way that allows it to be pickled, assuming\n    that the returned exception class will be added as an attribute to the\n    'attached_to' class.\n    \"\"\"",
            "name": "subclass_exception",
            "namespace": "django.db.models.base.subclass_exception",
            "class_name": "",
            "module_name": "django.db.models.base",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "_has_contribute_to_class",
            "namespace": "django.db.models.base._has_contribute_to_class",
            "class_name": "",
            "module_name": "django.db.models.base",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "method_set_order",
            "namespace": "django.db.models.base.method_set_order",
            "class_name": "",
            "module_name": "django.db.models.base",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "method_get_order",
            "namespace": "django.db.models.base.method_get_order",
            "class_name": "",
            "module_name": "django.db.models.base",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "make_foreign_order_accessors",
            "namespace": "django.db.models.base.make_foreign_order_accessors",
            "class_name": "",
            "module_name": "django.db.models.base",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Used to unpickle Model subclasses with deferred fields.\"\"\"",
            "name": "model_unpickle",
            "namespace": "django.db.models.base.model_unpickle",
            "class_name": "",
            "module_name": "django.db.models.base",
            "package_name": ""
        }
    ],
    "package_name": "django.db.models"
}