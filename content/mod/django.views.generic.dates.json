{
    "namespace": "django.views.generic.dates",
    "docstring": "",
    "classes": [
        {
            "docstring": "\"\"\"Mixin for views manipulating year-based data.\"\"\"",
            "name": "YearMixin",
            "namespace": "django.views.generic.dates.YearMixin",
            "methods": [
                {
                    "docstring": "\"\"\"\n        Get a year format string in strptime syntax to be used to parse the\n        year from url variables.\n        \"\"\"",
                    "name": "get_year_format",
                    "namespace": "django.views.generic.dates.YearMixin.get_year_format",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the year for which this view should display data.\"\"\"",
                    "name": "get_year",
                    "namespace": "django.views.generic.dates.YearMixin.get_year",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Get the next valid year.\"\"\"",
                    "name": "get_next_year",
                    "namespace": "django.views.generic.dates.YearMixin.get_next_year",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Get the previous valid year.\"\"\"",
                    "name": "get_previous_year",
                    "namespace": "django.views.generic.dates.YearMixin.get_previous_year",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return the start date of the next interval.\n\n        The interval is defined by start date <= item date < next start date.\n        \"\"\"",
                    "name": "_get_next_year",
                    "namespace": "django.views.generic.dates.YearMixin._get_next_year",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the start date of the current interval.\"\"\"",
                    "name": "_get_current_year",
                    "namespace": "django.views.generic.dates.YearMixin._get_current_year",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"Mixin for views manipulating month-based data.\"\"\"",
            "name": "MonthMixin",
            "namespace": "django.views.generic.dates.MonthMixin",
            "methods": [
                {
                    "docstring": "\"\"\"\n        Get a month format string in strptime syntax to be used to parse the\n        month from url variables.\n        \"\"\"",
                    "name": "get_month_format",
                    "namespace": "django.views.generic.dates.MonthMixin.get_month_format",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the month for which this view should display data.\"\"\"",
                    "name": "get_month",
                    "namespace": "django.views.generic.dates.MonthMixin.get_month",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Get the next valid month.\"\"\"",
                    "name": "get_next_month",
                    "namespace": "django.views.generic.dates.MonthMixin.get_next_month",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Get the previous valid month.\"\"\"",
                    "name": "get_previous_month",
                    "namespace": "django.views.generic.dates.MonthMixin.get_previous_month",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return the start date of the next interval.\n\n        The interval is defined by start date <= item date < next start date.\n        \"\"\"",
                    "name": "_get_next_month",
                    "namespace": "django.views.generic.dates.MonthMixin._get_next_month",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the start date of the previous interval.\"\"\"",
                    "name": "_get_current_month",
                    "namespace": "django.views.generic.dates.MonthMixin._get_current_month",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"Mixin for views manipulating day-based data.\"\"\"",
            "name": "DayMixin",
            "namespace": "django.views.generic.dates.DayMixin",
            "methods": [
                {
                    "docstring": "\"\"\"\n        Get a day format string in strptime syntax to be used to parse the day\n        from url variables.\n        \"\"\"",
                    "name": "get_day_format",
                    "namespace": "django.views.generic.dates.DayMixin.get_day_format",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the day for which this view should display data.\"\"\"",
                    "name": "get_day",
                    "namespace": "django.views.generic.dates.DayMixin.get_day",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Get the next valid day.\"\"\"",
                    "name": "get_next_day",
                    "namespace": "django.views.generic.dates.DayMixin.get_next_day",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Get the previous valid day.\"\"\"",
                    "name": "get_previous_day",
                    "namespace": "django.views.generic.dates.DayMixin.get_previous_day",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return the start date of the next interval.\n\n        The interval is defined by start date <= item date < next start date.\n        \"\"\"",
                    "name": "_get_next_day",
                    "namespace": "django.views.generic.dates.DayMixin._get_next_day",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the start date of the current interval.\"\"\"",
                    "name": "_get_current_day",
                    "namespace": "django.views.generic.dates.DayMixin._get_current_day",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"Mixin for views manipulating week-based data.\"\"\"",
            "name": "WeekMixin",
            "namespace": "django.views.generic.dates.WeekMixin",
            "methods": [
                {
                    "docstring": "\"\"\"\n        Get a week format string in strptime syntax to be used to parse the\n        week from url variables.\n        \"\"\"",
                    "name": "get_week_format",
                    "namespace": "django.views.generic.dates.WeekMixin.get_week_format",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the week for which this view should display data.\"\"\"",
                    "name": "get_week",
                    "namespace": "django.views.generic.dates.WeekMixin.get_week",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Get the next valid week.\"\"\"",
                    "name": "get_next_week",
                    "namespace": "django.views.generic.dates.WeekMixin.get_next_week",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Get the previous valid week.\"\"\"",
                    "name": "get_previous_week",
                    "namespace": "django.views.generic.dates.WeekMixin.get_previous_week",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return the start date of the next interval.\n\n        The interval is defined by start date <= item date < next start date.\n        \"\"\"",
                    "name": "_get_next_week",
                    "namespace": "django.views.generic.dates.WeekMixin._get_next_week",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the start date of the current interval.\"\"\"",
                    "name": "_get_current_week",
                    "namespace": "django.views.generic.dates.WeekMixin._get_current_week",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return the weekday for a given date.\n\n        The first day according to the week format is 0 and the last day is 6.\n        \"\"\"",
                    "name": "_get_weekday",
                    "namespace": "django.views.generic.dates.WeekMixin._get_weekday",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"Mixin class for views manipulating date-based data.\"\"\"",
            "name": "DateMixin",
            "namespace": "django.views.generic.dates.DateMixin",
            "methods": [
                {
                    "docstring": "\"\"\"Get the name of the date field to be used to filter by.\"\"\"",
                    "name": "get_date_field",
                    "namespace": "django.views.generic.dates.DateMixin.get_date_field",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return `True` if the view should be allowed to display objects from\n        the future.\n        \"\"\"",
                    "name": "get_allow_future",
                    "namespace": "django.views.generic.dates.DateMixin.get_allow_future",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return `True` if the date field is a `DateTimeField` and `False`\n        if it's a `DateField`.\n        \"\"\"",
                    "name": "uses_datetime_field",
                    "namespace": "django.views.generic.dates.DateMixin.uses_datetime_field",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Convert a date into a datetime when the date field is a DateTimeField.\n\n        When time zone support is enabled, `date` is assumed to be in the\n        current time zone, so that displayed items are consistent with the URL.\n        \"\"\"",
                    "name": "_make_date_lookup_arg",
                    "namespace": "django.views.generic.dates.DateMixin._make_date_lookup_arg",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Get the lookup kwargs for filtering on a single date.\n\n        If the date field is a DateTimeField, we can't just filter on\n        date_field=date because that doesn't take the time into account.\n        \"\"\"",
                    "name": "_make_single_date_lookup",
                    "namespace": "django.views.generic.dates.DateMixin._make_single_date_lookup",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"Abstract base class for date-based views displaying a list of objects.\"\"\"",
            "name": "BaseDateListView",
            "namespace": "django.views.generic.dates.BaseDateListView",
            "methods": [
                {
                    "docstring": "",
                    "name": "get",
                    "namespace": "django.views.generic.dates.BaseDateListView.get",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Obtain the list of dates and items.\"\"\"",
                    "name": "get_dated_items",
                    "namespace": "django.views.generic.dates.BaseDateListView.get_dated_items",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return the field or fields to use for ordering the queryset; use the\n        date field by default.\n        \"\"\"",
                    "name": "get_ordering",
                    "namespace": "django.views.generic.dates.BaseDateListView.get_ordering",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Get a queryset properly filtered according to `allow_future` and any\n        extra lookup kwargs.\n        \"\"\"",
                    "name": "get_dated_queryset",
                    "namespace": "django.views.generic.dates.BaseDateListView.get_dated_queryset",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Get the aggregation period for the list of dates: 'year', 'month', or\n        'day'.\n        \"\"\"",
                    "name": "get_date_list_period",
                    "namespace": "django.views.generic.dates.BaseDateListView.get_date_list_period",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Get a date list by calling `queryset.dates/datetimes()`, checking\n        along the way for empty lists that aren't allowed.\n        \"\"\"",
                    "name": "get_date_list",
                    "namespace": "django.views.generic.dates.BaseDateListView.get_date_list",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Base class for archives of date-based items. Requires a response mixin.\n    \"\"\"",
            "name": "BaseArchiveIndexView",
            "namespace": "django.views.generic.dates.BaseArchiveIndexView",
            "methods": [
                {
                    "docstring": "\"\"\"Return (date_list, items, extra_context) for this request.\"\"\"",
                    "name": "get_dated_items",
                    "namespace": "django.views.generic.dates.BaseArchiveIndexView.get_dated_items",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"Top-level archive of date-based items.\"\"\"",
            "name": "ArchiveIndexView",
            "namespace": "django.views.generic.dates.ArchiveIndexView",
            "methods": []
        },
        {
            "docstring": "\"\"\"List of objects published in a given year.\"\"\"",
            "name": "BaseYearArchiveView",
            "namespace": "django.views.generic.dates.BaseYearArchiveView",
            "methods": [
                {
                    "docstring": "\"\"\"Return (date_list, items, extra_context) for this request.\"\"\"",
                    "name": "get_dated_items",
                    "namespace": "django.views.generic.dates.BaseYearArchiveView.get_dated_items",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return `True` if this view should contain the full list of objects in\n        the given year.\n        \"\"\"",
                    "name": "get_make_object_list",
                    "namespace": "django.views.generic.dates.BaseYearArchiveView.get_make_object_list",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"List of objects published in a given year.\"\"\"",
            "name": "YearArchiveView",
            "namespace": "django.views.generic.dates.YearArchiveView",
            "methods": []
        },
        {
            "docstring": "\"\"\"List of objects published in a given month.\"\"\"",
            "name": "BaseMonthArchiveView",
            "namespace": "django.views.generic.dates.BaseMonthArchiveView",
            "methods": [
                {
                    "docstring": "\"\"\"Return (date_list, items, extra_context) for this request.\"\"\"",
                    "name": "get_dated_items",
                    "namespace": "django.views.generic.dates.BaseMonthArchiveView.get_dated_items",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"List of objects published in a given month.\"\"\"",
            "name": "MonthArchiveView",
            "namespace": "django.views.generic.dates.MonthArchiveView",
            "methods": []
        },
        {
            "docstring": "\"\"\"List of objects published in a given week.\"\"\"",
            "name": "BaseWeekArchiveView",
            "namespace": "django.views.generic.dates.BaseWeekArchiveView",
            "methods": [
                {
                    "docstring": "\"\"\"Return (date_list, items, extra_context) for this request.\"\"\"",
                    "name": "get_dated_items",
                    "namespace": "django.views.generic.dates.BaseWeekArchiveView.get_dated_items",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"List of objects published in a given week.\"\"\"",
            "name": "WeekArchiveView",
            "namespace": "django.views.generic.dates.WeekArchiveView",
            "methods": []
        },
        {
            "docstring": "\"\"\"List of objects published on a given day.\"\"\"",
            "name": "BaseDayArchiveView",
            "namespace": "django.views.generic.dates.BaseDayArchiveView",
            "methods": [
                {
                    "docstring": "\"\"\"Return (date_list, items, extra_context) for this request.\"\"\"",
                    "name": "get_dated_items",
                    "namespace": "django.views.generic.dates.BaseDayArchiveView.get_dated_items",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Do the actual heavy lifting of getting the dated items; this accepts a\n        date object so that TodayArchiveView can be trivial.\n        \"\"\"",
                    "name": "_get_dated_items",
                    "namespace": "django.views.generic.dates.BaseDayArchiveView._get_dated_items",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"List of objects published on a given day.\"\"\"",
            "name": "DayArchiveView",
            "namespace": "django.views.generic.dates.DayArchiveView",
            "methods": []
        },
        {
            "docstring": "\"\"\"List of objects published today.\"\"\"",
            "name": "BaseTodayArchiveView",
            "namespace": "django.views.generic.dates.BaseTodayArchiveView",
            "methods": [
                {
                    "docstring": "\"\"\"Return (date_list, items, extra_context) for this request.\"\"\"",
                    "name": "get_dated_items",
                    "namespace": "django.views.generic.dates.BaseTodayArchiveView.get_dated_items",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"List of objects published today.\"\"\"",
            "name": "TodayArchiveView",
            "namespace": "django.views.generic.dates.TodayArchiveView",
            "methods": []
        },
        {
            "docstring": "\"\"\"\n    Detail view of a single object on a single date; this differs from the\n    standard DetailView by accepting a year/month/day in the URL.\n    \"\"\"",
            "name": "BaseDateDetailView",
            "namespace": "django.views.generic.dates.BaseDateDetailView",
            "methods": [
                {
                    "docstring": "\"\"\"Get the object this request displays.\"\"\"",
                    "name": "get_object",
                    "namespace": "django.views.generic.dates.BaseDateDetailView.get_object",
                    "class_name": "",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Detail view of a single object on a single date; this differs from the\n    standard DetailView by accepting a year/month/day in the URL.\n    \"\"\"",
            "name": "DateDetailView",
            "namespace": "django.views.generic.dates.DateDetailView",
            "methods": []
        }
    ],
    "functions": [
        {
            "docstring": "\"\"\"\n    Get a datetime.date object given a format string and a year, month, and day\n    (only year is mandatory). Raise a 404 for an invalid date.\n    \"\"\"",
            "name": "_date_from_string",
            "namespace": "django.views.generic.dates._date_from_string",
            "class_name": "",
            "module_name": "django.views.generic.dates",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Get the next or the previous valid date. The idea is to allow links on\n    month/day views to never be 404s by never providing a date that'll be\n    invalid for the given view.\n\n    This is a bit complicated since it handles different intervals of time,\n    hence the coupling to generic_view.\n\n    However in essence the logic comes down to:\n\n        * If allow_empty and allow_future are both true, this is easy: just\n          return the naive result (just the next/previous day/week/month,\n          regardless of object existence.)\n\n        * If allow_empty is true, allow_future is false, and the naive result\n          isn't in the future, then return it; otherwise return None.\n\n        * If allow_empty is false and allow_future is true, return the next\n          date *that contains a valid object*, even if it's in the future. If\n          there are no next objects, return None.\n\n        * If allow_empty is false and allow_future is false, return the next\n          date that contains a valid object. If that date is in the future, or\n          if there are no next objects, return None.\n    \"\"\"",
            "name": "_get_next_prev",
            "namespace": "django.views.generic.dates._get_next_prev",
            "class_name": "",
            "module_name": "django.views.generic.dates",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return the current date in the current time zone.\"\"\"",
            "name": "timezone_today",
            "namespace": "django.views.generic.dates.timezone_today",
            "class_name": "",
            "module_name": "django.views.generic.dates",
            "package_name": ""
        }
    ],
    "package_name": "django.views.generic"
}