{
    "namespace": "django.core.management.templates",
    "docstring": "",
    "classes": [
        {
            "docstring": "\"\"\"\n    Copy either a Django application layout template or a Django project\n    layout template into the specified directory.\n\n    :param style: A color style object (see django.core.management.color).\n    :param app_or_project: The string 'app' or 'project'.\n    :param name: The name of the application or project.\n    :param directory: The directory to which the template should be copied.\n    :param options: The additional variables passed to project or app templates\n    \"\"\"",
            "name": "TemplateCommand",
            "namespace": "django.core.management.templates.TemplateCommand",
            "methods": [
                {
                    "docstring": "",
                    "name": "add_arguments",
                    "namespace": "django.core.management.templates.TemplateCommand.add_arguments",
                    "class_name": "django.core.management.templates.TemplateCommand",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "handle",
                    "namespace": "django.core.management.templates.TemplateCommand.handle",
                    "class_name": "django.core.management.templates.TemplateCommand",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Determine where the app or project templates are.\n        Use django.__path__[0] as the default because the Django install\n        directory isn't known.\n        \"\"\"",
                    "name": "handle_template",
                    "namespace": "django.core.management.templates.TemplateCommand.handle_template",
                    "class_name": "django.core.management.templates.TemplateCommand",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "validate_name",
                    "namespace": "django.core.management.templates.TemplateCommand.validate_name",
                    "class_name": "django.core.management.templates.TemplateCommand",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Download the given URL and return the file name.\n        \"\"\"",
                    "name": "download",
                    "namespace": "django.core.management.templates.TemplateCommand.download",
                    "class_name": "django.core.management.templates.TemplateCommand",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Like os.path.splitext, but takes off .tar, too\n        \"\"\"",
                    "name": "splitext",
                    "namespace": "django.core.management.templates.TemplateCommand.splitext",
                    "class_name": "django.core.management.templates.TemplateCommand",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Extract the given file to a temporary directory and return\n        the path of the directory with the extracted content.\n        \"\"\"",
                    "name": "extract",
                    "namespace": "django.core.management.templates.TemplateCommand.extract",
                    "class_name": "django.core.management.templates.TemplateCommand",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return True if the name looks like a URL.\"\"\"",
                    "name": "is_url",
                    "namespace": "django.core.management.templates.TemplateCommand.is_url",
                    "class_name": "django.core.management.templates.TemplateCommand",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Make sure that the file is writeable.\n        Useful if our source is read-only.\n        \"\"\"",
                    "name": "make_writeable",
                    "namespace": "django.core.management.templates.TemplateCommand.make_writeable",
                    "class_name": "django.core.management.templates.TemplateCommand",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        }
    ],
    "functions": [],
    "package_name": "django.core.management"
}