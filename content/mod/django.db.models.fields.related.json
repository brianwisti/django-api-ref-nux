{
    "namespace": "django.db.models.fields.related",
    "docstring": "",
    "classes": [
        {
            "docstring": "\"\"\"Base class that all relational fields inherit from.\"\"\"",
            "name": "RelatedField",
            "namespace": "django.db.models.fields.related.RelatedField",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.db.models.fields.related.RelatedField.__init__",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "related_model",
                    "namespace": "django.db.models.fields.related.RelatedField.related_model",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "check",
                    "namespace": "django.db.models.fields.related.RelatedField.check",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_related_name_is_valid",
                    "namespace": "django.db.models.fields.related.RelatedField._check_related_name_is_valid",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_related_query_name_is_valid",
                    "namespace": "django.db.models.fields.related.RelatedField._check_related_query_name_is_valid",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_relation_model_exists",
                    "namespace": "django.db.models.fields.related.RelatedField._check_relation_model_exists",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_referencing_to_swapped_model",
                    "namespace": "django.db.models.fields.related.RelatedField._check_referencing_to_swapped_model",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Check accessor and reverse query name clashes.\"\"\"",
                    "name": "_check_clashes",
                    "namespace": "django.db.models.fields.related.RelatedField._check_clashes",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "db_type",
                    "namespace": "django.db.models.fields.related.RelatedField.db_type",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "contribute_to_class",
                    "namespace": "django.db.models.fields.related.RelatedField.contribute_to_class",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "deconstruct",
                    "namespace": "django.db.models.fields.related.RelatedField.deconstruct",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return the keyword arguments that when supplied to\n        self.model.object.filter(), would select all instances related through\n        this field to the remote obj. This is used to build the querysets\n        returned by related descriptors. obj is an instance of\n        self.related_field.model.\n        \"\"\"",
                    "name": "get_forward_related_filter",
                    "namespace": "django.db.models.fields.related.RelatedField.get_forward_related_filter",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Complement to get_forward_related_filter(). Return the keyword\n        arguments that when passed to self.related_field.model.object.filter()\n        select all instances of self.related_field.model related through\n        this field to obj. obj is an instance of self.model.\n        \"\"\"",
                    "name": "get_reverse_related_filter",
                    "namespace": "django.db.models.fields.related.RelatedField.get_reverse_related_filter",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Get the setting that this is powered from for swapping, or None\n        if it's not swapped in / marked with swappable=False.\n        \"\"\"",
                    "name": "swappable_setting",
                    "namespace": "django.db.models.fields.related.RelatedField.swappable_setting",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "set_attributes_from_rel",
                    "namespace": "django.db.models.fields.related.RelatedField.set_attributes_from_rel",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "do_related_class",
                    "namespace": "django.db.models.fields.related.RelatedField.do_related_class",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return ``limit_choices_to`` for this model field.\n\n        If it is a callable, it will be invoked and the result will be\n        returned.\n        \"\"\"",
                    "name": "get_limit_choices_to",
                    "namespace": "django.db.models.fields.related.RelatedField.get_limit_choices_to",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Pass ``limit_choices_to`` to the field being constructed.\n\n        Only passes it if there is a type that supports related fields.\n        This is a similar strategy used to pass the ``queryset`` to the field\n        being constructed.\n        \"\"\"",
                    "name": "formfield",
                    "namespace": "django.db.models.fields.related.RelatedField.formfield",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Define the name that can be used to identify this related object in a\n        table-spanning query.\n        \"\"\"",
                    "name": "related_query_name",
                    "namespace": "django.db.models.fields.related.RelatedField.related_query_name",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        When filtering against this relation, return the field on the remote\n        model against which the filtering should happen.\n        \"\"\"",
                    "name": "target_field",
                    "namespace": "django.db.models.fields.related.RelatedField.target_field",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_cache_name",
                    "namespace": "django.db.models.fields.related.RelatedField.get_cache_name",
                    "class_name": "django.db.models.fields.related.RelatedField",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Abstraction of the ForeignKey relation to support multi-column relations.\n    \"\"\"",
            "name": "ForeignObject",
            "namespace": "django.db.models.fields.related.ForeignObject",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.db.models.fields.related.ForeignObject.__init__",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "check",
                    "namespace": "django.db.models.fields.related.ForeignObject.check",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_to_fields_exist",
                    "namespace": "django.db.models.fields.related.ForeignObject._check_to_fields_exist",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_unique_target",
                    "namespace": "django.db.models.fields.related.ForeignObject._check_unique_target",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "deconstruct",
                    "namespace": "django.db.models.fields.related.ForeignObject.deconstruct",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "resolve_related_fields",
                    "namespace": "django.db.models.fields.related.ForeignObject.resolve_related_fields",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "related_fields",
                    "namespace": "django.db.models.fields.related.ForeignObject.related_fields",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "reverse_related_fields",
                    "namespace": "django.db.models.fields.related.ForeignObject.reverse_related_fields",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "local_related_fields",
                    "namespace": "django.db.models.fields.related.ForeignObject.local_related_fields",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "foreign_related_fields",
                    "namespace": "django.db.models.fields.related.ForeignObject.foreign_related_fields",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_local_related_value",
                    "namespace": "django.db.models.fields.related.ForeignObject.get_local_related_value",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_foreign_related_value",
                    "namespace": "django.db.models.fields.related.ForeignObject.get_foreign_related_value",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_instance_value_for_fields",
                    "namespace": "django.db.models.fields.related.ForeignObject.get_instance_value_for_fields",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_attname_column",
                    "namespace": "django.db.models.fields.related.ForeignObject.get_attname_column",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_joining_columns",
                    "namespace": "django.db.models.fields.related.ForeignObject.get_joining_columns",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_reverse_joining_columns",
                    "namespace": "django.db.models.fields.related.ForeignObject.get_reverse_joining_columns",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return an extra filter condition for related object fetching when\n        user does 'instance.fieldname', that is the extra filter is used in\n        the descriptor of the field.\n\n        The filter should be either a dict usable in .filter(**kwargs) call or\n        a Q-object. The condition will be ANDed together with the relation's\n        joining columns.\n\n        A parallel method is get_extra_restriction() which is used in\n        JOIN and subquery conditions.\n        \"\"\"",
                    "name": "get_extra_descriptor_filter",
                    "namespace": "django.db.models.fields.related.ForeignObject.get_extra_descriptor_filter",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Return a pair condition used for joining and subquery pushdown. The\n        condition is something that responds to as_sql(compiler, connection)\n        method.\n\n        Note that currently referring both the 'alias' and 'related_alias'\n        will not work in some conditions, like subquery pushdown.\n\n        A parallel method is get_extra_descriptor_filter() which is used in\n        instance.fieldname related object fetching.\n        \"\"\"",
                    "name": "get_extra_restriction",
                    "namespace": "django.db.models.fields.related.ForeignObject.get_extra_restriction",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Get path from this field to the related model.\"\"\"",
                    "name": "get_path_info",
                    "namespace": "django.db.models.fields.related.ForeignObject.get_path_info",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Get path from the related model to this field's model.\"\"\"",
                    "name": "get_reverse_path_info",
                    "namespace": "django.db.models.fields.related.ForeignObject.get_reverse_path_info",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_lookups",
                    "namespace": "django.db.models.fields.related.ForeignObject.get_lookups",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "contribute_to_class",
                    "namespace": "django.db.models.fields.related.ForeignObject.contribute_to_class",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "contribute_to_related_class",
                    "namespace": "django.db.models.fields.related.ForeignObject.contribute_to_related_class",
                    "class_name": "django.db.models.fields.related.ForeignObject",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Provide a many-to-one relation by adding a column to the local model\n    to hold the remote value.\n\n    By default ForeignKey will target the pk of the remote model but this\n    behavior can be changed by using the ``to_field`` argument.\n    \"\"\"",
            "name": "ForeignKey",
            "namespace": "django.db.models.fields.related.ForeignKey",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.db.models.fields.related.ForeignKey.__init__",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "check",
                    "namespace": "django.db.models.fields.related.ForeignKey.check",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_on_delete",
                    "namespace": "django.db.models.fields.related.ForeignKey._check_on_delete",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_unique",
                    "namespace": "django.db.models.fields.related.ForeignKey._check_unique",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "deconstruct",
                    "namespace": "django.db.models.fields.related.ForeignKey.deconstruct",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "to_python",
                    "namespace": "django.db.models.fields.related.ForeignKey.to_python",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "target_field",
                    "namespace": "django.db.models.fields.related.ForeignKey.target_field",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Get path from the related model to this field's model.\"\"\"",
                    "name": "get_reverse_path_info",
                    "namespace": "django.db.models.fields.related.ForeignKey.get_reverse_path_info",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "validate",
                    "namespace": "django.db.models.fields.related.ForeignKey.validate",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "resolve_related_fields",
                    "namespace": "django.db.models.fields.related.ForeignKey.resolve_related_fields",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_attname",
                    "namespace": "django.db.models.fields.related.ForeignKey.get_attname",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_attname_column",
                    "namespace": "django.db.models.fields.related.ForeignKey.get_attname_column",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Return the to_field if the default value is an object.\"\"\"",
                    "name": "get_default",
                    "namespace": "django.db.models.fields.related.ForeignKey.get_default",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_db_prep_save",
                    "namespace": "django.db.models.fields.related.ForeignKey.get_db_prep_save",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_db_prep_value",
                    "namespace": "django.db.models.fields.related.ForeignKey.get_db_prep_value",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_prep_value",
                    "namespace": "django.db.models.fields.related.ForeignKey.get_prep_value",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "contribute_to_related_class",
                    "namespace": "django.db.models.fields.related.ForeignKey.contribute_to_related_class",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "formfield",
                    "namespace": "django.db.models.fields.related.ForeignKey.formfield",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "db_check",
                    "namespace": "django.db.models.fields.related.ForeignKey.db_check",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "db_type",
                    "namespace": "django.db.models.fields.related.ForeignKey.db_type",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "db_parameters",
                    "namespace": "django.db.models.fields.related.ForeignKey.db_parameters",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "convert_empty_strings",
                    "namespace": "django.db.models.fields.related.ForeignKey.convert_empty_strings",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_db_converters",
                    "namespace": "django.db.models.fields.related.ForeignKey.get_db_converters",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_col",
                    "namespace": "django.db.models.fields.related.ForeignKey.get_col",
                    "class_name": "django.db.models.fields.related.ForeignKey",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    A OneToOneField is essentially the same as a ForeignKey, with the exception\n    that it always carries a \"unique\" constraint with it and the reverse\n    relation always returns the object pointed to (since there will only ever\n    be one), rather than returning a list.\n    \"\"\"",
            "name": "OneToOneField",
            "namespace": "django.db.models.fields.related.OneToOneField",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.db.models.fields.related.OneToOneField.__init__",
                    "class_name": "django.db.models.fields.related.OneToOneField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "deconstruct",
                    "namespace": "django.db.models.fields.related.OneToOneField.deconstruct",
                    "class_name": "django.db.models.fields.related.OneToOneField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "formfield",
                    "namespace": "django.db.models.fields.related.OneToOneField.formfield",
                    "class_name": "django.db.models.fields.related.OneToOneField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "save_form_data",
                    "namespace": "django.db.models.fields.related.OneToOneField.save_form_data",
                    "class_name": "django.db.models.fields.related.OneToOneField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_unique",
                    "namespace": "django.db.models.fields.related.OneToOneField._check_unique",
                    "class_name": "django.db.models.fields.related.OneToOneField",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        },
        {
            "docstring": "\"\"\"\n    Provide a many-to-many relation by using an intermediary model that\n    holds two ForeignKey fields pointed at the two sides of the relation.\n\n    Unless a ``through`` model was provided, ManyToManyField will use the\n    create_many_to_many_intermediary_model factory to automatically generate\n    the intermediary model.\n    \"\"\"",
            "name": "ManyToManyField",
            "namespace": "django.db.models.fields.related.ManyToManyField",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.db.models.fields.related.ManyToManyField.__init__",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "check",
                    "namespace": "django.db.models.fields.related.ManyToManyField.check",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_unique",
                    "namespace": "django.db.models.fields.related.ManyToManyField._check_unique",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_ignored_options",
                    "namespace": "django.db.models.fields.related.ManyToManyField._check_ignored_options",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_relationship_model",
                    "namespace": "django.db.models.fields.related.ManyToManyField._check_relationship_model",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "_check_table_uniqueness",
                    "namespace": "django.db.models.fields.related.ManyToManyField._check_table_uniqueness",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "deconstruct",
                    "namespace": "django.db.models.fields.related.ManyToManyField.deconstruct",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"Called by both direct and indirect m2m traversal.\"\"\"",
                    "name": "_get_path_info",
                    "namespace": "django.db.models.fields.related.ManyToManyField._get_path_info",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_path_info",
                    "namespace": "django.db.models.fields.related.ManyToManyField.get_path_info",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_reverse_path_info",
                    "namespace": "django.db.models.fields.related.ManyToManyField.get_reverse_path_info",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Function that can be curried to provide the m2m table name for this\n        relation.\n        \"\"\"",
                    "name": "_get_m2m_db_table",
                    "namespace": "django.db.models.fields.related.ManyToManyField._get_m2m_db_table",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Function that can be curried to provide the source accessor or DB\n        column name for the m2m table.\n        \"\"\"",
                    "name": "_get_m2m_attr",
                    "namespace": "django.db.models.fields.related.ManyToManyField._get_m2m_attr",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "\"\"\"\n        Function that can be curried to provide the related accessor or DB\n        column name for the m2m table.\n        \"\"\"",
                    "name": "_get_m2m_reverse_attr",
                    "namespace": "django.db.models.fields.related.ManyToManyField._get_m2m_reverse_attr",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "contribute_to_class",
                    "namespace": "django.db.models.fields.related.ManyToManyField.contribute_to_class",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "contribute_to_related_class",
                    "namespace": "django.db.models.fields.related.ManyToManyField.contribute_to_related_class",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "set_attributes_from_rel",
                    "namespace": "django.db.models.fields.related.ManyToManyField.set_attributes_from_rel",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "value_from_object",
                    "namespace": "django.db.models.fields.related.ManyToManyField.value_from_object",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "save_form_data",
                    "namespace": "django.db.models.fields.related.ManyToManyField.save_form_data",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "formfield",
                    "namespace": "django.db.models.fields.related.ManyToManyField.formfield",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "db_check",
                    "namespace": "django.db.models.fields.related.ManyToManyField.db_check",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "db_type",
                    "namespace": "django.db.models.fields.related.ManyToManyField.db_type",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "db_parameters",
                    "namespace": "django.db.models.fields.related.ManyToManyField.db_parameters",
                    "class_name": "django.db.models.fields.related.ManyToManyField",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        }
    ],
    "functions": [
        {
            "docstring": "\"\"\"\n    Transform relation into a model or fully-qualified model string of the form\n    \"app_label.ModelName\", relative to scope_model.\n\n    The relation argument can be:\n      * RECURSIVE_RELATIONSHIP_CONSTANT, i.e. the string \"self\", in which case\n        the model argument will be returned.\n      * A bare model name without an app_label, in which case scope_model's\n        app_label will be prepended.\n      * An \"app_label.ModelName\" string.\n      * A model class, which will be returned unchanged.\n    \"\"\"",
            "name": "resolve_relation",
            "namespace": "django.db.models.fields.related.resolve_relation",
            "class_name": "",
            "module_name": "django.db.models.fields.related",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Schedule `function` to be called once `model` and all `related_models`\n    have been imported and registered with the app registry. `function` will\n    be called with the newly-loaded model classes as its positional arguments,\n    plus any optional keyword arguments.\n\n    The `model` argument must be a model class. Each subsequent positional\n    argument is another model, or a reference to another model - see\n    `resolve_relation()` for the various forms these may take. Any relative\n    references will be resolved relative to `model`.\n\n    This is a convenience wrapper for `Apps.lazy_model_operation` - the app\n    registry model used is the one found in `model._meta.apps`.\n    \"\"\"",
            "name": "lazy_related_operation",
            "namespace": "django.db.models.fields.related.lazy_related_operation",
            "class_name": "",
            "module_name": "django.db.models.fields.related",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "create_many_to_many_intermediary_model",
            "namespace": "django.db.models.fields.related.create_many_to_many_intermediary_model",
            "class_name": "",
            "module_name": "django.db.models.fields.related",
            "package_name": ""
        }
    ],
    "package_name": "django.db.models.fields"
}