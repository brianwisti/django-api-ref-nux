{
    "namespace": "django.utils.html",
    "docstring": "\"\"\"HTML utilities suitable for global use.\"\"\"",
    "classes": [
        {
            "docstring": "",
            "name": "MLStripper",
            "namespace": "django.utils.html.MLStripper",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.utils.html.MLStripper.__init__",
                    "class_name": "django.utils.html.MLStripper",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "handle_data",
                    "namespace": "django.utils.html.MLStripper.handle_data",
                    "class_name": "django.utils.html.MLStripper",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "handle_entityref",
                    "namespace": "django.utils.html.MLStripper.handle_entityref",
                    "class_name": "django.utils.html.MLStripper",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "handle_charref",
                    "namespace": "django.utils.html.MLStripper.handle_charref",
                    "class_name": "django.utils.html.MLStripper",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "get_data",
                    "namespace": "django.utils.html.MLStripper.get_data",
                    "class_name": "django.utils.html.MLStripper",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        }
    ],
    "functions": [
        {
            "docstring": "\"\"\"\n    Return the given text with ampersands, quotes and angle brackets encoded\n    for use in HTML.\n\n    Always escape input, even if it's already escaped and marked as such.\n    This may result in double-escaping. If this is a concern, use\n    conditional_escape() instead.\n    \"\"\"",
            "name": "escape",
            "namespace": "django.utils.html.escape",
            "class_name": "",
            "module_name": "django.utils.html",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Hex encode characters for use in JavaScript strings.\"\"\"",
            "name": "escapejs",
            "namespace": "django.utils.html.escapejs",
            "class_name": "",
            "module_name": "django.utils.html",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"",
            "name": "json_script",
            "namespace": "django.utils.html.json_script",
            "class_name": "",
            "module_name": "django.utils.html",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Similar to escape(), except that it doesn't operate on pre-escaped strings.\n\n    This function relies on the __html__ convention used both by Django's\n    SafeData class and by third-party libraries like markupsafe.\n    \"\"\"",
            "name": "conditional_escape",
            "namespace": "django.utils.html.conditional_escape",
            "class_name": "",
            "module_name": "django.utils.html",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Similar to str.format, but pass all arguments through conditional_escape(),\n    and call mark_safe() on the result. This function should be used instead\n    of str.format or % interpolation to build up small HTML fragments.\n    \"\"\"",
            "name": "format_html",
            "namespace": "django.utils.html.format_html",
            "class_name": "",
            "module_name": "django.utils.html",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    A wrapper of format_html, for the common case of a group of arguments that\n    need to be formatted using the same format string, and then joined using\n    'sep'. 'sep' is also passed through conditional_escape.\n\n    'args_generator' should be an iterator that returns the sequence of 'args'\n    that will be passed to format_html.\n\n    Example:\n\n      format_html_join('\\n', \"<li>{} {}</li>\", ((u.first_name, u.last_name)\n                                                  for u in users))\n    \"\"\"",
            "name": "format_html_join",
            "namespace": "django.utils.html.format_html_join",
            "class_name": "",
            "module_name": "django.utils.html",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Convert newlines into <p> and <br>s.\"\"\"",
            "name": "linebreaks",
            "namespace": "django.utils.html.linebreaks",
            "class_name": "",
            "module_name": "django.utils.html",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Internal tag stripping utility used by strip_tags.\n    \"\"\"",
            "name": "_strip_once",
            "namespace": "django.utils.html._strip_once",
            "class_name": "",
            "module_name": "django.utils.html",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return the given HTML with all tags stripped.\"\"\"",
            "name": "strip_tags",
            "namespace": "django.utils.html.strip_tags",
            "class_name": "",
            "module_name": "django.utils.html",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return the given HTML with spaces between tags removed.\"\"\"",
            "name": "strip_spaces_between_tags",
            "namespace": "django.utils.html.strip_spaces_between_tags",
            "class_name": "",
            "module_name": "django.utils.html",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Quote a URL if it isn't already quoted.\"\"\"",
            "name": "smart_urlquote",
            "namespace": "django.utils.html.smart_urlquote",
            "class_name": "",
            "module_name": "django.utils.html",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Convert any URLs in text into clickable links.\n\n    Works on http://, https://, www. links, and also on links ending in one of\n    the original seven gTLDs (.com, .edu, .gov, .int, .mil, .net, and .org).\n    Links can have trailing punctuation (periods, commas, close-parens) and\n    leading punctuation (opening parens) and it'll still do the right thing.\n\n    If trim_url_limit is not None, truncate the URLs in the link text longer\n    than this limit to trim_url_limit - 1 characters and append an ellipsis.\n\n    If nofollow is True, give the links a rel=\"nofollow\" attribute.\n\n    If autoescape is True, autoescape the link text and URLs.\n    \"\"\"",
            "name": "urlize",
            "namespace": "django.utils.html.urlize",
            "class_name": "",
            "module_name": "django.utils.html",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Avoid text wrapping in the middle of a phrase by adding non-breaking\n    spaces where there previously were normal spaces.\n    \"\"\"",
            "name": "avoid_wrapping",
            "namespace": "django.utils.html.avoid_wrapping",
            "class_name": "",
            "module_name": "django.utils.html",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    A decorator that defines the __html__ method. This helps non-Django\n    templates to detect classes whose __str__ methods return SafeString.\n    \"\"\"",
            "name": "html_safe",
            "namespace": "django.utils.html.html_safe",
            "class_name": "",
            "module_name": "django.utils.html",
            "package_name": ""
        }
    ],
    "package_name": "django.utils"
}