{
    "namespace": "django.utils.http",
    "docstring": "",
    "classes": [],
    "functions": [
        {
            "docstring": "\"\"\"\n    A version of Python's urllib.parse.urlencode() function that can operate on\n    MultiValueDict and non-string values.\n    \"\"\"",
            "name": "urlencode",
            "namespace": "django.utils.http.urlencode",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Format the time to match the RFC1123 date format as specified by HTTP\n    RFC7231 section 7.1.1.1.\n\n    `epoch_seconds` is a floating point number expressed in seconds since the\n    epoch, in UTC - such as that outputted by time.time(). If set to None, it\n    defaults to the current time.\n\n    Output a string in the format 'Wdy, DD Mon YYYY HH:MM:SS GMT'.\n    \"\"\"",
            "name": "http_date",
            "namespace": "django.utils.http.http_date",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Parse a date format as specified by HTTP RFC7231 section 7.1.1.1.\n\n    The three formats allowed by the RFC are accepted, even if only the first\n    one is still in widespread use.\n\n    Return an integer expressed in seconds since the epoch, in UTC.\n    \"\"\"",
            "name": "parse_http_date",
            "namespace": "django.utils.http.parse_http_date",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Same as parse_http_date, but return None if the input is invalid.\n    \"\"\"",
            "name": "parse_http_date_safe",
            "namespace": "django.utils.http.parse_http_date_safe",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Convert a base 36 string to an int. Raise ValueError if the input won't fit\n    into an int.\n    \"\"\"",
            "name": "base36_to_int",
            "namespace": "django.utils.http.base36_to_int",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Convert an integer to a base36 string.\"\"\"",
            "name": "int_to_base36",
            "namespace": "django.utils.http.int_to_base36",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Encode a bytestring to a base64 string for use in URLs. Strip any trailing\n    equal signs.\n    \"\"\"",
            "name": "urlsafe_base64_encode",
            "namespace": "django.utils.http.urlsafe_base64_encode",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Decode a base64 encoded string. Add back any trailing equal signs that\n    might have been stripped.\n    \"\"\"",
            "name": "urlsafe_base64_decode",
            "namespace": "django.utils.http.urlsafe_base64_decode",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Parse a string of ETags given in an If-None-Match or If-Match header as\n    defined by RFC 7232. Return a list of quoted ETags, or ['*'] if all ETags\n    should be matched.\n    \"\"\"",
            "name": "parse_etags",
            "namespace": "django.utils.http.parse_etags",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    If the provided string is already a quoted ETag, return it. Otherwise, wrap\n    the string in quotes, making it a strong ETag.\n    \"\"\"",
            "name": "quote_etag",
            "namespace": "django.utils.http.quote_etag",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Return ``True`` if the host is either an exact match or a match\n    to the wildcard pattern.\n\n    Any pattern beginning with a period matches a domain and all of its\n    subdomains. (e.g. ``.example.com`` matches ``example.com`` and\n    ``foo.example.com``). Anything else is an exact string match.\n    \"\"\"",
            "name": "is_same_domain",
            "namespace": "django.utils.http.is_same_domain",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Return ``True`` if the url uses an allowed host and a safe scheme.\n\n    Always return ``False`` on an empty url.\n\n    If ``require_https`` is ``True``, only 'https' will be considered a valid\n    scheme, as opposed to 'http' and 'https' with the default, ``False``.\n\n    Note: \"True\" doesn't entail that a URL is \"safe\". It may still be e.g.\n    quoted incorrectly. Ensure to also use django.utils.encoding.iri_to_uri()\n    on the path component of untrusted URLs.\n    \"\"\"",
            "name": "url_has_allowed_host_and_scheme",
            "namespace": "django.utils.http.url_has_allowed_host_and_scheme",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Parse a URL into 6 components:\n    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>\n    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).\n    Note that we don't break the components up in smaller bits\n    (e.g. netloc is a single string) and we don't expand % escapes.\"\"\"",
            "name": "_urlparse",
            "namespace": "django.utils.http._urlparse",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Parse a URL into 5 components:\n    <scheme>://<netloc>/<path>?<query>#<fragment>\n    Return a 5-tuple: (scheme, netloc, path, query, fragment).\n    Note that we don't break the components up in smaller bits\n    (e.g. netloc is a single string) and we don't expand % escapes.\"\"\"",
            "name": "_urlsplit",
            "namespace": "django.utils.http._urlsplit",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "",
            "name": "_url_has_allowed_host_and_scheme",
            "namespace": "django.utils.http._url_has_allowed_host_and_scheme",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    If redirecting to an absolute path (two leading slashes), a slash must be\n    escaped to prevent browsers from handling the path as schemaless and\n    redirecting to another host.\n    \"\"\"",
            "name": "escape_leading_slashes",
            "namespace": "django.utils.http.escape_leading_slashes",
            "class_name": "",
            "module_name": "django.utils.http",
            "package_name": ""
        }
    ],
    "package_name": "django.utils"
}