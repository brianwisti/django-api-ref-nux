{
    "docstring": "\"\"\"\nBase classes for writing management commands (named commands which can\nbe executed through ``django-admin`` or ``manage.py``).\n\"\"\"",
    "namespace": "django.core.management.base",
    "classes": [
        {
            "docstring": "\"\"\"\n    Exception class indicating a problem while executing a management\n    command.\n\n    If this exception is raised during the execution of a management\n    command, it will be caught and turned into a nicely-printed error\n    message to the appropriate output stream (i.e., stderr); as a\n    result, raising this exception (with a sensible description of the\n    error) is the preferred way to indicate that something has gone\n    wrong in the execution of a command.\n    \"\"\"",
            "name": "CommandError",
            "parent_name": "django.core.management.base"
        },
        {
            "docstring": "\"\"\"\n    The system check framework detected unrecoverable errors.\n    \"\"\"",
            "name": "SystemCheckError",
            "parent_name": "django.core.management.base"
        },
        {
            "docstring": "\"\"\"\n    Customized ArgumentParser class to improve some error messages and prevent\n    SystemExit in several occasions, as SystemExit is unacceptable when a\n    command is called programmatically.\n    \"\"\"",
            "name": "CommandParser",
            "parent_name": "django.core.management.base"
        },
        {
            "docstring": "\"\"\"\n    Customized formatter so that command-specific arguments appear in the\n    --help output before arguments common to all commands.\n    \"\"\"",
            "name": "DjangoHelpFormatter",
            "parent_name": "django.core.management.base"
        },
        {
            "docstring": "\"\"\"\n    Wrapper around stdout/stderr\n    \"\"\"",
            "name": "OutputWrapper",
            "parent_name": "django.core.management.base"
        },
        {
            "docstring": "\"\"\"\n    The base class from which all management commands ultimately\n    derive.\n\n    Use this class if you want access to all of the mechanisms which\n    parse the command-line arguments and work out what code to call in\n    response; if you don't need to change any of that behavior,\n    consider using one of the subclasses defined in this file.\n\n    If you are interested in overriding/customizing various aspects of\n    the command-parsing and -execution behavior, the normal flow works\n    as follows:\n\n    1. ``django-admin`` or ``manage.py`` loads the command class\n       and calls its ``run_from_argv()`` method.\n\n    2. The ``run_from_argv()`` method calls ``create_parser()`` to get\n       an ``ArgumentParser`` for the arguments, parses them, performs\n       any environment changes requested by options like\n       ``pythonpath``, and then calls the ``execute()`` method,\n       passing the parsed arguments.\n\n    3. The ``execute()`` method attempts to carry out the command by\n       calling the ``handle()`` method with the parsed arguments; any\n       output produced by ``handle()`` will be printed to standard\n       output and, if the command is intended to produce a block of\n       SQL statements, will be wrapped in ``BEGIN`` and ``COMMIT``.\n\n    4. If ``handle()`` or ``execute()`` raised any exception (e.g.\n       ``CommandError``), ``run_from_argv()`` will  instead print an error\n       message to ``stderr``.\n\n    Thus, the ``handle()`` method is typically the starting point for\n    subclasses; many built-in commands and command types either place\n    all of their logic in ``handle()``, or perform some additional\n    parsing work in ``handle()`` and then delegate from it to more\n    specialized methods as needed.\n\n    Several attributes affect behavior at various steps along the way:\n\n    ``help``\n        A short description of the command, which will be printed in\n        help messages.\n\n    ``output_transaction``\n        A boolean indicating whether the command outputs SQL\n        statements; if ``True``, the output will automatically be\n        wrapped with ``BEGIN;`` and ``COMMIT;``. Default value is\n        ``False``.\n\n    ``requires_migrations_checks``\n        A boolean; if ``True``, the command prints a warning if the set of\n        migrations on disk don't match the migrations in the database.\n\n    ``requires_system_checks``\n        A list or tuple of tags, e.g. [Tags.staticfiles, Tags.models]. System\n        checks registered in the chosen tags will be checked for errors prior\n        to executing the command. The value '__all__' can be used to specify\n        that all system checks should be performed. Default value is '__all__'.\n\n        To validate an individual application's models\n        rather than all applications' models, call\n        ``self.check(app_configs)`` from ``handle()``, where ``app_configs``\n        is the list of application's configuration provided by the\n        app registry.\n\n    ``stealth_options``\n        A tuple of any options the command uses which aren't defined by the\n        argument parser.\n    \"\"\"",
            "name": "BaseCommand",
            "parent_name": "django.core.management.base"
        },
        {
            "docstring": "\"\"\"\n    A management command which takes one or more installed application labels\n    as arguments, and does something with each of them.\n\n    Rather than implementing ``handle()``, subclasses must implement\n    ``handle_app_config()``, which will be called once for each application.\n    \"\"\"",
            "name": "AppCommand",
            "parent_name": "django.core.management.base"
        },
        {
            "docstring": "\"\"\"\n    A management command which takes one or more arbitrary arguments\n    (labels) on the command line, and does something with each of\n    them.\n\n    Rather than implementing ``handle()``, subclasses must implement\n    ``handle_label()``, which will be called once for each label.\n\n    If the arguments should be names of installed applications, use\n    ``AppCommand`` instead.\n    \"\"\"",
            "name": "LabelCommand",
            "parent_name": "django.core.management.base"
        }
    ]
}