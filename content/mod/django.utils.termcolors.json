{
    "namespace": "django.utils.termcolors",
    "docstring": "\"\"\"\ntermcolors.py\n\"\"\"",
    "classes": [],
    "functions": [
        {
            "docstring": "\"\"\"\n    Return your text, enclosed in ANSI graphics codes.\n\n    Depends on the keyword arguments 'fg' and 'bg', and the contents of\n    the opts tuple/list.\n\n    Return the RESET code if no parameters are given.\n\n    Valid colors:\n        'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'\n\n    Valid options:\n        'bold'\n        'underscore'\n        'blink'\n        'reverse'\n        'conceal'\n        'noreset' - string will not be auto-terminated with the RESET code\n\n    Examples:\n        colorize('hello', fg='red', bg='blue', opts=('blink',))\n        colorize()\n        colorize('goodbye', opts=('underscore',))\n        print(colorize('first line', fg='red', opts=('noreset',)))\n        print('this should be red too')\n        print(colorize('and so should this'))\n        print('this should not be red')\n    \"\"\"",
            "name": "colorize",
            "namespace": "django.utils.termcolors.colorize",
            "class_name": "",
            "module_name": "django.utils.termcolors",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Return a function with default parameters for colorize()\n\n    Example:\n        bold_red = make_style(opts=('bold',), fg='red')\n        print(bold_red('hello'))\n        KEYWORD = make_style(fg='yellow')\n        COMMENT = make_style(fg='blue', opts=('bold',))\n    \"\"\"",
            "name": "make_style",
            "namespace": "django.utils.termcolors.make_style",
            "class_name": "",
            "module_name": "django.utils.termcolors",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Parse a DJANGO_COLORS environment variable to produce the system palette\n\n    The general form of a palette definition is:\n\n        \"palette;role=fg;role=fg/bg;role=fg,option,option;role=fg/bg,option,option\"\n\n    where:\n        palette is a named palette; one of 'light', 'dark', or 'nocolor'.\n        role is a named style used by Django\n        fg is a foreground color.\n        bg is a background color.\n        option is a display options.\n\n    Specifying a named palette is the same as manually specifying the individual\n    definitions for each role. Any individual definitions following the palette\n    definition will augment the base palette definition.\n\n    Valid roles:\n        'error', 'success', 'warning', 'notice', 'sql_field', 'sql_coltype',\n        'sql_keyword', 'sql_table', 'http_info', 'http_success',\n        'http_redirect', 'http_not_modified', 'http_bad_request',\n        'http_not_found', 'http_server_error', 'migrate_heading',\n        'migrate_label'\n\n    Valid colors:\n        'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'\n\n    Valid options:\n        'bold', 'underscore', 'blink', 'reverse', 'conceal', 'noreset'\n    \"\"\"",
            "name": "parse_color_setting",
            "namespace": "django.utils.termcolors.parse_color_setting",
            "class_name": "",
            "module_name": "django.utils.termcolors",
            "package_name": ""
        }
    ],
    "package_name": "django.utils"
}