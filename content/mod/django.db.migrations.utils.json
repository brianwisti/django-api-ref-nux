{
    "namespace": "django.db.migrations.utils",
    "docstring": "",
    "classes": [
        {
            "docstring": "",
            "name": "RegexObject",
            "namespace": "django.db.migrations.utils.RegexObject",
            "methods": [
                {
                    "docstring": "",
                    "name": "__init__",
                    "namespace": "django.db.migrations.utils.RegexObject.__init__",
                    "class_name": "django.db.migrations.utils.RegexObject",
                    "module_name": "",
                    "package_name": ""
                },
                {
                    "docstring": "",
                    "name": "__eq__",
                    "namespace": "django.db.migrations.utils.RegexObject.__eq__",
                    "class_name": "django.db.migrations.utils.RegexObject",
                    "module_name": "",
                    "package_name": ""
                }
            ]
        }
    ],
    "functions": [
        {
            "docstring": "",
            "name": "get_migration_name_timestamp",
            "namespace": "django.db.migrations.utils.get_migration_name_timestamp",
            "class_name": "",
            "module_name": "django.db.migrations.utils",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Turn a model class or model reference string and return a model tuple.\n\n    app_label and model_name are used to resolve the scope of recursive and\n    unscoped model relationship.\n    \"\"\"",
            "name": "resolve_relation",
            "namespace": "django.db.migrations.utils.resolve_relation",
            "class_name": "",
            "module_name": "django.db.migrations.utils",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Return either False or a FieldReference if `field` references provided\n    context.\n\n    False positives can be returned if `reference_field_name` is provided\n    without `reference_field` because of the introspection limitation it\n    incurs. This should not be an issue when this function is used to determine\n    whether or not an optimization can take place.\n    \"\"\"",
            "name": "field_references",
            "namespace": "django.db.migrations.utils.field_references",
            "class_name": "",
            "module_name": "django.db.migrations.utils",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"\n    Generator of (model_state, name, field, reference) referencing\n    provided context.\n\n    If field_tuple is provided only references to this particular field of\n    model_tuple will be generated.\n    \"\"\"",
            "name": "get_references",
            "namespace": "django.db.migrations.utils.get_references",
            "class_name": "",
            "module_name": "django.db.migrations.utils",
            "package_name": ""
        },
        {
            "docstring": "\"\"\"Return whether `field_tuple` is referenced by any state models.\"\"\"",
            "name": "field_is_referenced",
            "namespace": "django.db.migrations.utils.field_is_referenced",
            "class_name": "",
            "module_name": "django.db.migrations.utils",
            "package_name": ""
        }
    ],
    "package_name": "django.db.migrations"
}